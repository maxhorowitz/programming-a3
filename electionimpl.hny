from synch import *
import list

def Election(n, m):
    result = {
        # lock for transfer function
        .lock_transfer: Lock(),

        # n + m locks for candidates and citizens
        .locks_can:[Lock(),]*n,
        .locks_cit:[Lock(),]*m,
        # Election data
        .candidates:[0,]*n, 
        .citizens:[{.voted: False, .voted_for: -1},]*m
    }

def vote(election, candidate, citizen):
    #acquire lock
    acquire(?(election->locks_can[candidate]))
    acquire(?(election->locks_cit[citizen]))
    
    #vote
    if election->citizens[citizen].voted == False:
        election->candidates[candidate] += 1
        election->citizens[citizen].voted = True
        election->citizens[citizen].voted_for = candidate
        result = True
    result = False
    
    #release lock
    release(?(election->locks_cit[citizen]))
    release(?(election->locks_can[candidate]))


def withdraw(election, citizen):
    #acquire/release lock for citizen to create candidate variable
    acquire(?(election->locks_cit[citizen]))
    var candidate = election->citizens[citizen].voted_for
    release(?(election->locks_cit[citizen]))

    #acquire locks
    acquire(?(election->locks_can[candidate]))
    acquire(?(election->locks_cit[citizen]))
    
    #withdraw
    if election->citizens[citizen].voted == True:
        election->candidates[candidate] -= 1
        election->citizens[citizen].voted = False
        election->citizens[citizen].voted_for = -1
        result = True
    result = False
    
    #release lock
    release(?(election->locks_cit[citizen]))
    release(?(election->locks_can[candidate]))

def get_votes(election, candidate):
    #acquire lock
    acquire(?(election->locks_can[candidate]))
    
    #get votes
    result = election->candidates[candidate]
    
    #release lock
    release(?(election->locks_can[candidate]))

def transfer(election, candidate_from, candidate_to):
    #to prevent deadlocking (deadlock could occur if candidate A tries to transfer to 
    #candidate B while candidate B tries to transfer to candidate A - if they each
    #acquire the target candidate's lock, it would be a deadlock), we add an all
    #encompassing lock around the transfer function such that no two transfer threads
    #can execute concurrently.
    acquire(?election->lock_transfer)

    #acquire lock
    acquire(?(election->locks_can[candidate_from]))
    acquire(?(election->locks_can[candidate_to]))

    election->candidates[candidate_to] += election->candidates[candidate_from]
    election->candidates[candidate_from] = 0

    #release lock
    release(?(election->locks_can[candidate_from]))
    release(?(election->locks_can[candidate_to]))

    #release transfer lock
    release(?election->lock_transfer)

def winner(election):
    var high = -1
    var idx = -1
    for i in { 0..((len election->candidates)-1) }:
        if election->candidates[i] > high:
            high = election->candidates[i]
            idx = i
    result = idx