from synch import *
import list

def Election(n, m):
    result = {
        # n + m locks for candidates and citizens
        .locks_can:[Lock(),]*n,
        .locks_cit:[Lock(),]*m,
        # Election data
        .candidates:[0,]*n, 
        .citizens:[{.voted: False, .voted_for: -1},]*m
    }

def vote(election, candidate, citizen):
    #acquire lock
    acquire(?(election->locks_can[candidate]))
    acquire(?(election->locks_cit[citizen]))
    
    #vote
    if election->citizens[citizen].voted == False:
        election->candidates[candidate] += 1
        election->citizens[citizen].voted = True
        election->citizens[citizen].voted_for = candidate
        result = True
    result = False
    
    #release lock
    release(?(election->locks_cit[citizen]))
    release(?(election->locks_can[candidate]))


def withdraw(election, citizen):
    #acquire/release lock for citizen to create candidate variable
    acquire(?(election->locks_cit[citizen]))
    candidate = election->citizens[citizen].voted_for
    release(?(election->locks_cit[citizen]))

    #acquire locks
    acquire(?(election->locks_can[candidate]))
    acquire(?(election->locks_cit[citizen]))
    
    #withdraw
    if election->citizens[citizen].voted == True:
        election->candidates[candidate] -= 1
        election->citizens[citizen].voted = False
        election->citizens[citizen].voted_for = -1
        return True
    return False
    
    #release lock
    release(?(election->locks_cit[citizen]))
    release(?(election->locks_can[candidate]))

def get_votes(election, candidate):
    #acquire lock
    acquire(?(election->locks_can[candidate]))
    
    #get votes
    return elections->candidates[candidate]
    
    #release lock
    release(?(election->locks_can[candidate]))

def transfer(election, candidate_from, candidate_to):
    #acquire lock
    acquire(?(election->locks_can[candidate_from]))
    acquire(?(election->locks_can[candidate_to]))

    elections->candidates[candidate_to] += elections->candidates[candidate_from]
    elections->candidates[candidate_from] = 0

    #release lock
    release(?(election->locks_can[candidate_from]))
    release(?(election->locks_can[candidate_to]))

def winner(election):
    high = -1
    idx = -1
    for i in candidates:
        if candidates[i] > high:
            high = candidates[i]
            idx = i
    return idx