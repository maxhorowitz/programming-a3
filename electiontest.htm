<html>
<head>
  <meta charset='UTF-8'></meta>
  <style>
#table-wrapper {
  position:relative;
}
#table-scroll {
  height:200px;
  overflow:auto;  
}
#table-wrapper table {
  width:100%;
}
#table-wrapper table * {
  color:black;
}
#table-wrapper table thead th .text {
  position:absolute;   
  top:-20px;
  z-index:2;
  height:20px;
  width:35%;
  border:1px solid red;
}
table {
    border-collapse: collapse;
    border-style: hidden;
}
table td, table th {
    border: 1px solid black;
}

  </style>
</head>
<body>
<table>
  <tr>
    <td colspan='2'>
<table border='1'>
  <thead>
    <tr>
      <th colspan='4' style='color:red;'>
        Issue: Safety violation
      </th>
      <th align='center' colspan='10'>
        Shared Variables
      </th>
      <th align='center' colspan='10'>
        Output
      </th>
    </tr>
    <tr>
      <th align='center' rowspan='2'>
        Turn
      </th>
      <th align='center' rowspan='2'>
        Thread
      </th>
      <th align='center' rowspan='2'>
        Instructions Executed
      </th>
      <th align='center' rowspan='2'>
        &nbsp;PC&nbsp;
      </th>
<td align='center' style='font-style: italic' colspan='1' rowspan='2'>EXPECTED_VOTES</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='2'>NUM_CANDIDATES</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='2'>NUM_CITIZENS</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='2'>WINNER</td>
<td align='center' style='font-style: italic' colspan='4'>e</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='2'>number_of_spawned_threads</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='2'>threads_executed</td>
</tr><tr>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>candidates</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>citizens</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>locks_can</td>
<td align='center' style='font-style: italic' colspan='1' rowspan='1'>locks_cit</td>
</tr><tr>
    </tr>
  </thead>
  <tbody id='mestable'>
<tr id='mes0'>
  <td align='right'>
    1&nbsp;
  </td>
  <td>
    T0: __init__()  </td>
  <td>
    <canvas id='timeline0' width='300px' height='60px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log0' border='1'>
    </table>
  </td>
</tr>
<tr id='mes1'>
  <td align='right'>
    2&nbsp;
  </td>
  <td>
    T4: test_withdraw(?e, 0, 1, 2)  </td>
  <td>
    <canvas id='timeline1' width='300px' height='180px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log1' border='1'>
    </table>
  </td>
</tr>
<tr id='mes2'>
  <td align='right'>
    3&nbsp;
  </td>
  <td>
    T2: test_vote(?e, 1, 1)  </td>
  <td>
    <canvas id='timeline2' width='300px' height='60px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log2' border='1'>
    </table>
  </td>
</tr>
<tr id='mes3'>
  <td align='right'>
    4&nbsp;
  </td>
  <td>
    T3: test_vote(?e, 1, 1)  </td>
  <td>
    <canvas id='timeline3' width='300px' height='50px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log3' border='1'>
    </table>
  </td>
</tr>
<tr id='mes4'>
  <td align='right'>
    5&nbsp;
  </td>
  <td>
    T1: test_vote(?e, 0, 0)  </td>
  <td>
    <canvas id='timeline4' width='300px' height='60px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log4' border='1'>
    </table>
  </td>
</tr>
<tr id='mes5'>
  <td align='right'>
    6&nbsp;
  </td>
  <td>
    T5: end_test()  </td>
  <td>
    <canvas id='timeline5' width='300px' height='110px'>
    </canvas>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td align='center'>
  </td>
  <td>
    <table id='log5' border='1'>
    </table>
  </td>
</tr>
  </tbody>
</table>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:blue;'>
        <div id='coderow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr>
    <td colspan='2'>
      <h3 style='color:green;'>
        <div id='hvmrow'>
        </div>
      </h3>
    </td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td valign='top'>
<div id='table-wrapper'>
  <div id='table-scroll'>
    <table border='1'>
      <tbody>
        <tr id='P0'>
          <td align='right'>
            <a name='P0'>0</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method __init__' id='C0'>
              Frame __init__()
            </span>
          </td>
        </tr>
        <tr id='P1'>
          <td align='right'>
            <a name='P1'>1</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 52' id='C1'>
              Jump 52
            </span>
          </td>
        </tr>
        <tr id='P2'>
          <td align='right'>
            <a name='P2'>2</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method subseq' id='C2'>
              Frame subseq(s, b, e)
            </span>
          </td>
        </tr>
        <tr id='P3'>
          <td align='right'>
            <a name='P3'>3</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C3'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P4'>
          <td align='right'>
            <a name='P4'>4</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C4'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P5'>
          <td align='right'>
            <a name='P5'>5</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu3' id='C5'>
              StoreVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P6'>
          <td align='right'>
            <a name='P6'>6</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of b' id='C6'>
              LoadVar b
            </span>
          </td>
        </tr>
        <tr id='P7'>
          <td align='right'>
            <a name='P7'>7</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable b' id='C7'>
              DelVar b
            </span>
          </td>
        </tr>
        <tr id='P8'>
          <td align='right'>
            <a name='P8'>8</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C8'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P9'>
          <td align='right'>
            <a name='P9'>9</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C9'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P10'>
          <td align='right'>
            <a name='P10'>10</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C10'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P11'>
          <td align='right'>
            <a name='P11'>11</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C11'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P12'>
          <td align='right'>
            <a name='P12'>12</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ..' id='C12'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P13'>
          <td align='right'>
            <a name='P13'>13</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C13'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P14'>
          <td align='right'>
            <a name='P14'>14</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to x; push False or True depending on success' id='C14'>
              Cut(x)
            </span>
          </td>
        </tr>
        <tr id='P15'>
          <td align='right'>
            <a name='P15'>15</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 25 if the value is False' id='C15'>
              JumpCond False 25
            </span>
          </td>
        </tr>
        <tr id='P16'>
          <td align='right'>
            <a name='P16'>16</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu3' id='C16'>
              LoadVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P17'>
          <td align='right'>
            <a name='P17'>17</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu3' id='C17'>
              DelVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P18'>
          <td align='right'>
            <a name='P18'>18</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C18'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P19'>
          <td align='right'>
            <a name='P19'>19</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of x' id='C19'>
              LoadVar x
            </span>
          </td>
        </tr>
        <tr id='P20'>
          <td align='right'>
            <a name='P20'>20</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C20'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P21'>
          <td align='right'>
            <a name='P21'>21</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C21'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P22'>
          <td align='right'>
            <a name='P22'>22</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C22'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P23'>
          <td align='right'>
            <a name='P23'>23</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu3' id='C23'>
              StoreVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P24'>
          <td align='right'>
            <a name='P24'>24</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 14' id='C24'>
              Jump 14
            </span>
          </td>
        </tr>
        <tr id='P25'>
          <td align='right'>
            <a name='P25'>25</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C25'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P26'>
          <td align='right'>
            <a name='P26'>26</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C26'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P27'>
          <td align='right'>
            <a name='P27'>27</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu3' id='C27'>
              LoadVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P28'>
          <td align='right'>
            <a name='P28'>28</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu3' id='C28'>
              DelVar $accu3
            </span>
          </td>
        </tr>
        <tr id='P29'>
          <td align='right'>
            <a name='P29'>29</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C29'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P30'>
          <td align='right'>
            <a name='P30'>30</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C30'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P31'>
          <td align='right'>
            <a name='P31'>31</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 52' id='C31'>
              Jump 52
            </span>
          </td>
        </tr>
        <tr id='P32'>
          <td align='right'>
            <a name='P32'>32</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method append' id='C32'>
              Frame append(s, e)
            </span>
          </td>
        </tr>
        <tr id='P33'>
          <td align='right'>
            <a name='P33'>33</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C33'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P34'>
          <td align='right'>
            <a name='P34'>34</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C34'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P35'>
          <td align='right'>
            <a name='P35'>35</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C35'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P36'>
          <td align='right'>
            <a name='P36'>36</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C36'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P37'>
          <td align='right'>
            <a name='P37'>37</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C37'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P38'>
          <td align='right'>
            <a name='P38'>38</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C38'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P39'>
          <td align='right'>
            <a name='P39'>39</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C39'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P40'>
          <td align='right'>
            <a name='P40'>40</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C40'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P41'>
          <td align='right'>
            <a name='P41'>41</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C41'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P42'>
          <td align='right'>
            <a name='P42'>42</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C42'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P43'>
          <td align='right'>
            <a name='P43'>43</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 52' id='C43'>
              Jump 52
            </span>
          </td>
        </tr>
        <tr id='P44'>
          <td align='right'>
            <a name='P44'>44</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method head' id='C44'>
              Frame head(s)
            </span>
          </td>
        </tr>
        <tr id='P45'>
          <td align='right'>
            <a name='P45'>45</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C45'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P46'>
          <td align='right'>
            <a name='P46'>46</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C46'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P47'>
          <td align='right'>
            <a name='P47'>47</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C47'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P48'>
          <td align='right'>
            <a name='P48'>48</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C48'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P49'>
          <td align='right'>
            <a name='P49'>49</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C49'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P50'>
          <td align='right'>
            <a name='P50'>50</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C50'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P51'>
          <td align='right'>
            <a name='P51'>51</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C51'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P52'>
          <td align='right'>
            <a name='P52'>52</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(55)' id='C52'>
              Push PC(55)
            </span>
          </td>
        </tr>
        <tr id='P53'>
          <td align='right'>
            <a name='P53'>53</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called list$tail' id='C53'>
              Builtin(list$tail)
            </span>
          </td>
        </tr>
        <tr id='P54'>
          <td align='right'>
            <a name='P54'>54</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 371' id='C54'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P55'>
          <td align='right'>
            <a name='P55'>55</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method tail' id='C55'>
              Frame tail(s)
            </span>
          </td>
        </tr>
        <tr id='P56'>
          <td align='right'>
            <a name='P56'>56</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C56'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P57'>
          <td align='right'>
            <a name='P57'>57</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(2)' id='C57'>
              Push PC(2)
            </span>
          </td>
        </tr>
        <tr id='P58'>
          <td align='right'>
            <a name='P58'>58</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C58'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P59'>
          <td align='right'>
            <a name='P59'>59</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C59'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P60'>
          <td align='right'>
            <a name='P60'>60</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C60'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P61'>
          <td align='right'>
            <a name='P61'>61</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C61'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P62'>
          <td align='right'>
            <a name='P62'>62</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C62'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P63'>
          <td align='right'>
            <a name='P63'>63</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of s' id='C63'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P64'>
          <td align='right'>
            <a name='P64'>64</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable s' id='C64'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P65'>
          <td align='right'>
            <a name='P65'>65</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C65'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P66'>
          <td align='right'>
            <a name='P66'>66</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C66'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P67'>
          <td align='right'>
            <a name='P67'>67</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C67'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P68'>
          <td align='right'>
            <a name='P68'>68</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C68'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P69'>
          <td align='right'>
            <a name='P69'>69</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C69'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P70'>
          <td align='right'>
            <a name='P70'>70</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 371' id='C70'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P71'>
          <td align='right'>
            <a name='P71'>71</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method sum' id='C71'>
              Frame sum(a)
            </span>
          </td>
        </tr>
        <tr id='P72'>
          <td align='right'>
            <a name='P72'>72</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C72'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P73'>
          <td align='right'>
            <a name='P73'>73</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C73'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P74'>
          <td align='right'>
            <a name='P74'>74</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C74'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P75'>
          <td align='right'>
            <a name='P75'>75</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C75'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P76'>
          <td align='right'>
            <a name='P76'>76</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C76'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P77'>
          <td align='right'>
            <a name='P77'>77</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C77'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P78'>
          <td align='right'>
            <a name='P78'>78</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C78'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P79'>
          <td align='right'>
            <a name='P79'>79</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 87 if the value is False' id='C79'>
              JumpCond False 87
            </span>
          </td>
        </tr>
        <tr id='P80'>
          <td align='right'>
            <a name='P80'>80</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C80'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P81'>
          <td align='right'>
            <a name='P81'>81</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C81'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P82'>
          <td align='right'>
            <a name='P82'>82</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C82'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P83'>
          <td align='right'>
            <a name='P83'>83</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C83'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P84'>
          <td align='right'>
            <a name='P84'>84</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C84'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P85'>
          <td align='right'>
            <a name='P85'>85</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C85'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P86'>
          <td align='right'>
            <a name='P86'>86</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 78' id='C86'>
              Jump 78
            </span>
          </td>
        </tr>
        <tr id='P87'>
          <td align='right'>
            <a name='P87'>87</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C87'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P88'>
          <td align='right'>
            <a name='P88'>88</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C88'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P89'>
          <td align='right'>
            <a name='P89'>89</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 371' id='C89'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P90'>
          <td align='right'>
            <a name='P90'>90</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method set' id='C90'>
              Frame set(a)
            </span>
          </td>
        </tr>
        <tr id='P91'>
          <td align='right'>
            <a name='P91'>91</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C91'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P92'>
          <td align='right'>
            <a name='P92'>92</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for set comprehension: push constant {}' id='C92'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P93'>
          <td align='right'>
            <a name='P93'>93</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for set comprehension: pop a value and store in $accu71' id='C93'>
              StoreVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P94'>
          <td align='right'>
            <a name='P94'>94</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of a' id='C94'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P95'>
          <td align='right'>
            <a name='P95'>95</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable a' id='C95'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P96'>
          <td align='right'>
            <a name='P96'>96</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C96'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P97'>
          <td align='right'>
            <a name='P97'>97</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C97'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P98'>
          <td align='right'>
            <a name='P98'>98</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 106 if the value is False' id='C98'>
              JumpCond False 106
            </span>
          </td>
        </tr>
        <tr id='P99'>
          <td align='right'>
            <a name='P99'>99</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu71' id='C99'>
              LoadVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P100'>
          <td align='right'>
            <a name='P100'>100</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu71' id='C100'>
              DelVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P101'>
          <td align='right'>
            <a name='P101'>101</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C101'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P102'>
          <td align='right'>
            <a name='P102'>102</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C102'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P103'>
          <td align='right'>
            <a name='P103'>103</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C103'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P104'>
          <td align='right'>
            <a name='P104'>104</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu71' id='C104'>
              StoreVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P105'>
          <td align='right'>
            <a name='P105'>105</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 97' id='C105'>
              Jump 97
            </span>
          </td>
        </tr>
        <tr id='P106'>
          <td align='right'>
            <a name='P106'>106</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C106'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P107'>
          <td align='right'>
            <a name='P107'>107</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu71' id='C107'>
              LoadVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P108'>
          <td align='right'>
            <a name='P108'>108</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu71' id='C108'>
              DelVar $accu71
            </span>
          </td>
        </tr>
        <tr id='P109'>
          <td align='right'>
            <a name='P109'>109</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C109'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P110'>
          <td align='right'>
            <a name='P110'>110</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C110'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P111'>
          <td align='right'>
            <a name='P111'>111</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 371' id='C111'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P112'>
          <td align='right'>
            <a name='P112'>112</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method list' id='C112'>
              Frame list(a)
            </span>
          </td>
        </tr>
        <tr id='P113'>
          <td align='right'>
            <a name='P113'>113</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C113'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P114'>
          <td align='right'>
            <a name='P114'>114</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C114'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P115'>
          <td align='right'>
            <a name='P115'>115</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu87' id='C115'>
              StoreVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P116'>
          <td align='right'>
            <a name='P116'>116</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of a' id='C116'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P117'>
          <td align='right'>
            <a name='P117'>117</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable a' id='C117'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P118'>
          <td align='right'>
            <a name='P118'>118</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C118'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P119'>
          <td align='right'>
            <a name='P119'>119</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C119'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P120'>
          <td align='right'>
            <a name='P120'>120</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 128 if the value is False' id='C120'>
              JumpCond False 128
            </span>
          </td>
        </tr>
        <tr id='P121'>
          <td align='right'>
            <a name='P121'>121</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu87' id='C121'>
              LoadVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P122'>
          <td align='right'>
            <a name='P122'>122</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu87' id='C122'>
              DelVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P123'>
          <td align='right'>
            <a name='P123'>123</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C123'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P124'>
          <td align='right'>
            <a name='P124'>124</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C124'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P125'>
          <td align='right'>
            <a name='P125'>125</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C125'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P126'>
          <td align='right'>
            <a name='P126'>126</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu87' id='C126'>
              StoreVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P127'>
          <td align='right'>
            <a name='P127'>127</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 119' id='C127'>
              Jump 119
            </span>
          </td>
        </tr>
        <tr id='P128'>
          <td align='right'>
            <a name='P128'>128</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C128'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P129'>
          <td align='right'>
            <a name='P129'>129</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu87' id='C129'>
              LoadVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P130'>
          <td align='right'>
            <a name='P130'>130</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu87' id='C130'>
              DelVar $accu87
            </span>
          </td>
        </tr>
        <tr id='P131'>
          <td align='right'>
            <a name='P131'>131</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C131'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P132'>
          <td align='right'>
            <a name='P132'>132</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C132'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P133'>
          <td align='right'>
            <a name='P133'>133</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 371' id='C133'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P134'>
          <td align='right'>
            <a name='P134'>134</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method values' id='C134'>
              Frame values(d)
            </span>
          </td>
        </tr>
        <tr id='P135'>
          <td align='right'>
            <a name='P135'>135</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C135'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P136'>
          <td align='right'>
            <a name='P136'>136</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C136'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P137'>
          <td align='right'>
            <a name='P137'>137</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu103' id='C137'>
              StoreVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P138'>
          <td align='right'>
            <a name='P138'>138</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C138'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P139'>
          <td align='right'>
            <a name='P139'>139</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable d' id='C139'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P140'>
          <td align='right'>
            <a name='P140'>140</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C140'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P141'>
          <td align='right'>
            <a name='P141'>141</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to _:v; push False or True depending on success' id='C141'>
              Cut(_, v)
            </span>
          </td>
        </tr>
        <tr id='P142'>
          <td align='right'>
            <a name='P142'>142</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable _' id='C142'>
              DelVar _
            </span>
          </td>
        </tr>
        <tr id='P143'>
          <td align='right'>
            <a name='P143'>143</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 151 if the value is False' id='C143'>
              JumpCond False 151
            </span>
          </td>
        </tr>
        <tr id='P144'>
          <td align='right'>
            <a name='P144'>144</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu103' id='C144'>
              LoadVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P145'>
          <td align='right'>
            <a name='P145'>145</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu103' id='C145'>
              DelVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P146'>
          <td align='right'>
            <a name='P146'>146</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C146'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P147'>
          <td align='right'>
            <a name='P147'>147</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C147'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P148'>
          <td align='right'>
            <a name='P148'>148</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C148'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P149'>
          <td align='right'>
            <a name='P149'>149</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu103' id='C149'>
              StoreVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P150'>
          <td align='right'>
            <a name='P150'>150</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 141' id='C150'>
              Jump 141
            </span>
          </td>
        </tr>
        <tr id='P151'>
          <td align='right'>
            <a name='P151'>151</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C151'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P152'>
          <td align='right'>
            <a name='P152'>152</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu103' id='C152'>
              LoadVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P153'>
          <td align='right'>
            <a name='P153'>153</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu103' id='C153'>
              DelVar $accu103
            </span>
          </td>
        </tr>
        <tr id='P154'>
          <td align='right'>
            <a name='P154'>154</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C154'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P155'>
          <td align='right'>
            <a name='P155'>155</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C155'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P156'>
          <td align='right'>
            <a name='P156'>156</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 371' id='C156'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P157'>
          <td align='right'>
            <a name='P157'>157</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method items' id='C157'>
              Frame items(d)
            </span>
          </td>
        </tr>
        <tr id='P158'>
          <td align='right'>
            <a name='P158'>158</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C158'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P159'>
          <td align='right'>
            <a name='P159'>159</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C159'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P160'>
          <td align='right'>
            <a name='P160'>160</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu119' id='C160'>
              StoreVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P161'>
          <td align='right'>
            <a name='P161'>161</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C161'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P162'>
          <td align='right'>
            <a name='P162'>162</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C162'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P163'>
          <td align='right'>
            <a name='P163'>163</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C163'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P164'>
          <td align='right'>
            <a name='P164'>164</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to k:v; push False or True depending on success' id='C164'>
              Cut(k, v)
            </span>
          </td>
        </tr>
        <tr id='P165'>
          <td align='right'>
            <a name='P165'>165</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 178 if the value is False' id='C165'>
              JumpCond False 178
            </span>
          </td>
        </tr>
        <tr id='P166'>
          <td align='right'>
            <a name='P166'>166</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu119' id='C166'>
              LoadVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P167'>
          <td align='right'>
            <a name='P167'>167</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu119' id='C167'>
              DelVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P168'>
          <td align='right'>
            <a name='P168'>168</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C168'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P169'>
          <td align='right'>
            <a name='P169'>169</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of k' id='C169'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P170'>
          <td align='right'>
            <a name='P170'>170</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C170'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P171'>
          <td align='right'>
            <a name='P171'>171</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C171'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P172'>
          <td align='right'>
            <a name='P172'>172</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C172'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P173'>
          <td align='right'>
            <a name='P173'>173</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C173'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P174'>
          <td align='right'>
            <a name='P174'>174</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C174'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P175'>
          <td align='right'>
            <a name='P175'>175</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C175'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P176'>
          <td align='right'>
            <a name='P176'>176</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu119' id='C176'>
              StoreVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P177'>
          <td align='right'>
            <a name='P177'>177</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 164' id='C177'>
              Jump 164
            </span>
          </td>
        </tr>
        <tr id='P178'>
          <td align='right'>
            <a name='P178'>178</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C178'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P179'>
          <td align='right'>
            <a name='P179'>179</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C179'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P180'>
          <td align='right'>
            <a name='P180'>180</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu119' id='C180'>
              LoadVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P181'>
          <td align='right'>
            <a name='P181'>181</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu119' id='C181'>
              DelVar $accu119
            </span>
          </td>
        </tr>
        <tr id='P182'>
          <td align='right'>
            <a name='P182'>182</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C182'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P183'>
          <td align='right'>
            <a name='P183'>183</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C183'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P184'>
          <td align='right'>
            <a name='P184'>184</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 371' id='C184'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P185'>
          <td align='right'>
            <a name='P185'>185</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method qsort' id='C185'>
              Frame qsort(a)
            </span>
          </td>
        </tr>
        <tr id='P186'>
          <td align='right'>
            <a name='P186'>186</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C186'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P187'>
          <td align='right'>
            <a name='P187'>187</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C187'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P188'>
          <td align='right'>
            <a name='P188'>188</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C188'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P189'>
          <td align='right'>
            <a name='P189'>189</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C189'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P190'>
          <td align='right'>
            <a name='P190'>190</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 195 if the value is False' id='C190'>
              JumpCond False 195
            </span>
          </td>
        </tr>
        <tr id='P191'>
          <td align='right'>
            <a name='P191'>191</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable a' id='C191'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P192'>
          <td align='right'>
            <a name='P192'>192</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C192'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P193'>
          <td align='right'>
            <a name='P193'>193</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C193'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P194'>
          <td align='right'>
            <a name='P194'>194</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 265' id='C194'>
              Jump 265
            </span>
          </td>
        </tr>
        <tr id='P195'>
          <td align='right'>
            <a name='P195'>195</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C195'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P196'>
          <td align='right'>
            <a name='P196'>196</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(44)' id='C196'>
              Push PC(44)
            </span>
          </td>
        </tr>
        <tr id='P197'>
          <td align='right'>
            <a name='P197'>197</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C197'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P198'>
          <td align='right'>
            <a name='P198'>198</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C198'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P199'>
          <td align='right'>
            <a name='P199'>199</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C199'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P200'>
          <td align='right'>
            <a name='P200'>200</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(55)' id='C200'>
              Push PC(55)
            </span>
          </td>
        </tr>
        <tr id='P201'>
          <td align='right'>
            <a name='P201'>201</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C201'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P202'>
          <td align='right'>
            <a name='P202'>202</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C202'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P203'>
          <td align='right'>
            <a name='P203'>203</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C203'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P204'>
          <td align='right'>
            <a name='P204'>204</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C204'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P205'>
          <td align='right'>
            <a name='P205'>205</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in (pivot, rest)' id='C205'>
              StoreVar (pivot, rest)
            </span>
          </td>
        </tr>
        <tr id='P206'>
          <td align='right'>
            <a name='P206'>206</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C206'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P207'>
          <td align='right'>
            <a name='P207'>207</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu156' id='C207'>
              StoreVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P208'>
          <td align='right'>
            <a name='P208'>208</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of rest' id='C208'>
              LoadVar rest
            </span>
          </td>
        </tr>
        <tr id='P209'>
          <td align='right'>
            <a name='P209'>209</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C209'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P210'>
          <td align='right'>
            <a name='P210'>210</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C210'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P211'>
          <td align='right'>
            <a name='P211'>211</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C211'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P212'>
          <td align='right'>
            <a name='P212'>212</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 224 if the value is False' id='C212'>
              JumpCond False 224
            </span>
          </td>
        </tr>
        <tr id='P213'>
          <td align='right'>
            <a name='P213'>213</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C213'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P214'>
          <td align='right'>
            <a name='P214'>214</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of pivot' id='C214'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P215'>
          <td align='right'>
            <a name='P215'>215</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying <' id='C215'>
              2-ary <
            </span>
          </td>
        </tr>
        <tr id='P216'>
          <td align='right'>
            <a name='P216'>216</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 210 if the value is False' id='C216'>
              JumpCond False 210
            </span>
          </td>
        </tr>
        <tr id='P217'>
          <td align='right'>
            <a name='P217'>217</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu156' id='C217'>
              LoadVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P218'>
          <td align='right'>
            <a name='P218'>218</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu156' id='C218'>
              DelVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P219'>
          <td align='right'>
            <a name='P219'>219</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C219'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P220'>
          <td align='right'>
            <a name='P220'>220</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C220'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P221'>
          <td align='right'>
            <a name='P221'>221</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C221'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P222'>
          <td align='right'>
            <a name='P222'>222</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu156' id='C222'>
              StoreVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P223'>
          <td align='right'>
            <a name='P223'>223</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 210' id='C223'>
              Jump 210
            </span>
          </td>
        </tr>
        <tr id='P224'>
          <td align='right'>
            <a name='P224'>224</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C224'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P225'>
          <td align='right'>
            <a name='P225'>225</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu156' id='C225'>
              LoadVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P226'>
          <td align='right'>
            <a name='P226'>226</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu156' id='C226'>
              DelVar $accu156
            </span>
          </td>
        </tr>
        <tr id='P227'>
          <td align='right'>
            <a name='P227'>227</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in lower' id='C227'>
              StoreVar lower
            </span>
          </td>
        </tr>
        <tr id='P228'>
          <td align='right'>
            <a name='P228'>228</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C228'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P229'>
          <td align='right'>
            <a name='P229'>229</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu173' id='C229'>
              StoreVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P230'>
          <td align='right'>
            <a name='P230'>230</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of rest' id='C230'>
              LoadVar rest
            </span>
          </td>
        </tr>
        <tr id='P231'>
          <td align='right'>
            <a name='P231'>231</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable rest' id='C231'>
              DelVar rest
            </span>
          </td>
        </tr>
        <tr id='P232'>
          <td align='right'>
            <a name='P232'>232</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C232'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P233'>
          <td align='right'>
            <a name='P233'>233</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C233'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P234'>
          <td align='right'>
            <a name='P234'>234</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C234'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P235'>
          <td align='right'>
            <a name='P235'>235</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 247 if the value is False' id='C235'>
              JumpCond False 247
            </span>
          </td>
        </tr>
        <tr id='P236'>
          <td align='right'>
            <a name='P236'>236</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C236'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P237'>
          <td align='right'>
            <a name='P237'>237</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of pivot' id='C237'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P238'>
          <td align='right'>
            <a name='P238'>238</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying >=' id='C238'>
              2-ary >=
            </span>
          </td>
        </tr>
        <tr id='P239'>
          <td align='right'>
            <a name='P239'>239</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 233 if the value is False' id='C239'>
              JumpCond False 233
            </span>
          </td>
        </tr>
        <tr id='P240'>
          <td align='right'>
            <a name='P240'>240</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu173' id='C240'>
              LoadVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P241'>
          <td align='right'>
            <a name='P241'>241</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu173' id='C241'>
              DelVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P242'>
          <td align='right'>
            <a name='P242'>242</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C242'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P243'>
          <td align='right'>
            <a name='P243'>243</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C243'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P244'>
          <td align='right'>
            <a name='P244'>244</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C244'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P245'>
          <td align='right'>
            <a name='P245'>245</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu173' id='C245'>
              StoreVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P246'>
          <td align='right'>
            <a name='P246'>246</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 233' id='C246'>
              Jump 233
            </span>
          </td>
        </tr>
        <tr id='P247'>
          <td align='right'>
            <a name='P247'>247</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C247'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P248'>
          <td align='right'>
            <a name='P248'>248</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu173' id='C248'>
              LoadVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P249'>
          <td align='right'>
            <a name='P249'>249</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu173' id='C249'>
              DelVar $accu173
            </span>
          </td>
        </tr>
        <tr id='P250'>
          <td align='right'>
            <a name='P250'>250</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in higher' id='C250'>
              StoreVar higher
            </span>
          </td>
        </tr>
        <tr id='P251'>
          <td align='right'>
            <a name='P251'>251</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(185)' id='C251'>
              Push PC(185)
            </span>
          </td>
        </tr>
        <tr id='P252'>
          <td align='right'>
            <a name='P252'>252</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lower' id='C252'>
              LoadVar lower
            </span>
          </td>
        </tr>
        <tr id='P253'>
          <td align='right'>
            <a name='P253'>253</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable lower' id='C253'>
              DelVar lower
            </span>
          </td>
        </tr>
        <tr id='P254'>
          <td align='right'>
            <a name='P254'>254</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C254'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P255'>
          <td align='right'>
            <a name='P255'>255</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C255'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P256'>
          <td align='right'>
            <a name='P256'>256</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of pivot' id='C256'>
              LoadVar pivot
            </span>
          </td>
        </tr>
        <tr id='P257'>
          <td align='right'>
            <a name='P257'>257</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable pivot' id='C257'>
              DelVar pivot
            </span>
          </td>
        </tr>
        <tr id='P258'>
          <td align='right'>
            <a name='P258'>258</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C258'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P259'>
          <td align='right'>
            <a name='P259'>259</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(185)' id='C259'>
              Push PC(185)
            </span>
          </td>
        </tr>
        <tr id='P260'>
          <td align='right'>
            <a name='P260'>260</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of higher' id='C260'>
              LoadVar higher
            </span>
          </td>
        </tr>
        <tr id='P261'>
          <td align='right'>
            <a name='P261'>261</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable higher' id='C261'>
              DelVar higher
            </span>
          </td>
        </tr>
        <tr id='P262'>
          <td align='right'>
            <a name='P262'>262</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C262'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P263'>
          <td align='right'>
            <a name='P263'>263</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying +' id='C263'>
              3-ary +
            </span>
          </td>
        </tr>
        <tr id='P264'>
          <td align='right'>
            <a name='P264'>264</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C264'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P265'>
          <td align='right'>
            <a name='P265'>265</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C265'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P266'>
          <td align='right'>
            <a name='P266'>266</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 371' id='C266'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P267'>
          <td align='right'>
            <a name='P267'>267</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method sorted' id='C267'>
              Frame sorted(d)
            </span>
          </td>
        </tr>
        <tr id='P268'>
          <td align='right'>
            <a name='P268'>268</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C268'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P269'>
          <td align='right'>
            <a name='P269'>269</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(185)' id='C269'>
              Push PC(185)
            </span>
          </td>
        </tr>
        <tr id='P270'>
          <td align='right'>
            <a name='P270'>270</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(112)' id='C270'>
              Push PC(112)
            </span>
          </td>
        </tr>
        <tr id='P271'>
          <td align='right'>
            <a name='P271'>271</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C271'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P272'>
          <td align='right'>
            <a name='P272'>272</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C272'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P273'>
          <td align='right'>
            <a name='P273'>273</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C273'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P274'>
          <td align='right'>
            <a name='P274'>274</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C274'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P275'>
          <td align='right'>
            <a name='P275'>275</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C275'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P276'>
          <td align='right'>
            <a name='P276'>276</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C276'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P277'>
          <td align='right'>
            <a name='P277'>277</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 371' id='C277'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P278'>
          <td align='right'>
            <a name='P278'>278</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method reversed' id='C278'>
              Frame reversed(d)
            </span>
          </td>
        </tr>
        <tr id='P279'>
          <td align='right'>
            <a name='P279'>279</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C279'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P280'>
          <td align='right'>
            <a name='P280'>280</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of d' id='C280'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P281'>
          <td align='right'>
            <a name='P281'>281</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying len' id='C281'>
              1-ary len
            </span>
          </td>
        </tr>
        <tr id='P282'>
          <td align='right'>
            <a name='P282'>282</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in n' id='C282'>
              StoreVar n
            </span>
          </td>
        </tr>
        <tr id='P283'>
          <td align='right'>
            <a name='P283'>283</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for list comprehension: push constant ()' id='C283'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P284'>
          <td align='right'>
            <a name='P284'>284</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for list comprehension: pop a value and store in $accu216' id='C284'>
              StoreVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P285'>
          <td align='right'>
            <a name='P285'>285</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C285'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P286'>
          <td align='right'>
            <a name='P286'>286</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C286'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P287'>
          <td align='right'>
            <a name='P287'>287</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ..' id='C287'>
              2-ary ..
            </span>
          </td>
        </tr>
        <tr id='P288'>
          <td align='right'>
            <a name='P288'>288</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C288'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P289'>
          <td align='right'>
            <a name='P289'>289</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C289'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P290'>
          <td align='right'>
            <a name='P290'>290</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 302 if the value is False' id='C290'>
              JumpCond False 302
            </span>
          </td>
        </tr>
        <tr id='P291'>
          <td align='right'>
            <a name='P291'>291</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu216' id='C291'>
              LoadVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P292'>
          <td align='right'>
            <a name='P292'>292</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu216' id='C292'>
              DelVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P293'>
          <td align='right'>
            <a name='P293'>293</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of d' id='C293'>
              LoadVar d
            </span>
          </td>
        </tr>
        <tr id='P294'>
          <td align='right'>
            <a name='P294'>294</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C294'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P295'>
          <td align='right'>
            <a name='P295'>295</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C295'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P296'>
          <td align='right'>
            <a name='P296'>296</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C296'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P297'>
          <td align='right'>
            <a name='P297'>297</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C297'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P298'>
          <td align='right'>
            <a name='P298'>298</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C298'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P299'>
          <td align='right'>
            <a name='P299'>299</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C299'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P300'>
          <td align='right'>
            <a name='P300'>300</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='update accumulator: pop a value and store in $accu216' id='C300'>
              StoreVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P301'>
          <td align='right'>
            <a name='P301'>301</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 289' id='C301'>
              Jump 289
            </span>
          </td>
        </tr>
        <tr id='P302'>
          <td align='right'>
            <a name='P302'>302</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable d' id='C302'>
              DelVar d
            </span>
          </td>
        </tr>
        <tr id='P303'>
          <td align='right'>
            <a name='P303'>303</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C303'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P304'>
          <td align='right'>
            <a name='P304'>304</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable n' id='C304'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P305'>
          <td align='right'>
            <a name='P305'>305</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu216' id='C305'>
              LoadVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P306'>
          <td align='right'>
            <a name='P306'>306</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu216' id='C306'>
              DelVar $accu216
            </span>
          </td>
        </tr>
        <tr id='P307'>
          <td align='right'>
            <a name='P307'>307</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C307'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P308'>
          <td align='right'>
            <a name='P308'>308</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C308'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P309'>
          <td align='right'>
            <a name='P309'>309</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 371' id='C309'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P310'>
          <td align='right'>
            <a name='P310'>310</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method empty' id='C310'>
              Frame empty()
            </span>
          </td>
        </tr>
        <tr id='P311'>
          <td align='right'>
            <a name='P311'>311</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C311'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P312'>
          <td align='right'>
            <a name='P312'>312</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C312'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P313'>
          <td align='right'>
            <a name='P313'>313</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C313'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P314'>
          <td align='right'>
            <a name='P314'>314</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C314'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P315'>
          <td align='right'>
            <a name='P315'>315</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 371' id='C315'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P316'>
          <td align='right'>
            <a name='P316'>316</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method fromSet' id='C316'>
              Frame fromSet(s)
            </span>
          </td>
        </tr>
        <tr id='P317'>
          <td align='right'>
            <a name='P317'>317</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C317'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P318'>
          <td align='right'>
            <a name='P318'>318</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for dict comprehension: push constant {:}' id='C318'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P319'>
          <td align='right'>
            <a name='P319'>319</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for dict comprehension: pop a value and store in $accu243' id='C319'>
              StoreVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P320'>
          <td align='right'>
            <a name='P320'>320</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of s' id='C320'>
              LoadVar s
            </span>
          </td>
        </tr>
        <tr id='P321'>
          <td align='right'>
            <a name='P321'>321</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable s' id='C321'>
              DelVar s
            </span>
          </td>
        </tr>
        <tr id='P322'>
          <td align='right'>
            <a name='P322'>322</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C322'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P323'>
          <td align='right'>
            <a name='P323'>323</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to elt; push False or True depending on success' id='C323'>
              Cut(elt)
            </span>
          </td>
        </tr>
        <tr id='P324'>
          <td align='right'>
            <a name='P324'>324</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 333 if the value is False' id='C324'>
              JumpCond False 333
            </span>
          </td>
        </tr>
        <tr id='P325'>
          <td align='right'>
            <a name='P325'>325</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load accumulator: push the value of $accu243' id='C325'>
              LoadVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P326'>
          <td align='right'>
            <a name='P326'>326</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu243' id='C326'>
              DelVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P327'>
          <td align='right'>
            <a name='P327'>327</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C327'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P328'>
          <td align='right'>
            <a name='P328'>328</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C328'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P329'>
          <td align='right'>
            <a name='P329'>329</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C329'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P330'>
          <td align='right'>
            <a name='P330'>330</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C330'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P331'>
          <td align='right'>
            <a name='P331'>331</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu243' id='C331'>
              StoreVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P332'>
          <td align='right'>
            <a name='P332'>332</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 323' id='C332'>
              Jump 323
            </span>
          </td>
        </tr>
        <tr id='P333'>
          <td align='right'>
            <a name='P333'>333</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C333'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P334'>
          <td align='right'>
            <a name='P334'>334</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load final accumulator result: push the value of $accu243' id='C334'>
              LoadVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P335'>
          <td align='right'>
            <a name='P335'>335</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu243' id='C335'>
              DelVar $accu243
            </span>
          </td>
        </tr>
        <tr id='P336'>
          <td align='right'>
            <a name='P336'>336</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C336'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P337'>
          <td align='right'>
            <a name='P337'>337</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C337'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P338'>
          <td align='right'>
            <a name='P338'>338</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 371' id='C338'>
              Jump 371
            </span>
          </td>
        </tr>
        <tr id='P339'>
          <td align='right'>
            <a name='P339'>339</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method fromList' id='C339'>
              Frame fromList(a)
            </span>
          </td>
        </tr>
        <tr id='P340'>
          <td align='right'>
            <a name='P340'>340</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C340'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P341'>
          <td align='right'>
            <a name='P341'>341</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C341'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P342'>
          <td align='right'>
            <a name='P342'>342</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C342'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P343'>
          <td align='right'>
            <a name='P343'>343</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of a' id='C343'>
              LoadVar a
            </span>
          </td>
        </tr>
        <tr id='P344'>
          <td align='right'>
            <a name='P344'>344</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable a' id='C344'>
              DelVar a
            </span>
          </td>
        </tr>
        <tr id='P345'>
          <td align='right'>
            <a name='P345'>345</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C345'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P346'>
          <td align='right'>
            <a name='P346'>346</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to v; push False or True depending on success' id='C346'>
              Cut(v)
            </span>
          </td>
        </tr>
        <tr id='P347'>
          <td align='right'>
            <a name='P347'>347</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 369 if the value is False' id='C347'>
              JumpCond False 369
            </span>
          </td>
        </tr>
        <tr id='P348'>
          <td align='right'>
            <a name='P348'>348</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C348'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P349'>
          <td align='right'>
            <a name='P349'>349</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C349'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P350'>
          <td align='right'>
            <a name='P350'>350</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C350'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P351'>
          <td align='right'>
            <a name='P351'>351</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 362 if the value is False' id='C351'>
              JumpCond False 362
            </span>
          </td>
        </tr>
        <tr id='P352'>
          <td align='right'>
            <a name='P352'>352</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C352'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P353'>
          <td align='right'>
            <a name='P353'>353</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C353'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P354'>
          <td align='right'>
            <a name='P354'>354</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C354'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P355'>
          <td align='right'>
            <a name='P355'>355</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C355'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P356'>
          <td align='right'>
            <a name='P356'>356</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C356'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P357'>
          <td align='right'>
            <a name='P357'>357</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop the address of a method variable and push the value of that variable' id='C357'>
              LoadVar [result]
            </span>
          </td>
        </tr>
        <tr id='P358'>
          <td align='right'>
            <a name='P358'>358</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C358'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P359'>
          <td align='right'>
            <a name='P359'>359</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C359'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P360'>
          <td align='right'>
            <a name='P360'>360</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C360'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P361'>
          <td align='right'>
            <a name='P361'>361</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 346' id='C361'>
              Jump 346
            </span>
          </td>
        </tr>
        <tr id='P362'>
          <td align='right'>
            <a name='P362'>362</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C362'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P363'>
          <td align='right'>
            <a name='P363'>363</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of v' id='C363'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P364'>
          <td align='right'>
            <a name='P364'>364</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable v' id='C364'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P365'>
          <td align='right'>
            <a name='P365'>365</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C365'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P366'>
          <td align='right'>
            <a name='P366'>366</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C366'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P367'>
          <td align='right'>
            <a name='P367'>367</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C367'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P368'>
          <td align='right'>
            <a name='P368'>368</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 346' id='C368'>
              Jump 346
            </span>
          </td>
        </tr>
        <tr id='P369'>
          <td align='right'>
            <a name='P369'>369</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C369'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P370'>
          <td align='right'>
            <a name='P370'>370</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C370'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P371'>
          <td align='right'>
            <a name='P371'>371</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(374)' id='C371'>
              Push PC(374)
            </span>
          </td>
        </tr>
        <tr id='P372'>
          <td align='right'>
            <a name='P372'>372</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='top of stack is a built-in operation called bag$multiplicity' id='C372'>
              Builtin(bag$multiplicity)
            </span>
          </td>
        </tr>
        <tr id='P373'>
          <td align='right'>
            <a name='P373'>373</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 392' id='C373'>
              Jump 392
            </span>
          </td>
        </tr>
        <tr id='P374'>
          <td align='right'>
            <a name='P374'>374</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method multiplicity' id='C374'>
              Frame multiplicity(bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P375'>
          <td align='right'>
            <a name='P375'>375</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C375'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P376'>
          <td align='right'>
            <a name='P376'>376</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C376'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P377'>
          <td align='right'>
            <a name='P377'>377</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C377'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P378'>
          <td align='right'>
            <a name='P378'>378</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C378'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P379'>
          <td align='right'>
            <a name='P379'>379</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 387 if the value is False' id='C379'>
              JumpCond False 387
            </span>
          </td>
        </tr>
        <tr id='P380'>
          <td align='right'>
            <a name='P380'>380</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C380'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P381'>
          <td align='right'>
            <a name='P381'>381</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C381'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P382'>
          <td align='right'>
            <a name='P382'>382</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C382'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P383'>
          <td align='right'>
            <a name='P383'>383</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C383'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P384'>
          <td align='right'>
            <a name='P384'>384</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C384'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P385'>
          <td align='right'>
            <a name='P385'>385</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C385'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P386'>
          <td align='right'>
            <a name='P386'>386</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 391' id='C386'>
              Jump 391
            </span>
          </td>
        </tr>
        <tr id='P387'>
          <td align='right'>
            <a name='P387'>387</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C387'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P388'>
          <td align='right'>
            <a name='P388'>388</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C388'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P389'>
          <td align='right'>
            <a name='P389'>389</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C389'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P390'>
          <td align='right'>
            <a name='P390'>390</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C390'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P391'>
          <td align='right'>
            <a name='P391'>391</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C391'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P392'>
          <td align='right'>
            <a name='P392'>392</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(395)' id='C392'>
              Push PC(395)
            </span>
          </td>
        </tr>
        <tr id='P393'>
          <td align='right'>
            <a name='P393'>393</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$size' id='C393'>
              Builtin(bag$size)
            </span>
          </td>
        </tr>
        <tr id='P394'>
          <td align='right'>
            <a name='P394'>394</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 414' id='C394'>
              Jump 414
            </span>
          </td>
        </tr>
        <tr id='P395'>
          <td align='right'>
            <a name='P395'>395</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method size' id='C395'>
              Frame size(bg)
            </span>
          </td>
        </tr>
        <tr id='P396'>
          <td align='right'>
            <a name='P396'>396</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C396'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P397'>
          <td align='right'>
            <a name='P397'>397</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C397'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P398'>
          <td align='right'>
            <a name='P398'>398</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C398'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P399'>
          <td align='right'>
            <a name='P399'>399</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C399'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P400'>
          <td align='right'>
            <a name='P400'>400</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C400'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P401'>
          <td align='right'>
            <a name='P401'>401</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C401'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P402'>
          <td align='right'>
            <a name='P402'>402</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to _:c; push False or True depending on success' id='C402'>
              Cut(_, c)
            </span>
          </td>
        </tr>
        <tr id='P403'>
          <td align='right'>
            <a name='P403'>403</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable _' id='C403'>
              DelVar _
            </span>
          </td>
        </tr>
        <tr id='P404'>
          <td align='right'>
            <a name='P404'>404</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 412 if the value is False' id='C404'>
              JumpCond False 412
            </span>
          </td>
        </tr>
        <tr id='P405'>
          <td align='right'>
            <a name='P405'>405</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C405'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P406'>
          <td align='right'>
            <a name='P406'>406</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C406'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P407'>
          <td align='right'>
            <a name='P407'>407</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C407'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P408'>
          <td align='right'>
            <a name='P408'>408</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C408'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P409'>
          <td align='right'>
            <a name='P409'>409</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C409'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P410'>
          <td align='right'>
            <a name='P410'>410</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C410'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P411'>
          <td align='right'>
            <a name='P411'>411</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 402' id='C411'>
              Jump 402
            </span>
          </td>
        </tr>
        <tr id='P412'>
          <td align='right'>
            <a name='P412'>412</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C412'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P413'>
          <td align='right'>
            <a name='P413'>413</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C413'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P414'>
          <td align='right'>
            <a name='P414'>414</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(417)' id='C414'>
              Push PC(417)
            </span>
          </td>
        </tr>
        <tr id='P415'>
          <td align='right'>
            <a name='P415'>415</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$bmin' id='C415'>
              Builtin(bag$bmin)
            </span>
          </td>
        </tr>
        <tr id='P416'>
          <td align='right'>
            <a name='P416'>416</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 433' id='C416'>
              Jump 433
            </span>
          </td>
        </tr>
        <tr id='P417'>
          <td align='right'>
            <a name='P417'>417</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method bmin' id='C417'>
              Frame bmin(bg)
            </span>
          </td>
        </tr>
        <tr id='P418'>
          <td align='right'>
            <a name='P418'>418</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C418'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P419'>
          <td align='right'>
            <a name='P419'>419</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C419'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P420'>
          <td align='right'>
            <a name='P420'>420</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C420'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P421'>
          <td align='right'>
            <a name='P421'>421</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C421'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P422'>
          <td align='right'>
            <a name='P422'>422</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C422'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P423'>
          <td align='right'>
            <a name='P423'>423</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C423'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P424'>
          <td align='right'>
            <a name='P424'>424</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C424'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P425'>
          <td align='right'>
            <a name='P425'>425</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C425'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P426'>
          <td align='right'>
            <a name='P426'>426</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C426'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P427'>
          <td align='right'>
            <a name='P427'>427</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C427'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P428'>
          <td align='right'>
            <a name='P428'>428</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C428'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P429'>
          <td align='right'>
            <a name='P429'>429</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying keys' id='C429'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P430'>
          <td align='right'>
            <a name='P430'>430</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying min' id='C430'>
              1-ary min
            </span>
          </td>
        </tr>
        <tr id='P431'>
          <td align='right'>
            <a name='P431'>431</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C431'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P432'>
          <td align='right'>
            <a name='P432'>432</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C432'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P433'>
          <td align='right'>
            <a name='P433'>433</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(436)' id='C433'>
              Push PC(436)
            </span>
          </td>
        </tr>
        <tr id='P434'>
          <td align='right'>
            <a name='P434'>434</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='top of stack is a built-in operation called bag$bmax' id='C434'>
              Builtin(bag$bmax)
            </span>
          </td>
        </tr>
        <tr id='P435'>
          <td align='right'>
            <a name='P435'>435</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 461' id='C435'>
              Jump 461
            </span>
          </td>
        </tr>
        <tr id='P436'>
          <td align='right'>
            <a name='P436'>436</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method bmax' id='C436'>
              Frame bmax(bg)
            </span>
          </td>
        </tr>
        <tr id='P437'>
          <td align='right'>
            <a name='P437'>437</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C437'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P438'>
          <td align='right'>
            <a name='P438'>438</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C438'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P439'>
          <td align='right'>
            <a name='P439'>439</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C439'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P440'>
          <td align='right'>
            <a name='P440'>440</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C440'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P441'>
          <td align='right'>
            <a name='P441'>441</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C441'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P442'>
          <td align='right'>
            <a name='P442'>442</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying !=' id='C442'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P443'>
          <td align='right'>
            <a name='P443'>443</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a condition and raise exception if condition is false' id='C443'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P444'>
          <td align='right'>
            <a name='P444'>444</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C444'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P445'>
          <td align='right'>
            <a name='P445'>445</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C445'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P446'>
          <td align='right'>
            <a name='P446'>446</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C446'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P447'>
          <td align='right'>
            <a name='P447'>447</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C447'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P448'>
          <td align='right'>
            <a name='P448'>448</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying keys' id='C448'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P449'>
          <td align='right'>
            <a name='P449'>449</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying max' id='C449'>
              1-ary max
            </span>
          </td>
        </tr>
        <tr id='P450'>
          <td align='right'>
            <a name='P450'>450</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C450'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P451'>
          <td align='right'>
            <a name='P451'>451</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C451'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P452'>
          <td align='right'>
            <a name='P452'>452</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 461' id='C452'>
              Jump 461
            </span>
          </td>
        </tr>
        <tr id='P453'>
          <td align='right'>
            <a name='P453'>453</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method bchoose' id='C453'>
              Frame bchoose(bg)
            </span>
          </td>
        </tr>
        <tr id='P454'>
          <td align='right'>
            <a name='P454'>454</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C454'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P455'>
          <td align='right'>
            <a name='P455'>455</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C455'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P456'>
          <td align='right'>
            <a name='P456'>456</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C456'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P457'>
          <td align='right'>
            <a name='P457'>457</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 1 value and push the result of applying keys' id='C457'>
              1-ary keys
            </span>
          </td>
        </tr>
        <tr id='P458'>
          <td align='right'>
            <a name='P458'>458</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a set value and push one of its elements' id='C458'>
              Choose
            </span>
          </td>
        </tr>
        <tr id='P459'>
          <td align='right'>
            <a name='P459'>459</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C459'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P460'>
          <td align='right'>
            <a name='P460'>460</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C460'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P461'>
          <td align='right'>
            <a name='P461'>461</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(464)' id='C461'>
              Push PC(464)
            </span>
          </td>
        </tr>
        <tr id='P462'>
          <td align='right'>
            <a name='P462'>462</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='top of stack is a built-in operation called bag$add' id='C462'>
              Builtin(bag$add)
            </span>
          </td>
        </tr>
        <tr id='P463'>
          <td align='right'>
            <a name='P463'>463</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 490' id='C463'>
              Jump 490
            </span>
          </td>
        </tr>
        <tr id='P464'>
          <td align='right'>
            <a name='P464'>464</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method add' id='C464'>
              Frame add(bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P465'>
          <td align='right'>
            <a name='P465'>465</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C465'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P466'>
          <td align='right'>
            <a name='P466'>466</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C466'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P467'>
          <td align='right'>
            <a name='P467'>467</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C467'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P468'>
          <td align='right'>
            <a name='P468'>468</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C468'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P469'>
          <td align='right'>
            <a name='P469'>469</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C469'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P470'>
          <td align='right'>
            <a name='P470'>470</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C470'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P471'>
          <td align='right'>
            <a name='P471'>471</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying in' id='C471'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P472'>
          <td align='right'>
            <a name='P472'>472</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 483 if the value is False' id='C472'>
              JumpCond False 483
            </span>
          </td>
        </tr>
        <tr id='P473'>
          <td align='right'>
            <a name='P473'>473</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?result' id='C473'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P474'>
          <td align='right'>
            <a name='P474'>474</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C474'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P475'>
          <td align='right'>
            <a name='P475'>475</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C475'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P476'>
          <td align='right'>
            <a name='P476'>476</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C476'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P477'>
          <td align='right'>
            <a name='P477'>477</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C477'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P478'>
          <td align='right'>
            <a name='P478'>478</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop the address of a method variable and push the value of that variable' id='C478'>
              LoadVar [result]
            </span>
          </td>
        </tr>
        <tr id='P479'>
          <td align='right'>
            <a name='P479'>479</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C479'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P480'>
          <td align='right'>
            <a name='P480'>480</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C480'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P481'>
          <td align='right'>
            <a name='P481'>481</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C481'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P482'>
          <td align='right'>
            <a name='P482'>482</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 489' id='C482'>
              Jump 489
            </span>
          </td>
        </tr>
        <tr id='P483'>
          <td align='right'>
            <a name='P483'>483</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?result' id='C483'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P484'>
          <td align='right'>
            <a name='P484'>484</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C484'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P485'>
          <td align='right'>
            <a name='P485'>485</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C485'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P486'>
          <td align='right'>
            <a name='P486'>486</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C486'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P487'>
          <td align='right'>
            <a name='P487'>487</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C487'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P488'>
          <td align='right'>
            <a name='P488'>488</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C488'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P489'>
          <td align='right'>
            <a name='P489'>489</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C489'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P490'>
          <td align='right'>
            <a name='P490'>490</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(493)' id='C490'>
              Push PC(493)
            </span>
          </td>
        </tr>
        <tr id='P491'>
          <td align='right'>
            <a name='P491'>491</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='top of stack is a built-in operation called bag$remove' id='C491'>
              Builtin(bag$remove)
            </span>
          </td>
        </tr>
        <tr id='P492'>
          <td align='right'>
            <a name='P492'>492</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C492'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P493'>
          <td align='right'>
            <a name='P493'>493</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method remove' id='C493'>
              Frame remove(bg, elt)
            </span>
          </td>
        </tr>
        <tr id='P494'>
          <td align='right'>
            <a name='P494'>494</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C494'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P495'>
          <td align='right'>
            <a name='P495'>495</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C495'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P496'>
          <td align='right'>
            <a name='P496'>496</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C496'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P497'>
          <td align='right'>
            <a name='P497'>497</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C497'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P498'>
          <td align='right'>
            <a name='P498'>498</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of elt' id='C498'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P499'>
          <td align='right'>
            <a name='P499'>499</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of result' id='C499'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P500'>
          <td align='right'>
            <a name='P500'>500</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying in' id='C500'>
              2-ary in
            </span>
          </td>
        </tr>
        <tr id='P501'>
          <td align='right'>
            <a name='P501'>501</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 510 if the value is False' id='C501'>
              JumpCond False 510
            </span>
          </td>
        </tr>
        <tr id='P502'>
          <td align='right'>
            <a name='P502'>502</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C502'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P503'>
          <td align='right'>
            <a name='P503'>503</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C503'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P504'>
          <td align='right'>
            <a name='P504'>504</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C504'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P505'>
          <td align='right'>
            <a name='P505'>505</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push a copy of the top value on the stack' id='C505'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P506'>
          <td align='right'>
            <a name='P506'>506</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop the address of a method variable and push the value of that variable' id='C506'>
              LoadVar [result]
            </span>
          </td>
        </tr>
        <tr id='P507'>
          <td align='right'>
            <a name='P507'>507</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C507'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P508'>
          <td align='right'>
            <a name='P508'>508</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C508'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P509'>
          <td align='right'>
            <a name='P509'>509</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and the address of a method variable and store the value at that address' id='C509'>
              StoreVar [result]
            </span>
          </td>
        </tr>
        <tr id='P510'>
          <td align='right'>
            <a name='P510'>510</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C510'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P511'>
          <td align='right'>
            <a name='P511'>511</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C511'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P512'>
          <td align='right'>
            <a name='P512'>512</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C512'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P513'>
          <td align='right'>
            <a name='P513'>513</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C513'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P514'>
          <td align='right'>
            <a name='P514'>514</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying <=' id='C514'>
              2-ary <=
            </span>
          </td>
        </tr>
        <tr id='P515'>
          <td align='right'>
            <a name='P515'>515</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 521 if the value is False' id='C515'>
              JumpCond False 521
            </span>
          </td>
        </tr>
        <tr id='P516'>
          <td align='right'>
            <a name='P516'>516</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?result' id='C516'>
              Push ?result
            </span>
          </td>
        </tr>
        <tr id='P517'>
          <td align='right'>
            <a name='P517'>517</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of elt' id='C517'>
              LoadVar elt
            </span>
          </td>
        </tr>
        <tr id='P518'>
          <td align='right'>
            <a name='P518'>518</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable elt' id='C518'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P519'>
          <td align='right'>
            <a name='P519'>519</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C519'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P520'>
          <td align='right'>
            <a name='P520'>520</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address of a method variable and delete that variable' id='C520'>
              DelVar [result]
            </span>
          </td>
        </tr>
        <tr id='P521'>
          <td align='right'>
            <a name='P521'>521</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable elt' id='C521'>
              DelVar elt
            </span>
          </td>
        </tr>
        <tr id='P522'>
          <td align='right'>
            <a name='P522'>522</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C522'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P523'>
          <td align='right'>
            <a name='P523'>523</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C523'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P524'>
          <td align='right'>
            <a name='P524'>524</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method combinations' id='C524'>
              Frame combinations(bg, k)
            </span>
          </td>
        </tr>
        <tr id='P525'>
          <td align='right'>
            <a name='P525'>525</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C525'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P526'>
          <td align='right'>
            <a name='P526'>526</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C526'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P527'>
          <td align='right'>
            <a name='P527'>527</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C527'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P528'>
          <td align='right'>
            <a name='P528'>528</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C528'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P529'>
          <td align='right'>
            <a name='P529'>529</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 535 if the value is False' id='C529'>
              JumpCond False 535
            </span>
          </td>
        </tr>
        <tr id='P530'>
          <td align='right'>
            <a name='P530'>530</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C530'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P531'>
          <td align='right'>
            <a name='P531'>531</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C531'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P532'>
          <td align='right'>
            <a name='P532'>532</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant { {:} }' id='C532'>
              Push { {:} }
            </span>
          </td>
        </tr>
        <tr id='P533'>
          <td align='right'>
            <a name='P533'>533</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C533'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P534'>
          <td align='right'>
            <a name='P534'>534</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 616' id='C534'>
              Jump 616
            </span>
          </td>
        </tr>
        <tr id='P535'>
          <td align='right'>
            <a name='P535'>535</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(395)' id='C535'>
              Push PC(395)
            </span>
          </td>
        </tr>
        <tr id='P536'>
          <td align='right'>
            <a name='P536'>536</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C536'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P537'>
          <td align='right'>
            <a name='P537'>537</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C537'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P538'>
          <td align='right'>
            <a name='P538'>538</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in n' id='C538'>
              StoreVar n
            </span>
          </td>
        </tr>
        <tr id='P539'>
          <td align='right'>
            <a name='P539'>539</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of k' id='C539'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P540'>
          <td align='right'>
            <a name='P540'>540</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C540'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P541'>
          <td align='right'>
            <a name='P541'>541</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >' id='C541'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P542'>
          <td align='right'>
            <a name='P542'>542</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 549 if the value is False' id='C542'>
              JumpCond False 549
            </span>
          </td>
        </tr>
        <tr id='P543'>
          <td align='right'>
            <a name='P543'>543</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C543'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P544'>
          <td align='right'>
            <a name='P544'>544</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C544'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P545'>
          <td align='right'>
            <a name='P545'>545</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable n' id='C545'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P546'>
          <td align='right'>
            <a name='P546'>546</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {}' id='C546'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P547'>
          <td align='right'>
            <a name='P547'>547</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C547'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P548'>
          <td align='right'>
            <a name='P548'>548</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 616' id='C548'>
              Jump 616
            </span>
          </td>
        </tr>
        <tr id='P549'>
          <td align='right'>
            <a name='P549'>549</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of k' id='C549'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P550'>
          <td align='right'>
            <a name='P550'>550</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of n' id='C550'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P551'>
          <td align='right'>
            <a name='P551'>551</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable n' id='C551'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P552'>
          <td align='right'>
            <a name='P552'>552</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C552'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P553'>
          <td align='right'>
            <a name='P553'>553</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 561 if the value is False' id='C553'>
              JumpCond False 561
            </span>
          </td>
        </tr>
        <tr id='P554'>
          <td align='right'>
            <a name='P554'>554</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable k' id='C554'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P555'>
          <td align='right'>
            <a name='P555'>555</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {}' id='C555'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P556'>
          <td align='right'>
            <a name='P556'>556</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C556'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P557'>
          <td align='right'>
            <a name='P557'>557</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable bg' id='C557'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P558'>
          <td align='right'>
            <a name='P558'>558</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C558'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P559'>
          <td align='right'>
            <a name='P559'>559</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C559'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P560'>
          <td align='right'>
            <a name='P560'>560</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 616' id='C560'>
              Jump 616
            </span>
          </td>
        </tr>
        <tr id='P561'>
          <td align='right'>
            <a name='P561'>561</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(417)' id='C561'>
              Push PC(417)
            </span>
          </td>
        </tr>
        <tr id='P562'>
          <td align='right'>
            <a name='P562'>562</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of bg' id='C562'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P563'>
          <td align='right'>
            <a name='P563'>563</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C563'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P564'>
          <td align='right'>
            <a name='P564'>564</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in hd' id='C564'>
              StoreVar hd
            </span>
          </td>
        </tr>
        <tr id='P565'>
          <td align='right'>
            <a name='P565'>565</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(493)' id='C565'>
              Push PC(493)
            </span>
          </td>
        </tr>
        <tr id='P566'>
          <td align='right'>
            <a name='P566'>566</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C566'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P567'>
          <td align='right'>
            <a name='P567'>567</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of bg' id='C567'>
              LoadVar bg
            </span>
          </td>
        </tr>
        <tr id='P568'>
          <td align='right'>
            <a name='P568'>568</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable bg' id='C568'>
              DelVar bg
            </span>
          </td>
        </tr>
        <tr id='P569'>
          <td align='right'>
            <a name='P569'>569</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C569'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P570'>
          <td align='right'>
            <a name='P570'>570</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of hd' id='C570'>
              LoadVar hd
            </span>
          </td>
        </tr>
        <tr id='P571'>
          <td align='right'>
            <a name='P571'>571</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C571'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P572'>
          <td align='right'>
            <a name='P572'>572</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C572'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P573'>
          <td align='right'>
            <a name='P573'>573</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in tl' id='C573'>
              StoreVar tl
            </span>
          </td>
        </tr>
        <tr id='P574'>
          <td align='right'>
            <a name='P574'>574</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='initialize accumulator for set comprehension: push constant {}' id='C574'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P575'>
          <td align='right'>
            <a name='P575'>575</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='initialize accumulator for set comprehension: pop a value and store in $accu454' id='C575'>
              StoreVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P576'>
          <td align='right'>
            <a name='P576'>576</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(524)' id='C576'>
              Push PC(524)
            </span>
          </td>
        </tr>
        <tr id='P577'>
          <td align='right'>
            <a name='P577'>577</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C577'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P578'>
          <td align='right'>
            <a name='P578'>578</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of tl' id='C578'>
              LoadVar tl
            </span>
          </td>
        </tr>
        <tr id='P579'>
          <td align='right'>
            <a name='P579'>579</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C579'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P580'>
          <td align='right'>
            <a name='P580'>580</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C580'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P581'>
          <td align='right'>
            <a name='P581'>581</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C581'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P582'>
          <td align='right'>
            <a name='P582'>582</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C582'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P583'>
          <td align='right'>
            <a name='P583'>583</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C583'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P584'>
          <td align='right'>
            <a name='P584'>584</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C584'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P585'>
          <td align='right'>
            <a name='P585'>585</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C585'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P586'>
          <td align='right'>
            <a name='P586'>586</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='get next element and assign to x; push False or True depending on success' id='C586'>
              Cut(x)
            </span>
          </td>
        </tr>
        <tr id='P587'>
          <td align='right'>
            <a name='P587'>587</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='check if loop is done: pop a value and jump to 601 if the value is False' id='C587'>
              JumpCond False 601
            </span>
          </td>
        </tr>
        <tr id='P588'>
          <td align='right'>
            <a name='P588'>588</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='load accumulator: push the value of $accu454' id='C588'>
              LoadVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P589'>
          <td align='right'>
            <a name='P589'>589</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable $accu454' id='C589'>
              DelVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P590'>
          <td align='right'>
            <a name='P590'>590</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(464)' id='C590'>
              Push PC(464)
            </span>
          </td>
        </tr>
        <tr id='P591'>
          <td align='right'>
            <a name='P591'>591</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C591'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P592'>
          <td align='right'>
            <a name='P592'>592</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of x' id='C592'>
              LoadVar x
            </span>
          </td>
        </tr>
        <tr id='P593'>
          <td align='right'>
            <a name='P593'>593</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable x' id='C593'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P594'>
          <td align='right'>
            <a name='P594'>594</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C594'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P595'>
          <td align='right'>
            <a name='P595'>595</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of hd' id='C595'>
              LoadVar hd
            </span>
          </td>
        </tr>
        <tr id='P596'>
          <td align='right'>
            <a name='P596'>596</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C596'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P597'>
          <td align='right'>
            <a name='P597'>597</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C597'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P598'>
          <td align='right'>
            <a name='P598'>598</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C598'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P599'>
          <td align='right'>
            <a name='P599'>599</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='update accumulator: pop a value and store in $accu454' id='C599'>
              StoreVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P600'>
          <td align='right'>
            <a name='P600'>600</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 586' id='C600'>
              Jump 586
            </span>
          </td>
        </tr>
        <tr id='P601'>
          <td align='right'>
            <a name='P601'>601</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable hd' id='C601'>
              DelVar hd
            </span>
          </td>
        </tr>
        <tr id='P602'>
          <td align='right'>
            <a name='P602'>602</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable x' id='C602'>
              DelVar x
            </span>
          </td>
        </tr>
        <tr id='P603'>
          <td align='right'>
            <a name='P603'>603</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='load final accumulator result: push the value of $accu454' id='C603'>
              LoadVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P604'>
          <td align='right'>
            <a name='P604'>604</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable $accu454' id='C604'>
              DelVar $accu454
            </span>
          </td>
        </tr>
        <tr id='P605'>
          <td align='right'>
            <a name='P605'>605</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(524)' id='C605'>
              Push PC(524)
            </span>
          </td>
        </tr>
        <tr id='P606'>
          <td align='right'>
            <a name='P606'>606</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C606'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P607'>
          <td align='right'>
            <a name='P607'>607</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of tl' id='C607'>
              LoadVar tl
            </span>
          </td>
        </tr>
        <tr id='P608'>
          <td align='right'>
            <a name='P608'>608</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable tl' id='C608'>
              DelVar tl
            </span>
          </td>
        </tr>
        <tr id='P609'>
          <td align='right'>
            <a name='P609'>609</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C609'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P610'>
          <td align='right'>
            <a name='P610'>610</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of k' id='C610'>
              LoadVar k
            </span>
          </td>
        </tr>
        <tr id='P611'>
          <td align='right'>
            <a name='P611'>611</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable k' id='C611'>
              DelVar k
            </span>
          </td>
        </tr>
        <tr id='P612'>
          <td align='right'>
            <a name='P612'>612</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C612'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P613'>
          <td align='right'>
            <a name='P613'>613</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C613'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P614'>
          <td align='right'>
            <a name='P614'>614</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying |' id='C614'>
              2-ary |
            </span>
          </td>
        </tr>
        <tr id='P615'>
          <td align='right'>
            <a name='P615'>615</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C615'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P616'>
          <td align='right'>
            <a name='P616'>616</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C616'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P617'>
          <td align='right'>
            <a name='P617'>617</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C617'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P618'>
          <td align='right'>
            <a name='P618'>618</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method atomic_load' id='C618'>
              Frame atomic_load(p)
            </span>
          </td>
        </tr>
        <tr id='P619'>
          <td align='right'>
            <a name='P619'>619</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C619'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P620'>
          <td align='right'>
            <a name='P620'>620</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C620'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P621'>
          <td align='right'>
            <a name='P621'>621</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of p' id='C621'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P622'>
          <td align='right'>
            <a name='P622'>622</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable p' id='C622'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P623'>
          <td align='right'>
            <a name='P623'>623</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C623'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P624'>
          <td align='right'>
            <a name='P624'>624</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C624'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P625'>
          <td align='right'>
            <a name='P625'>625</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C625'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P626'>
          <td align='right'>
            <a name='P626'>626</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C626'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P627'>
          <td align='right'>
            <a name='P627'>627</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C627'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P628'>
          <td align='right'>
            <a name='P628'>628</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method atomic_store' id='C628'>
              Frame atomic_store(p, v)
            </span>
          </td>
        </tr>
        <tr id='P629'>
          <td align='right'>
            <a name='P629'>629</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C629'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P630'>
          <td align='right'>
            <a name='P630'>630</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C630'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P631'>
          <td align='right'>
            <a name='P631'>631</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p' id='C631'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P632'>
          <td align='right'>
            <a name='P632'>632</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of v' id='C632'>
              LoadVar v
            </span>
          </td>
        </tr>
        <tr id='P633'>
          <td align='right'>
            <a name='P633'>633</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable v' id='C633'>
              DelVar v
            </span>
          </td>
        </tr>
        <tr id='P634'>
          <td align='right'>
            <a name='P634'>634</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C634'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P635'>
          <td align='right'>
            <a name='P635'>635</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C635'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P636'>
          <td align='right'>
            <a name='P636'>636</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C636'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P637'>
          <td align='right'>
            <a name='P637'>637</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C637'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P638'>
          <td align='right'>
            <a name='P638'>638</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method tas' id='C638'>
              Frame tas(lk)
            </span>
          </td>
        </tr>
        <tr id='P639'>
          <td align='right'>
            <a name='P639'>639</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C639'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P640'>
          <td align='right'>
            <a name='P640'>640</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C640'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P641'>
          <td align='right'>
            <a name='P641'>641</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of lk' id='C641'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P642'>
          <td align='right'>
            <a name='P642'>642</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C642'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P643'>
          <td align='right'>
            <a name='P643'>643</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C643'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P644'>
          <td align='right'>
            <a name='P644'>644</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C644'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P645'>
          <td align='right'>
            <a name='P645'>645</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable lk' id='C645'>
              DelVar lk
            </span>
          </td>
        </tr>
        <tr id='P646'>
          <td align='right'>
            <a name='P646'>646</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C646'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P647'>
          <td align='right'>
            <a name='P647'>647</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C647'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P648'>
          <td align='right'>
            <a name='P648'>648</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C648'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P649'>
          <td align='right'>
            <a name='P649'>649</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C649'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P650'>
          <td align='right'>
            <a name='P650'>650</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C650'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P651'>
          <td align='right'>
            <a name='P651'>651</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method cas' id='C651'>
              Frame cas(p, old, new)
            </span>
          </td>
        </tr>
        <tr id='P652'>
          <td align='right'>
            <a name='P652'>652</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C652'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P653'>
          <td align='right'>
            <a name='P653'>653</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C653'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P654'>
          <td align='right'>
            <a name='P654'>654</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C654'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P655'>
          <td align='right'>
            <a name='P655'>655</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C655'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P656'>
          <td align='right'>
            <a name='P656'>656</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of old' id='C656'>
              LoadVar old
            </span>
          </td>
        </tr>
        <tr id='P657'>
          <td align='right'>
            <a name='P657'>657</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable old' id='C657'>
              DelVar old
            </span>
          </td>
        </tr>
        <tr id='P658'>
          <td align='right'>
            <a name='P658'>658</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C658'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P659'>
          <td align='right'>
            <a name='P659'>659</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C659'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P660'>
          <td align='right'>
            <a name='P660'>660</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of result' id='C660'>
              LoadVar result
            </span>
          </td>
        </tr>
        <tr id='P661'>
          <td align='right'>
            <a name='P661'>661</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 667 if the value is False' id='C661'>
              JumpCond False 667
            </span>
          </td>
        </tr>
        <tr id='P662'>
          <td align='right'>
            <a name='P662'>662</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of p' id='C662'>
              LoadVar p
            </span>
          </td>
        </tr>
        <tr id='P663'>
          <td align='right'>
            <a name='P663'>663</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable p' id='C663'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P664'>
          <td align='right'>
            <a name='P664'>664</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of new' id='C664'>
              LoadVar new
            </span>
          </td>
        </tr>
        <tr id='P665'>
          <td align='right'>
            <a name='P665'>665</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable new' id='C665'>
              DelVar new
            </span>
          </td>
        </tr>
        <tr id='P666'>
          <td align='right'>
            <a name='P666'>666</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C666'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P667'>
          <td align='right'>
            <a name='P667'>667</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable new' id='C667'>
              DelVar new
            </span>
          </td>
        </tr>
        <tr id='P668'>
          <td align='right'>
            <a name='P668'>668</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable p' id='C668'>
              DelVar p
            </span>
          </td>
        </tr>
        <tr id='P669'>
          <td align='right'>
            <a name='P669'>669</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C669'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P670'>
          <td align='right'>
            <a name='P670'>670</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C670'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P671'>
          <td align='right'>
            <a name='P671'>671</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C671'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P672'>
          <td align='right'>
            <a name='P672'>672</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method BinSema' id='C672'>
              Frame BinSema(acquired)
            </span>
          </td>
        </tr>
        <tr id='P673'>
          <td align='right'>
            <a name='P673'>673</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C673'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P674'>
          <td align='right'>
            <a name='P674'>674</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of acquired' id='C674'>
              LoadVar acquired
            </span>
          </td>
        </tr>
        <tr id='P675'>
          <td align='right'>
            <a name='P675'>675</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable acquired' id='C675'>
              DelVar acquired
            </span>
          </td>
        </tr>
        <tr id='P676'>
          <td align='right'>
            <a name='P676'>676</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C676'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P677'>
          <td align='right'>
            <a name='P677'>677</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C677'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P678'>
          <td align='right'>
            <a name='P678'>678</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C678'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P679'>
          <td align='right'>
            <a name='P679'>679</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method Lock' id='C679'>
              Frame Lock()
            </span>
          </td>
        </tr>
        <tr id='P680'>
          <td align='right'>
            <a name='P680'>680</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C680'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P681'>
          <td align='right'>
            <a name='P681'>681</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(672)' id='C681'>
              Push PC(672)
            </span>
          </td>
        </tr>
        <tr id='P682'>
          <td align='right'>
            <a name='P682'>682</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C682'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P683'>
          <td align='right'>
            <a name='P683'>683</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C683'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P684'>
          <td align='right'>
            <a name='P684'>684</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C684'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P685'>
          <td align='right'>
            <a name='P685'>685</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C685'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P686'>
          <td align='right'>
            <a name='P686'>686</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C686'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P687'>
          <td align='right'>
            <a name='P687'>687</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method acquired' id='C687'>
              Frame acquired(binsema)
            </span>
          </td>
        </tr>
        <tr id='P688'>
          <td align='right'>
            <a name='P688'>688</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C688'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P689'>
          <td align='right'>
            <a name='P689'>689</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of binsema' id='C689'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P690'>
          <td align='right'>
            <a name='P690'>690</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable binsema' id='C690'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P691'>
          <td align='right'>
            <a name='P691'>691</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C691'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P692'>
          <td align='right'>
            <a name='P692'>692</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C692'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P693'>
          <td align='right'>
            <a name='P693'>693</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C693'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P694'>
          <td align='right'>
            <a name='P694'>694</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C694'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P695'>
          <td align='right'>
            <a name='P695'>695</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method acquire' id='C695'>
              Frame acquire(binsema)
            </span>
          </td>
        </tr>
        <tr id='P696'>
          <td align='right'>
            <a name='P696'>696</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C696'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P697'>
          <td align='right'>
            <a name='P697'>697</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C697'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P698'>
          <td align='right'>
            <a name='P698'>698</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C698'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P699'>
          <td align='right'>
            <a name='P699'>699</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C699'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P700'>
          <td align='right'>
            <a name='P700'>700</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying not' id='C700'>
              1-ary not
            </span>
          </td>
        </tr>
        <tr id='P701'>
          <td align='right'>
            <a name='P701'>701</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 703 if the value is False' id='C701'>
              JumpCond False 703
            </span>
          </td>
        </tr>
        <tr id='P702'>
          <td align='right'>
            <a name='P702'>702</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 706' id='C702'>
              Jump 706
            </span>
          </td>
        </tr>
        <tr id='P703'>
          <td align='right'>
            <a name='P703'>703</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C703'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P704'>
          <td align='right'>
            <a name='P704'>704</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C704'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P705'>
          <td align='right'>
            <a name='P705'>705</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 696' id='C705'>
              Jump 696
            </span>
          </td>
        </tr>
        <tr id='P706'>
          <td align='right'>
            <a name='P706'>706</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C706'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P707'>
          <td align='right'>
            <a name='P707'>707</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of binsema' id='C707'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P708'>
          <td align='right'>
            <a name='P708'>708</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable binsema' id='C708'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P709'>
          <td align='right'>
            <a name='P709'>709</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C709'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P710'>
          <td align='right'>
            <a name='P710'>710</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C710'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P711'>
          <td align='right'>
            <a name='P711'>711</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C711'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P712'>
          <td align='right'>
            <a name='P712'>712</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C712'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P713'>
          <td align='right'>
            <a name='P713'>713</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C713'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P714'>
          <td align='right'>
            <a name='P714'>714</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method release' id='C714'>
              Frame release(binsema)
            </span>
          </td>
        </tr>
        <tr id='P715'>
          <td align='right'>
            <a name='P715'>715</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C715'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P716'>
          <td align='right'>
            <a name='P716'>716</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C716'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P717'>
          <td align='right'>
            <a name='P717'>717</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C717'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P718'>
          <td align='right'>
            <a name='P718'>718</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C718'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P719'>
          <td align='right'>
            <a name='P719'>719</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C719'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P720'>
          <td align='right'>
            <a name='P720'>720</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C720'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P721'>
          <td align='right'>
            <a name='P721'>721</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C721'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P722'>
          <td align='right'>
            <a name='P722'>722</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C722'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P723'>
          <td align='right'>
            <a name='P723'>723</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of binsema' id='C723'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P724'>
          <td align='right'>
            <a name='P724'>724</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable binsema' id='C724'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P725'>
          <td align='right'>
            <a name='P725'>725</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C725'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P726'>
          <td align='right'>
            <a name='P726'>726</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C726'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P727'>
          <td align='right'>
            <a name='P727'>727</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C727'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P728'>
          <td align='right'>
            <a name='P728'>728</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C728'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P729'>
          <td align='right'>
            <a name='P729'>729</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C729'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P730'>
          <td align='right'>
            <a name='P730'>730</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method held' id='C730'>
              Frame held(binsema)
            </span>
          </td>
        </tr>
        <tr id='P731'>
          <td align='right'>
            <a name='P731'>731</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C731'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P732'>
          <td align='right'>
            <a name='P732'>732</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of binsema' id='C732'>
              LoadVar binsema
            </span>
          </td>
        </tr>
        <tr id='P733'>
          <td align='right'>
            <a name='P733'>733</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable binsema' id='C733'>
              DelVar binsema
            </span>
          </td>
        </tr>
        <tr id='P734'>
          <td align='right'>
            <a name='P734'>734</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C734'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P735'>
          <td align='right'>
            <a name='P735'>735</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C735'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P736'>
          <td align='right'>
            <a name='P736'>736</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C736'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P737'>
          <td align='right'>
            <a name='P737'>737</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C737'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P738'>
          <td align='right'>
            <a name='P738'>738</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Condition' id='C738'>
              Frame Condition()
            </span>
          </td>
        </tr>
        <tr id='P739'>
          <td align='right'>
            <a name='P739'>739</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C739'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P740'>
          <td align='right'>
            <a name='P740'>740</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(310)' id='C740'>
              Push PC(310)
            </span>
          </td>
        </tr>
        <tr id='P741'>
          <td align='right'>
            <a name='P741'>741</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C741'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P742'>
          <td align='right'>
            <a name='P742'>742</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C742'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P743'>
          <td align='right'>
            <a name='P743'>743</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C743'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P744'>
          <td align='right'>
            <a name='P744'>744</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C744'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P745'>
          <td align='right'>
            <a name='P745'>745</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C745'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P746'>
          <td align='right'>
            <a name='P746'>746</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method wait' id='C746'>
              Frame wait(c, lk)
            </span>
          </td>
        </tr>
        <tr id='P747'>
          <td align='right'>
            <a name='P747'>747</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C747'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P748'>
          <td align='right'>
            <a name='P748'>748</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in cnt' id='C748'>
              StoreVar cnt
            </span>
          </td>
        </tr>
        <tr id='P749'>
          <td align='right'>
            <a name='P749'>749</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable cnt' id='C749'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P750'>
          <td align='right'>
            <a name='P750'>750</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C750'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P751'>
          <td align='right'>
            <a name='P751'>751</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and save context' id='C751'>
              Save
            </span>
          </td>
        </tr>
        <tr id='P752'>
          <td align='right'>
            <a name='P752'>752</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='a no-op, must follow a Stop operation' id='C752'>
              Continue
            </span>
          </td>
        </tr>
        <tr id='P753'>
          <td align='right'>
            <a name='P753'>753</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in ((), ctx)' id='C753'>
              StoreVar ((), ctx)
            </span>
          </td>
        </tr>
        <tr id='P754'>
          <td align='right'>
            <a name='P754'>754</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C754'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P755'>
          <td align='right'>
            <a name='P755'>755</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(374)' id='C755'>
              Push PC(374)
            </span>
          </td>
        </tr>
        <tr id='P756'>
          <td align='right'>
            <a name='P756'>756</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C756'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P757'>
          <td align='right'>
            <a name='P757'>757</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C757'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P758'>
          <td align='right'>
            <a name='P758'>758</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C758'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P759'>
          <td align='right'>
            <a name='P759'>759</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C759'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P760'>
          <td align='right'>
            <a name='P760'>760</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of ctx' id='C760'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P761'>
          <td align='right'>
            <a name='P761'>761</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C761'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P762'>
          <td align='right'>
            <a name='P762'>762</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C762'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P763'>
          <td align='right'>
            <a name='P763'>763</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in cnt' id='C763'>
              StoreVar cnt
            </span>
          </td>
        </tr>
        <tr id='P764'>
          <td align='right'>
            <a name='P764'>764</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C764'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P765'>
          <td align='right'>
            <a name='P765'>765</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(464)' id='C765'>
              Push PC(464)
            </span>
          </td>
        </tr>
        <tr id='P766'>
          <td align='right'>
            <a name='P766'>766</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C766'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P767'>
          <td align='right'>
            <a name='P767'>767</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C767'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P768'>
          <td align='right'>
            <a name='P768'>768</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C768'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P769'>
          <td align='right'>
            <a name='P769'>769</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C769'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P770'>
          <td align='right'>
            <a name='P770'>770</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of ctx' id='C770'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P771'>
          <td align='right'>
            <a name='P771'>771</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C771'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P772'>
          <td align='right'>
            <a name='P772'>772</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C772'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P773'>
          <td align='right'>
            <a name='P773'>773</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C773'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P774'>
          <td align='right'>
            <a name='P774'>774</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C774'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P775'>
          <td align='right'>
            <a name='P775'>775</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C775'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P776'>
          <td align='right'>
            <a name='P776'>776</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C776'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P777'>
          <td align='right'>
            <a name='P777'>777</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C777'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P778'>
          <td align='right'>
            <a name='P778'>778</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C778'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P779'>
          <td align='right'>
            <a name='P779'>779</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C779'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P780'>
          <td align='right'>
            <a name='P780'>780</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of lk' id='C780'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P781'>
          <td align='right'>
            <a name='P781'>781</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C781'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P782'>
          <td align='right'>
            <a name='P782'>782</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 1 value and push the result of applying not' id='C782'>
              1-ary not
            </span>
          </td>
        </tr>
        <tr id='P783'>
          <td align='right'>
            <a name='P783'>783</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 795 if the value is False' id='C783'>
              JumpCond False 795
            </span>
          </td>
        </tr>
        <tr id='P784'>
          <td align='right'>
            <a name='P784'>784</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(374)' id='C784'>
              Push PC(374)
            </span>
          </td>
        </tr>
        <tr id='P785'>
          <td align='right'>
            <a name='P785'>785</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C785'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P786'>
          <td align='right'>
            <a name='P786'>786</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C786'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P787'>
          <td align='right'>
            <a name='P787'>787</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C787'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P788'>
          <td align='right'>
            <a name='P788'>788</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C788'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P789'>
          <td align='right'>
            <a name='P789'>789</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of ctx' id='C789'>
              LoadVar ctx
            </span>
          </td>
        </tr>
        <tr id='P790'>
          <td align='right'>
            <a name='P790'>790</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C790'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P791'>
          <td align='right'>
            <a name='P791'>791</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C791'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P792'>
          <td align='right'>
            <a name='P792'>792</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of cnt' id='C792'>
              LoadVar cnt
            </span>
          </td>
        </tr>
        <tr id='P793'>
          <td align='right'>
            <a name='P793'>793</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying <=' id='C793'>
              2-ary <=
            </span>
          </td>
        </tr>
        <tr id='P794'>
          <td align='right'>
            <a name='P794'>794</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 796' id='C794'>
              Jump 796
            </span>
          </td>
        </tr>
        <tr id='P795'>
          <td align='right'>
            <a name='P795'>795</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant False' id='C795'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P796'>
          <td align='right'>
            <a name='P796'>796</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 801 if the value is False' id='C796'>
              JumpCond False 801
            </span>
          </td>
        </tr>
        <tr id='P797'>
          <td align='right'>
            <a name='P797'>797</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C797'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P798'>
          <td align='right'>
            <a name='P798'>798</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable cnt' id='C798'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P799'>
          <td align='right'>
            <a name='P799'>799</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable ctx' id='C799'>
              DelVar ctx
            </span>
          </td>
        </tr>
        <tr id='P800'>
          <td align='right'>
            <a name='P800'>800</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 804' id='C800'>
              Jump 804
            </span>
          </td>
        </tr>
        <tr id='P801'>
          <td align='right'>
            <a name='P801'>801</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C801'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P802'>
          <td align='right'>
            <a name='P802'>802</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C802'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P803'>
          <td align='right'>
            <a name='P803'>803</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 778' id='C803'>
              Jump 778
            </span>
          </td>
        </tr>
        <tr id='P804'>
          <td align='right'>
            <a name='P804'>804</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C804'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P805'>
          <td align='right'>
            <a name='P805'>805</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of lk' id='C805'>
              LoadVar lk
            </span>
          </td>
        </tr>
        <tr id='P806'>
          <td align='right'>
            <a name='P806'>806</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable lk' id='C806'>
              DelVar lk
            </span>
          </td>
        </tr>
        <tr id='P807'>
          <td align='right'>
            <a name='P807'>807</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C807'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P808'>
          <td align='right'>
            <a name='P808'>808</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C808'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P809'>
          <td align='right'>
            <a name='P809'>809</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C809'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P810'>
          <td align='right'>
            <a name='P810'>810</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C810'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P811'>
          <td align='right'>
            <a name='P811'>811</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C811'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P812'>
          <td align='right'>
            <a name='P812'>812</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method notify' id='C812'>
              Frame notify(c)
            </span>
          </td>
        </tr>
        <tr id='P813'>
          <td align='right'>
            <a name='P813'>813</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C813'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P814'>
          <td align='right'>
            <a name='P814'>814</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C814'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P815'>
          <td align='right'>
            <a name='P815'>815</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C815'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P816'>
          <td align='right'>
            <a name='P816'>816</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(310)' id='C816'>
              Push PC(310)
            </span>
          </td>
        </tr>
        <tr id='P817'>
          <td align='right'>
            <a name='P817'>817</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C817'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P818'>
          <td align='right'>
            <a name='P818'>818</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C818'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P819'>
          <td align='right'>
            <a name='P819'>819</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C819'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P820'>
          <td align='right'>
            <a name='P820'>820</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 835 if the value is False' id='C820'>
              JumpCond False 835
            </span>
          </td>
        </tr>
        <tr id='P821'>
          <td align='right'>
            <a name='P821'>821</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C821'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P822'>
          <td align='right'>
            <a name='P822'>822</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(493)' id='C822'>
              Push PC(493)
            </span>
          </td>
        </tr>
        <tr id='P823'>
          <td align='right'>
            <a name='P823'>823</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C823'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P824'>
          <td align='right'>
            <a name='P824'>824</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C824'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P825'>
          <td align='right'>
            <a name='P825'>825</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C825'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P826'>
          <td align='right'>
            <a name='P826'>826</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C826'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P827'>
          <td align='right'>
            <a name='P827'>827</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(453)' id='C827'>
              Push PC(453)
            </span>
          </td>
        </tr>
        <tr id='P828'>
          <td align='right'>
            <a name='P828'>828</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of c' id='C828'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P829'>
          <td align='right'>
            <a name='P829'>829</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C829'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P830'>
          <td align='right'>
            <a name='P830'>830</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C830'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P831'>
          <td align='right'>
            <a name='P831'>831</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C831'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P832'>
          <td align='right'>
            <a name='P832'>832</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C832'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P833'>
          <td align='right'>
            <a name='P833'>833</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C833'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P834'>
          <td align='right'>
            <a name='P834'>834</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C834'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P835'>
          <td align='right'>
            <a name='P835'>835</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable c' id='C835'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P836'>
          <td align='right'>
            <a name='P836'>836</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C836'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P837'>
          <td align='right'>
            <a name='P837'>837</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C837'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P838'>
          <td align='right'>
            <a name='P838'>838</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C838'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P839'>
          <td align='right'>
            <a name='P839'>839</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method notifyAll' id='C839'>
              Frame notifyAll(c)
            </span>
          </td>
        </tr>
        <tr id='P840'>
          <td align='right'>
            <a name='P840'>840</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C840'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P841'>
          <td align='right'>
            <a name='P841'>841</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of c' id='C841'>
              LoadVar c
            </span>
          </td>
        </tr>
        <tr id='P842'>
          <td align='right'>
            <a name='P842'>842</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable c' id='C842'>
              DelVar c
            </span>
          </td>
        </tr>
        <tr id='P843'>
          <td align='right'>
            <a name='P843'>843</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(310)' id='C843'>
              Push PC(310)
            </span>
          </td>
        </tr>
        <tr id='P844'>
          <td align='right'>
            <a name='P844'>844</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C844'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P845'>
          <td align='right'>
            <a name='P845'>845</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C845'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P846'>
          <td align='right'>
            <a name='P846'>846</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C846'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P847'>
          <td align='right'>
            <a name='P847'>847</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C847'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P848'>
          <td align='right'>
            <a name='P848'>848</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C848'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P849'>
          <td align='right'>
            <a name='P849'>849</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C849'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P850'>
          <td align='right'>
            <a name='P850'>850</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Semaphore' id='C850'>
              Frame Semaphore(cnt)
            </span>
          </td>
        </tr>
        <tr id='P851'>
          <td align='right'>
            <a name='P851'>851</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C851'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P852'>
          <td align='right'>
            <a name='P852'>852</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of cnt' id='C852'>
              LoadVar cnt
            </span>
          </td>
        </tr>
        <tr id='P853'>
          <td align='right'>
            <a name='P853'>853</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable cnt' id='C853'>
              DelVar cnt
            </span>
          </td>
        </tr>
        <tr id='P854'>
          <td align='right'>
            <a name='P854'>854</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C854'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P855'>
          <td align='right'>
            <a name='P855'>855</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C855'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P856'>
          <td align='right'>
            <a name='P856'>856</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C856'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P857'>
          <td align='right'>
            <a name='P857'>857</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method P' id='C857'>
              Frame P(sema)
            </span>
          </td>
        </tr>
        <tr id='P858'>
          <td align='right'>
            <a name='P858'>858</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C858'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P859'>
          <td align='right'>
            <a name='P859'>859</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C859'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P860'>
          <td align='right'>
            <a name='P860'>860</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of sema' id='C860'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P861'>
          <td align='right'>
            <a name='P861'>861</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C861'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P862'>
          <td align='right'>
            <a name='P862'>862</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C862'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P863'>
          <td align='right'>
            <a name='P863'>863</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying >' id='C863'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P864'>
          <td align='right'>
            <a name='P864'>864</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 866 if the value is False' id='C864'>
              JumpCond False 866
            </span>
          </td>
        </tr>
        <tr id='P865'>
          <td align='right'>
            <a name='P865'>865</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 869' id='C865'>
              Jump 869
            </span>
          </td>
        </tr>
        <tr id='P866'>
          <td align='right'>
            <a name='P866'>866</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C866'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P867'>
          <td align='right'>
            <a name='P867'>867</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C867'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P868'>
          <td align='right'>
            <a name='P868'>868</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 858' id='C868'>
              Jump 858
            </span>
          </td>
        </tr>
        <tr id='P869'>
          <td align='right'>
            <a name='P869'>869</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C869'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P870'>
          <td align='right'>
            <a name='P870'>870</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of sema' id='C870'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P871'>
          <td align='right'>
            <a name='P871'>871</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable sema' id='C871'>
              DelVar sema
            </span>
          </td>
        </tr>
        <tr id='P872'>
          <td align='right'>
            <a name='P872'>872</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C872'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P873'>
          <td align='right'>
            <a name='P873'>873</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C873'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P874'>
          <td align='right'>
            <a name='P874'>874</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C874'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P875'>
          <td align='right'>
            <a name='P875'>875</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C875'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P876'>
          <td align='right'>
            <a name='P876'>876</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C876'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P877'>
          <td align='right'>
            <a name='P877'>877</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C877'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P878'>
          <td align='right'>
            <a name='P878'>878</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C878'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P879'>
          <td align='right'>
            <a name='P879'>879</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C879'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P880'>
          <td align='right'>
            <a name='P880'>880</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method V' id='C880'>
              Frame V(sema)
            </span>
          </td>
        </tr>
        <tr id='P881'>
          <td align='right'>
            <a name='P881'>881</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C881'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P882'>
          <td align='right'>
            <a name='P882'>882</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of sema' id='C882'>
              LoadVar sema
            </span>
          </td>
        </tr>
        <tr id='P883'>
          <td align='right'>
            <a name='P883'>883</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable sema' id='C883'>
              DelVar sema
            </span>
          </td>
        </tr>
        <tr id='P884'>
          <td align='right'>
            <a name='P884'>884</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C884'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P885'>
          <td align='right'>
            <a name='P885'>885</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C885'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P886'>
          <td align='right'>
            <a name='P886'>886</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C886'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P887'>
          <td align='right'>
            <a name='P887'>887</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C887'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P888'>
          <td align='right'>
            <a name='P888'>888</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C888'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P889'>
          <td align='right'>
            <a name='P889'>889</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C889'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P890'>
          <td align='right'>
            <a name='P890'>890</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C890'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P891'>
          <td align='right'>
            <a name='P891'>891</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C891'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P892'>
          <td align='right'>
            <a name='P892'>892</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Queue' id='C892'>
              Frame Queue()
            </span>
          </td>
        </tr>
        <tr id='P893'>
          <td align='right'>
            <a name='P893'>893</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C893'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P894'>
          <td align='right'>
            <a name='P894'>894</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C894'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P895'>
          <td align='right'>
            <a name='P895'>895</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C895'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P896'>
          <td align='right'>
            <a name='P896'>896</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C896'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P897'>
          <td align='right'>
            <a name='P897'>897</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C897'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P898'>
          <td align='right'>
            <a name='P898'>898</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method get' id='C898'>
              Frame get(q)
            </span>
          </td>
        </tr>
        <tr id='P899'>
          <td align='right'>
            <a name='P899'>899</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C899'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P900'>
          <td align='right'>
            <a name='P900'>900</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C900'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P901'>
          <td align='right'>
            <a name='P901'>901</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C901'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P902'>
          <td align='right'>
            <a name='P902'>902</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of q' id='C902'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P903'>
          <td align='right'>
            <a name='P903'>903</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C903'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P904'>
          <td align='right'>
            <a name='P904'>904</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C904'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P905'>
          <td align='right'>
            <a name='P905'>905</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying !=' id='C905'>
              2-ary !=
            </span>
          </td>
        </tr>
        <tr id='P906'>
          <td align='right'>
            <a name='P906'>906</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 908 if the value is False' id='C906'>
              JumpCond False 908
            </span>
          </td>
        </tr>
        <tr id='P907'>
          <td align='right'>
            <a name='P907'>907</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 911' id='C907'>
              Jump 911
            </span>
          </td>
        </tr>
        <tr id='P908'>
          <td align='right'>
            <a name='P908'>908</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C908'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P909'>
          <td align='right'>
            <a name='P909'>909</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C909'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P910'>
          <td align='right'>
            <a name='P910'>910</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 899' id='C910'>
              Jump 899
            </span>
          </td>
        </tr>
        <tr id='P911'>
          <td align='right'>
            <a name='P911'>911</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C911'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P912'>
          <td align='right'>
            <a name='P912'>912</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(44)' id='C912'>
              Push PC(44)
            </span>
          </td>
        </tr>
        <tr id='P913'>
          <td align='right'>
            <a name='P913'>913</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C913'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P914'>
          <td align='right'>
            <a name='P914'>914</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C914'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P915'>
          <td align='right'>
            <a name='P915'>915</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C915'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P916'>
          <td align='right'>
            <a name='P916'>916</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C916'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P917'>
          <td align='right'>
            <a name='P917'>917</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C917'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P918'>
          <td align='right'>
            <a name='P918'>918</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(55)' id='C918'>
              Push PC(55)
            </span>
          </td>
        </tr>
        <tr id='P919'>
          <td align='right'>
            <a name='P919'>919</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C919'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P920'>
          <td align='right'>
            <a name='P920'>920</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable q' id='C920'>
              DelVar q
            </span>
          </td>
        </tr>
        <tr id='P921'>
          <td align='right'>
            <a name='P921'>921</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C921'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P922'>
          <td align='right'>
            <a name='P922'>922</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C922'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P923'>
          <td align='right'>
            <a name='P923'>923</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C923'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P924'>
          <td align='right'>
            <a name='P924'>924</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C924'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P925'>
          <td align='right'>
            <a name='P925'>925</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C925'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P926'>
          <td align='right'>
            <a name='P926'>926</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C926'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P927'>
          <td align='right'>
            <a name='P927'>927</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method put' id='C927'>
              Frame put(q, item)
            </span>
          </td>
        </tr>
        <tr id='P928'>
          <td align='right'>
            <a name='P928'>928</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C928'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P929'>
          <td align='right'>
            <a name='P929'>929</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of q' id='C929'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P930'>
          <td align='right'>
            <a name='P930'>930</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(32)' id='C930'>
              Push PC(32)
            </span>
          </td>
        </tr>
        <tr id='P931'>
          <td align='right'>
            <a name='P931'>931</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C931'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P932'>
          <td align='right'>
            <a name='P932'>932</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of q' id='C932'>
              LoadVar q
            </span>
          </td>
        </tr>
        <tr id='P933'>
          <td align='right'>
            <a name='P933'>933</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable q' id='C933'>
              DelVar q
            </span>
          </td>
        </tr>
        <tr id='P934'>
          <td align='right'>
            <a name='P934'>934</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C934'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P935'>
          <td align='right'>
            <a name='P935'>935</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C935'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P936'>
          <td align='right'>
            <a name='P936'>936</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of item' id='C936'>
              LoadVar item
            </span>
          </td>
        </tr>
        <tr id='P937'>
          <td align='right'>
            <a name='P937'>937</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable item' id='C937'>
              DelVar item
            </span>
          </td>
        </tr>
        <tr id='P938'>
          <td align='right'>
            <a name='P938'>938</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C938'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P939'>
          <td align='right'>
            <a name='P939'>939</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C939'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P940'>
          <td align='right'>
            <a name='P940'>940</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C940'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P941'>
          <td align='right'>
            <a name='P941'>941</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C941'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P942'>
          <td align='right'>
            <a name='P942'>942</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C942'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P943'>
          <td align='right'>
            <a name='P943'>943</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C943'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P944'>
          <td align='right'>
            <a name='P944'>944</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method Election' id='C944'>
              Frame Election(n, m)
            </span>
          </td>
        </tr>
        <tr id='P945'>
          <td align='right'>
            <a name='P945'>945</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C945'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P946'>
          <td align='right'>
            <a name='P946'>946</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant {:}' id='C946'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P947'>
          <td align='right'>
            <a name='P947'>947</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "locks_can"' id='C947'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P948'>
          <td align='right'>
            <a name='P948'>948</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C948'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P949'>
          <td align='right'>
            <a name='P949'>949</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(679)' id='C949'>
              Push PC(679)
            </span>
          </td>
        </tr>
        <tr id='P950'>
          <td align='right'>
            <a name='P950'>950</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C950'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P951'>
          <td align='right'>
            <a name='P951'>951</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C951'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P952'>
          <td align='right'>
            <a name='P952'>952</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C952'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P953'>
          <td align='right'>
            <a name='P953'>953</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of n' id='C953'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P954'>
          <td align='right'>
            <a name='P954'>954</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying *' id='C954'>
              2-ary *
            </span>
          </td>
        </tr>
        <tr id='P955'>
          <td align='right'>
            <a name='P955'>955</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C955'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P956'>
          <td align='right'>
            <a name='P956'>956</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_cit"' id='C956'>
              Push "locks_cit"
            </span>
          </td>
        </tr>
        <tr id='P957'>
          <td align='right'>
            <a name='P957'>957</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C957'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P958'>
          <td align='right'>
            <a name='P958'>958</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(679)' id='C958'>
              Push PC(679)
            </span>
          </td>
        </tr>
        <tr id='P959'>
          <td align='right'>
            <a name='P959'>959</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C959'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P960'>
          <td align='right'>
            <a name='P960'>960</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C960'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P961'>
          <td align='right'>
            <a name='P961'>961</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C961'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P962'>
          <td align='right'>
            <a name='P962'>962</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of m' id='C962'>
              LoadVar m
            </span>
          </td>
        </tr>
        <tr id='P963'>
          <td align='right'>
            <a name='P963'>963</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying *' id='C963'>
              2-ary *
            </span>
          </td>
        </tr>
        <tr id='P964'>
          <td align='right'>
            <a name='P964'>964</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C964'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P965'>
          <td align='right'>
            <a name='P965'>965</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "candidates"' id='C965'>
              Push "candidates"
            </span>
          </td>
        </tr>
        <tr id='P966'>
          <td align='right'>
            <a name='P966'>966</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant [0,]' id='C966'>
              Push [0,]
            </span>
          </td>
        </tr>
        <tr id='P967'>
          <td align='right'>
            <a name='P967'>967</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of n' id='C967'>
              LoadVar n
            </span>
          </td>
        </tr>
        <tr id='P968'>
          <td align='right'>
            <a name='P968'>968</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable n' id='C968'>
              DelVar n
            </span>
          </td>
        </tr>
        <tr id='P969'>
          <td align='right'>
            <a name='P969'>969</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying *' id='C969'>
              2-ary *
            </span>
          </td>
        </tr>
        <tr id='P970'>
          <td align='right'>
            <a name='P970'>970</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C970'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P971'>
          <td align='right'>
            <a name='P971'>971</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "citizens"' id='C971'>
              Push "citizens"
            </span>
          </td>
        </tr>
        <tr id='P972'>
          <td align='right'>
            <a name='P972'>972</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant [{ "voted":False, "voted_for":-1 },]' id='C972'>
              Push [{ "voted":False, "voted_for":-1 },]
            </span>
          </td>
        </tr>
        <tr id='P973'>
          <td align='right'>
            <a name='P973'>973</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of m' id='C973'>
              LoadVar m
            </span>
          </td>
        </tr>
        <tr id='P974'>
          <td align='right'>
            <a name='P974'>974</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable m' id='C974'>
              DelVar m
            </span>
          </td>
        </tr>
        <tr id='P975'>
          <td align='right'>
            <a name='P975'>975</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying *' id='C975'>
              2-ary *
            </span>
          </td>
        </tr>
        <tr id='P976'>
          <td align='right'>
            <a name='P976'>976</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 3 values and push the result of applying DictAdd' id='C976'>
              3-ary DictAdd
            </span>
          </td>
        </tr>
        <tr id='P977'>
          <td align='right'>
            <a name='P977'>977</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C977'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P978'>
          <td align='right'>
            <a name='P978'>978</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C978'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P979'>
          <td align='right'>
            <a name='P979'>979</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C979'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P980'>
          <td align='right'>
            <a name='P980'>980</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method vote' id='C980'>
              Frame vote(election, candidate, citizen)
            </span>
          </td>
        </tr>
        <tr id='P981'>
          <td align='right'>
            <a name='P981'>981</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C981'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P982'>
          <td align='right'>
            <a name='P982'>982</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(695)' id='C982'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P983'>
          <td align='right'>
            <a name='P983'>983</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C983'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P984'>
          <td align='right'>
            <a name='P984'>984</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_can"' id='C984'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P985'>
          <td align='right'>
            <a name='P985'>985</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C985'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P986'>
          <td align='right'>
            <a name='P986'>986</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate' id='C986'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P987'>
          <td align='right'>
            <a name='P987'>987</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C987'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P988'>
          <td align='right'>
            <a name='P988'>988</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C988'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P989'>
          <td align='right'>
            <a name='P989'>989</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C989'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P990'>
          <td align='right'>
            <a name='P990'>990</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(695)' id='C990'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P991'>
          <td align='right'>
            <a name='P991'>991</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C991'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P992'>
          <td align='right'>
            <a name='P992'>992</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_cit"' id='C992'>
              Push "locks_cit"
            </span>
          </td>
        </tr>
        <tr id='P993'>
          <td align='right'>
            <a name='P993'>993</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C993'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P994'>
          <td align='right'>
            <a name='P994'>994</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen' id='C994'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P995'>
          <td align='right'>
            <a name='P995'>995</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C995'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P996'>
          <td align='right'>
            <a name='P996'>996</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C996'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P997'>
          <td align='right'>
            <a name='P997'>997</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C997'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P998'>
          <td align='right'>
            <a name='P998'>998</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C998'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P999'>
          <td align='right'>
            <a name='P999'>999</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "citizens"' id='C999'>
              Push "citizens"
            </span>
          </td>
        </tr>
        <tr id='P1000'>
          <td align='right'>
            <a name='P1000'>1000</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1000'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1001'>
          <td align='right'>
            <a name='P1001'>1001</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of citizen' id='C1001'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1002'>
          <td align='right'>
            <a name='P1002'>1002</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1002'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1003'>
          <td align='right'>
            <a name='P1003'>1003</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "voted"' id='C1003'>
              Push "voted"
            </span>
          </td>
        </tr>
        <tr id='P1004'>
          <td align='right'>
            <a name='P1004'>1004</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1004'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1005'>
          <td align='right'>
            <a name='P1005'>1005</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1005'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1006'>
          <td align='right'>
            <a name='P1006'>1006</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C1006'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P1007'>
          <td align='right'>
            <a name='P1007'>1007</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1007'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1008'>
          <td align='right'>
            <a name='P1008'>1008</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1039 if the value is False' id='C1008'>
              JumpCond False 1039
            </span>
          </td>
        </tr>
        <tr id='P1009'>
          <td align='right'>
            <a name='P1009'>1009</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1009'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1010'>
          <td align='right'>
            <a name='P1010'>1010</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "candidates"' id='C1010'>
              Push "candidates"
            </span>
          </td>
        </tr>
        <tr id='P1011'>
          <td align='right'>
            <a name='P1011'>1011</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1011'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1012'>
          <td align='right'>
            <a name='P1012'>1012</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate' id='C1012'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1013'>
          <td align='right'>
            <a name='P1013'>1013</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1013'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1014'>
          <td align='right'>
            <a name='P1014'>1014</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C1014'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1015'>
          <td align='right'>
            <a name='P1015'>1015</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1015'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1016'>
          <td align='right'>
            <a name='P1016'>1016</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1016'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1017'>
          <td align='right'>
            <a name='P1017'>1017</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C1017'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1018'>
          <td align='right'>
            <a name='P1018'>1018</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1018'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1019'>
          <td align='right'>
            <a name='P1019'>1019</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1019'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1020'>
          <td align='right'>
            <a name='P1020'>1020</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "citizens"' id='C1020'>
              Push "citizens"
            </span>
          </td>
        </tr>
        <tr id='P1021'>
          <td align='right'>
            <a name='P1021'>1021</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1021'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1022'>
          <td align='right'>
            <a name='P1022'>1022</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen' id='C1022'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1023'>
          <td align='right'>
            <a name='P1023'>1023</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1023'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1024'>
          <td align='right'>
            <a name='P1024'>1024</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "voted"' id='C1024'>
              Push "voted"
            </span>
          </td>
        </tr>
        <tr id='P1025'>
          <td align='right'>
            <a name='P1025'>1025</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1025'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1026'>
          <td align='right'>
            <a name='P1026'>1026</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C1026'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P1027'>
          <td align='right'>
            <a name='P1027'>1027</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1027'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1028'>
          <td align='right'>
            <a name='P1028'>1028</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1028'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1029'>
          <td align='right'>
            <a name='P1029'>1029</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "citizens"' id='C1029'>
              Push "citizens"
            </span>
          </td>
        </tr>
        <tr id='P1030'>
          <td align='right'>
            <a name='P1030'>1030</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1030'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1031'>
          <td align='right'>
            <a name='P1031'>1031</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of citizen' id='C1031'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1032'>
          <td align='right'>
            <a name='P1032'>1032</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1032'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1033'>
          <td align='right'>
            <a name='P1033'>1033</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "voted_for"' id='C1033'>
              Push "voted_for"
            </span>
          </td>
        </tr>
        <tr id='P1034'>
          <td align='right'>
            <a name='P1034'>1034</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1034'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1035'>
          <td align='right'>
            <a name='P1035'>1035</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate' id='C1035'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1036'>
          <td align='right'>
            <a name='P1036'>1036</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1036'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1037'>
          <td align='right'>
            <a name='P1037'>1037</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C1037'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P1038'>
          <td align='right'>
            <a name='P1038'>1038</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C1038'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1039'>
          <td align='right'>
            <a name='P1039'>1039</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C1039'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P1040'>
          <td align='right'>
            <a name='P1040'>1040</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C1040'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P1041'>
          <td align='right'>
            <a name='P1041'>1041</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C1041'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1042'>
          <td align='right'>
            <a name='P1042'>1042</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(714)' id='C1042'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P1043'>
          <td align='right'>
            <a name='P1043'>1043</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1043'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1044'>
          <td align='right'>
            <a name='P1044'>1044</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_cit"' id='C1044'>
              Push "locks_cit"
            </span>
          </td>
        </tr>
        <tr id='P1045'>
          <td align='right'>
            <a name='P1045'>1045</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1045'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1046'>
          <td align='right'>
            <a name='P1046'>1046</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen' id='C1046'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1047'>
          <td align='right'>
            <a name='P1047'>1047</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable citizen' id='C1047'>
              DelVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1048'>
          <td align='right'>
            <a name='P1048'>1048</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1048'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1049'>
          <td align='right'>
            <a name='P1049'>1049</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1049'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1050'>
          <td align='right'>
            <a name='P1050'>1050</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1050'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1051'>
          <td align='right'>
            <a name='P1051'>1051</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(714)' id='C1051'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P1052'>
          <td align='right'>
            <a name='P1052'>1052</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1052'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1053'>
          <td align='right'>
            <a name='P1053'>1053</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable election' id='C1053'>
              DelVar election
            </span>
          </td>
        </tr>
        <tr id='P1054'>
          <td align='right'>
            <a name='P1054'>1054</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_can"' id='C1054'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1055'>
          <td align='right'>
            <a name='P1055'>1055</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1055'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1056'>
          <td align='right'>
            <a name='P1056'>1056</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate' id='C1056'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1057'>
          <td align='right'>
            <a name='P1057'>1057</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable candidate' id='C1057'>
              DelVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1058'>
          <td align='right'>
            <a name='P1058'>1058</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1058'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1059'>
          <td align='right'>
            <a name='P1059'>1059</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1059'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1060'>
          <td align='right'>
            <a name='P1060'>1060</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1060'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1061'>
          <td align='right'>
            <a name='P1061'>1061</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1061'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1062'>
          <td align='right'>
            <a name='P1062'>1062</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C1062'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P1063'>
          <td align='right'>
            <a name='P1063'>1063</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method withdraw' id='C1063'>
              Frame withdraw(election, citizen)
            </span>
          </td>
        </tr>
        <tr id='P1064'>
          <td align='right'>
            <a name='P1064'>1064</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C1064'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P1065'>
          <td align='right'>
            <a name='P1065'>1065</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(695)' id='C1065'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P1066'>
          <td align='right'>
            <a name='P1066'>1066</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1066'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1067'>
          <td align='right'>
            <a name='P1067'>1067</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "locks_cit"' id='C1067'>
              Push "locks_cit"
            </span>
          </td>
        </tr>
        <tr id='P1068'>
          <td align='right'>
            <a name='P1068'>1068</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1068'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1069'>
          <td align='right'>
            <a name='P1069'>1069</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of citizen' id='C1069'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1070'>
          <td align='right'>
            <a name='P1070'>1070</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1070'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1071'>
          <td align='right'>
            <a name='P1071'>1071</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1071'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1072'>
          <td align='right'>
            <a name='P1072'>1072</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1072'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1073'>
          <td align='right'>
            <a name='P1073'>1073</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1073'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1074'>
          <td align='right'>
            <a name='P1074'>1074</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "citizens"' id='C1074'>
              Push "citizens"
            </span>
          </td>
        </tr>
        <tr id='P1075'>
          <td align='right'>
            <a name='P1075'>1075</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1075'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1076'>
          <td align='right'>
            <a name='P1076'>1076</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen' id='C1076'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1077'>
          <td align='right'>
            <a name='P1077'>1077</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1077'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1078'>
          <td align='right'>
            <a name='P1078'>1078</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "voted_for"' id='C1078'>
              Push "voted_for"
            </span>
          </td>
        </tr>
        <tr id='P1079'>
          <td align='right'>
            <a name='P1079'>1079</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1079'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1080'>
          <td align='right'>
            <a name='P1080'>1080</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1080'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1081'>
          <td align='right'>
            <a name='P1081'>1081</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in candidate' id='C1081'>
              StoreVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1082'>
          <td align='right'>
            <a name='P1082'>1082</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(714)' id='C1082'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P1083'>
          <td align='right'>
            <a name='P1083'>1083</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1083'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1084'>
          <td align='right'>
            <a name='P1084'>1084</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_cit"' id='C1084'>
              Push "locks_cit"
            </span>
          </td>
        </tr>
        <tr id='P1085'>
          <td align='right'>
            <a name='P1085'>1085</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1085'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1086'>
          <td align='right'>
            <a name='P1086'>1086</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen' id='C1086'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1087'>
          <td align='right'>
            <a name='P1087'>1087</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1087'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1088'>
          <td align='right'>
            <a name='P1088'>1088</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1088'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1089'>
          <td align='right'>
            <a name='P1089'>1089</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1089'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1090'>
          <td align='right'>
            <a name='P1090'>1090</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(695)' id='C1090'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P1091'>
          <td align='right'>
            <a name='P1091'>1091</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1091'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1092'>
          <td align='right'>
            <a name='P1092'>1092</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_can"' id='C1092'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1093'>
          <td align='right'>
            <a name='P1093'>1093</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1093'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1094'>
          <td align='right'>
            <a name='P1094'>1094</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate' id='C1094'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1095'>
          <td align='right'>
            <a name='P1095'>1095</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1095'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1096'>
          <td align='right'>
            <a name='P1096'>1096</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1096'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1097'>
          <td align='right'>
            <a name='P1097'>1097</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1097'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1098'>
          <td align='right'>
            <a name='P1098'>1098</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(695)' id='C1098'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P1099'>
          <td align='right'>
            <a name='P1099'>1099</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1099'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1100'>
          <td align='right'>
            <a name='P1100'>1100</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_cit"' id='C1100'>
              Push "locks_cit"
            </span>
          </td>
        </tr>
        <tr id='P1101'>
          <td align='right'>
            <a name='P1101'>1101</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1101'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1102'>
          <td align='right'>
            <a name='P1102'>1102</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen' id='C1102'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1103'>
          <td align='right'>
            <a name='P1103'>1103</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1103'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1104'>
          <td align='right'>
            <a name='P1104'>1104</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1104'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1105'>
          <td align='right'>
            <a name='P1105'>1105</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1105'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1106'>
          <td align='right'>
            <a name='P1106'>1106</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1106'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1107'>
          <td align='right'>
            <a name='P1107'>1107</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "citizens"' id='C1107'>
              Push "citizens"
            </span>
          </td>
        </tr>
        <tr id='P1108'>
          <td align='right'>
            <a name='P1108'>1108</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1108'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1109'>
          <td align='right'>
            <a name='P1109'>1109</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of citizen' id='C1109'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1110'>
          <td align='right'>
            <a name='P1110'>1110</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1110'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1111'>
          <td align='right'>
            <a name='P1111'>1111</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "voted"' id='C1111'>
              Push "voted"
            </span>
          </td>
        </tr>
        <tr id='P1112'>
          <td align='right'>
            <a name='P1112'>1112</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1112'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1113'>
          <td align='right'>
            <a name='P1113'>1113</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1113'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1114'>
          <td align='right'>
            <a name='P1114'>1114</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant True' id='C1114'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P1115'>
          <td align='right'>
            <a name='P1115'>1115</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1115'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1116'>
          <td align='right'>
            <a name='P1116'>1116</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and jump to 1147 if the value is False' id='C1116'>
              JumpCond False 1147
            </span>
          </td>
        </tr>
        <tr id='P1117'>
          <td align='right'>
            <a name='P1117'>1117</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1117'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1118'>
          <td align='right'>
            <a name='P1118'>1118</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "candidates"' id='C1118'>
              Push "candidates"
            </span>
          </td>
        </tr>
        <tr id='P1119'>
          <td align='right'>
            <a name='P1119'>1119</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1119'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1120'>
          <td align='right'>
            <a name='P1120'>1120</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate' id='C1120'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1121'>
          <td align='right'>
            <a name='P1121'>1121</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1121'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1122'>
          <td align='right'>
            <a name='P1122'>1122</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C1122'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1123'>
          <td align='right'>
            <a name='P1123'>1123</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1123'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1124'>
          <td align='right'>
            <a name='P1124'>1124</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1124'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1125'>
          <td align='right'>
            <a name='P1125'>1125</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying -' id='C1125'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1126'>
          <td align='right'>
            <a name='P1126'>1126</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1126'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1127'>
          <td align='right'>
            <a name='P1127'>1127</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1127'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1128'>
          <td align='right'>
            <a name='P1128'>1128</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "citizens"' id='C1128'>
              Push "citizens"
            </span>
          </td>
        </tr>
        <tr id='P1129'>
          <td align='right'>
            <a name='P1129'>1129</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1129'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1130'>
          <td align='right'>
            <a name='P1130'>1130</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen' id='C1130'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1131'>
          <td align='right'>
            <a name='P1131'>1131</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1131'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1132'>
          <td align='right'>
            <a name='P1132'>1132</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "voted"' id='C1132'>
              Push "voted"
            </span>
          </td>
        </tr>
        <tr id='P1133'>
          <td align='right'>
            <a name='P1133'>1133</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1133'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1134'>
          <td align='right'>
            <a name='P1134'>1134</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C1134'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P1135'>
          <td align='right'>
            <a name='P1135'>1135</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1135'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1136'>
          <td align='right'>
            <a name='P1136'>1136</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1136'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1137'>
          <td align='right'>
            <a name='P1137'>1137</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "citizens"' id='C1137'>
              Push "citizens"
            </span>
          </td>
        </tr>
        <tr id='P1138'>
          <td align='right'>
            <a name='P1138'>1138</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1138'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1139'>
          <td align='right'>
            <a name='P1139'>1139</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of citizen' id='C1139'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1140'>
          <td align='right'>
            <a name='P1140'>1140</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1140'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1141'>
          <td align='right'>
            <a name='P1141'>1141</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "voted_for"' id='C1141'>
              Push "voted_for"
            </span>
          </td>
        </tr>
        <tr id='P1142'>
          <td align='right'>
            <a name='P1142'>1142</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1142'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1143'>
          <td align='right'>
            <a name='P1143'>1143</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant -1' id='C1143'>
              Push -1
            </span>
          </td>
        </tr>
        <tr id='P1144'>
          <td align='right'>
            <a name='P1144'>1144</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1144'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1145'>
          <td align='right'>
            <a name='P1145'>1145</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant True' id='C1145'>
              Push True
            </span>
          </td>
        </tr>
        <tr id='P1146'>
          <td align='right'>
            <a name='P1146'>1146</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C1146'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1147'>
          <td align='right'>
            <a name='P1147'>1147</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable result' id='C1147'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P1148'>
          <td align='right'>
            <a name='P1148'>1148</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant False' id='C1148'>
              Push False
            </span>
          </td>
        </tr>
        <tr id='P1149'>
          <td align='right'>
            <a name='P1149'>1149</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C1149'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1150'>
          <td align='right'>
            <a name='P1150'>1150</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(714)' id='C1150'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P1151'>
          <td align='right'>
            <a name='P1151'>1151</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1151'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1152'>
          <td align='right'>
            <a name='P1152'>1152</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_cit"' id='C1152'>
              Push "locks_cit"
            </span>
          </td>
        </tr>
        <tr id='P1153'>
          <td align='right'>
            <a name='P1153'>1153</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1153'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1154'>
          <td align='right'>
            <a name='P1154'>1154</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen' id='C1154'>
              LoadVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1155'>
          <td align='right'>
            <a name='P1155'>1155</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable citizen' id='C1155'>
              DelVar citizen
            </span>
          </td>
        </tr>
        <tr id='P1156'>
          <td align='right'>
            <a name='P1156'>1156</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1156'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1157'>
          <td align='right'>
            <a name='P1157'>1157</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1157'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1158'>
          <td align='right'>
            <a name='P1158'>1158</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1158'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1159'>
          <td align='right'>
            <a name='P1159'>1159</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(714)' id='C1159'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P1160'>
          <td align='right'>
            <a name='P1160'>1160</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1160'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1161'>
          <td align='right'>
            <a name='P1161'>1161</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable election' id='C1161'>
              DelVar election
            </span>
          </td>
        </tr>
        <tr id='P1162'>
          <td align='right'>
            <a name='P1162'>1162</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "locks_can"' id='C1162'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1163'>
          <td align='right'>
            <a name='P1163'>1163</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1163'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1164'>
          <td align='right'>
            <a name='P1164'>1164</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate' id='C1164'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1165'>
          <td align='right'>
            <a name='P1165'>1165</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable candidate' id='C1165'>
              DelVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1166'>
          <td align='right'>
            <a name='P1166'>1166</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1166'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1167'>
          <td align='right'>
            <a name='P1167'>1167</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1167'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1168'>
          <td align='right'>
            <a name='P1168'>1168</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1168'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1169'>
          <td align='right'>
            <a name='P1169'>1169</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1169'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1170'>
          <td align='right'>
            <a name='P1170'>1170</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1296' id='C1170'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P1171'>
          <td align='right'>
            <a name='P1171'>1171</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method get_votes' id='C1171'>
              Frame get_votes(election, candidate)
            </span>
          </td>
        </tr>
        <tr id='P1172'>
          <td align='right'>
            <a name='P1172'>1172</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C1172'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P1173'>
          <td align='right'>
            <a name='P1173'>1173</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(695)' id='C1173'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P1174'>
          <td align='right'>
            <a name='P1174'>1174</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1174'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1175'>
          <td align='right'>
            <a name='P1175'>1175</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "locks_can"' id='C1175'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1176'>
          <td align='right'>
            <a name='P1176'>1176</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1176'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1177'>
          <td align='right'>
            <a name='P1177'>1177</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate' id='C1177'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1178'>
          <td align='right'>
            <a name='P1178'>1178</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1178'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1179'>
          <td align='right'>
            <a name='P1179'>1179</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1179'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1180'>
          <td align='right'>
            <a name='P1180'>1180</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1180'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1181'>
          <td align='right'>
            <a name='P1181'>1181</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1181'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1182'>
          <td align='right'>
            <a name='P1182'>1182</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "candidates"' id='C1182'>
              Push "candidates"
            </span>
          </td>
        </tr>
        <tr id='P1183'>
          <td align='right'>
            <a name='P1183'>1183</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1183'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1184'>
          <td align='right'>
            <a name='P1184'>1184</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate' id='C1184'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1185'>
          <td align='right'>
            <a name='P1185'>1185</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1185'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1186'>
          <td align='right'>
            <a name='P1186'>1186</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1186'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1187'>
          <td align='right'>
            <a name='P1187'>1187</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in result' id='C1187'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1188'>
          <td align='right'>
            <a name='P1188'>1188</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(714)' id='C1188'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P1189'>
          <td align='right'>
            <a name='P1189'>1189</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1189'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1190'>
          <td align='right'>
            <a name='P1190'>1190</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable election' id='C1190'>
              DelVar election
            </span>
          </td>
        </tr>
        <tr id='P1191'>
          <td align='right'>
            <a name='P1191'>1191</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "locks_can"' id='C1191'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1192'>
          <td align='right'>
            <a name='P1192'>1192</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1192'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1193'>
          <td align='right'>
            <a name='P1193'>1193</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate' id='C1193'>
              LoadVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1194'>
          <td align='right'>
            <a name='P1194'>1194</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable candidate' id='C1194'>
              DelVar candidate
            </span>
          </td>
        </tr>
        <tr id='P1195'>
          <td align='right'>
            <a name='P1195'>1195</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1195'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1196'>
          <td align='right'>
            <a name='P1196'>1196</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1196'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1197'>
          <td align='right'>
            <a name='P1197'>1197</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1197'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1198'>
          <td align='right'>
            <a name='P1198'>1198</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1198'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1199'>
          <td align='right'>
            <a name='P1199'>1199</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C1199'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P1200'>
          <td align='right'>
            <a name='P1200'>1200</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method transfer' id='C1200'>
              Frame transfer(election, candidate_from, candidate_to)
            </span>
          </td>
        </tr>
        <tr id='P1201'>
          <td align='right'>
            <a name='P1201'>1201</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(695)' id='C1201'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P1202'>
          <td align='right'>
            <a name='P1202'>1202</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1202'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1203'>
          <td align='right'>
            <a name='P1203'>1203</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "locks_can"' id='C1203'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1204'>
          <td align='right'>
            <a name='P1204'>1204</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1204'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1205'>
          <td align='right'>
            <a name='P1205'>1205</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate_from' id='C1205'>
              LoadVar candidate_from
            </span>
          </td>
        </tr>
        <tr id='P1206'>
          <td align='right'>
            <a name='P1206'>1206</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1206'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1207'>
          <td align='right'>
            <a name='P1207'>1207</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1207'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1208'>
          <td align='right'>
            <a name='P1208'>1208</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1208'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1209'>
          <td align='right'>
            <a name='P1209'>1209</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(695)' id='C1209'>
              Push PC(695)
            </span>
          </td>
        </tr>
        <tr id='P1210'>
          <td align='right'>
            <a name='P1210'>1210</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1210'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1211'>
          <td align='right'>
            <a name='P1211'>1211</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "locks_can"' id='C1211'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1212'>
          <td align='right'>
            <a name='P1212'>1212</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1212'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1213'>
          <td align='right'>
            <a name='P1213'>1213</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate_to' id='C1213'>
              LoadVar candidate_to
            </span>
          </td>
        </tr>
        <tr id='P1214'>
          <td align='right'>
            <a name='P1214'>1214</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1214'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1215'>
          <td align='right'>
            <a name='P1215'>1215</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1215'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1216'>
          <td align='right'>
            <a name='P1216'>1216</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1216'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1217'>
          <td align='right'>
            <a name='P1217'>1217</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1217'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1218'>
          <td align='right'>
            <a name='P1218'>1218</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant "candidates"' id='C1218'>
              Push "candidates"
            </span>
          </td>
        </tr>
        <tr id='P1219'>
          <td align='right'>
            <a name='P1219'>1219</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1219'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1220'>
          <td align='right'>
            <a name='P1220'>1220</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate_to' id='C1220'>
              LoadVar candidate_to
            </span>
          </td>
        </tr>
        <tr id='P1221'>
          <td align='right'>
            <a name='P1221'>1221</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1221'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1222'>
          <td align='right'>
            <a name='P1222'>1222</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push a copy of the top value on the stack' id='C1222'>
              Dup
            </span>
          </td>
        </tr>
        <tr id='P1223'>
          <td align='right'>
            <a name='P1223'>1223</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1223'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1224'>
          <td align='right'>
            <a name='P1224'>1224</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1224'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1225'>
          <td align='right'>
            <a name='P1225'>1225</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "candidates"' id='C1225'>
              Push "candidates"
            </span>
          </td>
        </tr>
        <tr id='P1226'>
          <td align='right'>
            <a name='P1226'>1226</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1226'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1227'>
          <td align='right'>
            <a name='P1227'>1227</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate_from' id='C1227'>
              LoadVar candidate_from
            </span>
          </td>
        </tr>
        <tr id='P1228'>
          <td align='right'>
            <a name='P1228'>1228</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1228'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1229'>
          <td align='right'>
            <a name='P1229'>1229</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1229'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1230'>
          <td align='right'>
            <a name='P1230'>1230</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying +' id='C1230'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1231'>
          <td align='right'>
            <a name='P1231'>1231</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and an address and store the value at the address' id='C1231'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1232'>
          <td align='right'>
            <a name='P1232'>1232</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1232'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1233'>
          <td align='right'>
            <a name='P1233'>1233</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "candidates"' id='C1233'>
              Push "candidates"
            </span>
          </td>
        </tr>
        <tr id='P1234'>
          <td align='right'>
            <a name='P1234'>1234</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1234'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1235'>
          <td align='right'>
            <a name='P1235'>1235</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate_from' id='C1235'>
              LoadVar candidate_from
            </span>
          </td>
        </tr>
        <tr id='P1236'>
          <td align='right'>
            <a name='P1236'>1236</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1236'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1237'>
          <td align='right'>
            <a name='P1237'>1237</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1237'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1238'>
          <td align='right'>
            <a name='P1238'>1238</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and an address and store the value at the address' id='C1238'>
              Store
            </span>
          </td>
        </tr>
        <tr id='P1239'>
          <td align='right'>
            <a name='P1239'>1239</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(714)' id='C1239'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P1240'>
          <td align='right'>
            <a name='P1240'>1240</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of election' id='C1240'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1241'>
          <td align='right'>
            <a name='P1241'>1241</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "locks_can"' id='C1241'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1242'>
          <td align='right'>
            <a name='P1242'>1242</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1242'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1243'>
          <td align='right'>
            <a name='P1243'>1243</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate_from' id='C1243'>
              LoadVar candidate_from
            </span>
          </td>
        </tr>
        <tr id='P1244'>
          <td align='right'>
            <a name='P1244'>1244</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable candidate_from' id='C1244'>
              DelVar candidate_from
            </span>
          </td>
        </tr>
        <tr id='P1245'>
          <td align='right'>
            <a name='P1245'>1245</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1245'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1246'>
          <td align='right'>
            <a name='P1246'>1246</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1246'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1247'>
          <td align='right'>
            <a name='P1247'>1247</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1247'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1248'>
          <td align='right'>
            <a name='P1248'>1248</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(714)' id='C1248'>
              Push PC(714)
            </span>
          </td>
        </tr>
        <tr id='P1249'>
          <td align='right'>
            <a name='P1249'>1249</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of election' id='C1249'>
              LoadVar election
            </span>
          </td>
        </tr>
        <tr id='P1250'>
          <td align='right'>
            <a name='P1250'>1250</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable election' id='C1250'>
              DelVar election
            </span>
          </td>
        </tr>
        <tr id='P1251'>
          <td align='right'>
            <a name='P1251'>1251</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant "locks_can"' id='C1251'>
              Push "locks_can"
            </span>
          </td>
        </tr>
        <tr id='P1252'>
          <td align='right'>
            <a name='P1252'>1252</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1252'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1253'>
          <td align='right'>
            <a name='P1253'>1253</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of candidate_to' id='C1253'>
              LoadVar candidate_to
            </span>
          </td>
        </tr>
        <tr id='P1254'>
          <td align='right'>
            <a name='P1254'>1254</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable candidate_to' id='C1254'>
              DelVar candidate_to
            </span>
          </td>
        </tr>
        <tr id='P1255'>
          <td align='right'>
            <a name='P1255'>1255</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1255'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1256'>
          <td align='right'>
            <a name='P1256'>1256</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1256'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1257'>
          <td align='right'>
            <a name='P1257'>1257</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1257'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1258'>
          <td align='right'>
            <a name='P1258'>1258</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1258'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1259'>
          <td align='right'>
            <a name='P1259'>1259</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1296' id='C1259'>
              Jump 1296
            </span>
          </td>
        </tr>
        <tr id='P1260'>
          <td align='right'>
            <a name='P1260'>1260</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method winner' id='C1260'>
              Frame winner(election)
            </span>
          </td>
        </tr>
        <tr id='P1261'>
          <td align='right'>
            <a name='P1261'>1261</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable election' id='C1261'>
              DelVar election
            </span>
          </td>
        </tr>
        <tr id='P1262'>
          <td align='right'>
            <a name='P1262'>1262</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C1262'>
              DelVar result
            </span>
          </td>
        </tr>
        <tr id='P1263'>
          <td align='right'>
            <a name='P1263'>1263</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant -1' id='C1263'>
              Push -1
            </span>
          </td>
        </tr>
        <tr id='P1264'>
          <td align='right'>
            <a name='P1264'>1264</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in high' id='C1264'>
              StoreVar high
            </span>
          </td>
        </tr>
        <tr id='P1265'>
          <td align='right'>
            <a name='P1265'>1265</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant -1' id='C1265'>
              Push -1
            </span>
          </td>
        </tr>
        <tr id='P1266'>
          <td align='right'>
            <a name='P1266'>1266</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in idx' id='C1266'>
              StoreVar idx
            </span>
          </td>
        </tr>
        <tr id='P1267'>
          <td align='right'>
            <a name='P1267'>1267</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable candidates' id='C1267'>
              Load election$candidates
            </span>
          </td>
        </tr>
        <tr id='P1268'>
          <td align='right'>
            <a name='P1268'>1268</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1268'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1269'>
          <td align='right'>
            <a name='P1269'>1269</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C1269'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P1270'>
          <td align='right'>
            <a name='P1270'>1270</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 1290 if the value is False' id='C1270'>
              JumpCond False 1290
            </span>
          </td>
        </tr>
        <tr id='P1271'>
          <td align='right'>
            <a name='P1271'>1271</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?election$candidates' id='C1271'>
              Push ?election$candidates
            </span>
          </td>
        </tr>
        <tr id='P1272'>
          <td align='right'>
            <a name='P1272'>1272</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C1272'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1273'>
          <td align='right'>
            <a name='P1273'>1273</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1273'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1274'>
          <td align='right'>
            <a name='P1274'>1274</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop an address and push the value at the address' id='C1274'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1275'>
          <td align='right'>
            <a name='P1275'>1275</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of high' id='C1275'>
              LoadVar high
            </span>
          </td>
        </tr>
        <tr id='P1276'>
          <td align='right'>
            <a name='P1276'>1276</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying >' id='C1276'>
              2-ary >
            </span>
          </td>
        </tr>
        <tr id='P1277'>
          <td align='right'>
            <a name='P1277'>1277</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1288 if the value is False' id='C1277'>
              JumpCond False 1288
            </span>
          </td>
        </tr>
        <tr id='P1278'>
          <td align='right'>
            <a name='P1278'>1278</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable high' id='C1278'>
              DelVar high
            </span>
          </td>
        </tr>
        <tr id='P1279'>
          <td align='right'>
            <a name='P1279'>1279</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable idx' id='C1279'>
              DelVar idx
            </span>
          </td>
        </tr>
        <tr id='P1280'>
          <td align='right'>
            <a name='P1280'>1280</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ?election$candidates' id='C1280'>
              Push ?election$candidates
            </span>
          </td>
        </tr>
        <tr id='P1281'>
          <td align='right'>
            <a name='P1281'>1281</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1281'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1282'>
          <td align='right'>
            <a name='P1282'>1282</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1282'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1283'>
          <td align='right'>
            <a name='P1283'>1283</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1283'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1284'>
          <td align='right'>
            <a name='P1284'>1284</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in high' id='C1284'>
              StoreVar high
            </span>
          </td>
        </tr>
        <tr id='P1285'>
          <td align='right'>
            <a name='P1285'>1285</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1285'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1286'>
          <td align='right'>
            <a name='P1286'>1286</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C1286'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1287'>
          <td align='right'>
            <a name='P1287'>1287</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in idx' id='C1287'>
              StoreVar idx
            </span>
          </td>
        </tr>
        <tr id='P1288'>
          <td align='right'>
            <a name='P1288'>1288</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable i' id='C1288'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1289'>
          <td align='right'>
            <a name='P1289'>1289</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1269' id='C1289'>
              Jump 1269
            </span>
          </td>
        </tr>
        <tr id='P1290'>
          <td align='right'>
            <a name='P1290'>1290</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable high' id='C1290'>
              DelVar high
            </span>
          </td>
        </tr>
        <tr id='P1291'>
          <td align='right'>
            <a name='P1291'>1291</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1291'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1292'>
          <td align='right'>
            <a name='P1292'>1292</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of idx' id='C1292'>
              LoadVar idx
            </span>
          </td>
        </tr>
        <tr id='P1293'>
          <td align='right'>
            <a name='P1293'>1293</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable idx' id='C1293'>
              DelVar idx
            </span>
          </td>
        </tr>
        <tr id='P1294'>
          <td align='right'>
            <a name='P1294'>1294</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in result' id='C1294'>
              StoreVar result
            </span>
          </td>
        </tr>
        <tr id='P1295'>
          <td align='right'>
            <a name='P1295'>1295</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1295'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1296'>
          <td align='right'>
            <a name='P1296'>1296</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1296'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1297'>
          <td align='right'>
            <a name='P1297'>1297</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable threads_executed' id='C1297'>
              Store threads_executed
            </span>
          </td>
        </tr>
        <tr id='P1298'>
          <td align='right'>
            <a name='P1298'>1298</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 4' id='C1298'>
              Push 4
            </span>
          </td>
        </tr>
        <tr id='P1299'>
          <td align='right'>
            <a name='P1299'>1299</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable number_of_spawned_threads' id='C1299'>
              Store number_of_spawned_threads
            </span>
          </td>
        </tr>
        <tr id='P1300'>
          <td align='right'>
            <a name='P1300'>1300</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 2' id='C1300'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P1301'>
          <td align='right'>
            <a name='P1301'>1301</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable NUM_CANDIDATES' id='C1301'>
              Store NUM_CANDIDATES
            </span>
          </td>
        </tr>
        <tr id='P1302'>
          <td align='right'>
            <a name='P1302'>1302</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 3' id='C1302'>
              Push 3
            </span>
          </td>
        </tr>
        <tr id='P1303'>
          <td align='right'>
            <a name='P1303'>1303</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable NUM_CITIZENS' id='C1303'>
              Store NUM_CITIZENS
            </span>
          </td>
        </tr>
        <tr id='P1304'>
          <td align='right'>
            <a name='P1304'>1304</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant [3, 0]' id='C1304'>
              Push [3, 0]
            </span>
          </td>
        </tr>
        <tr id='P1305'>
          <td align='right'>
            <a name='P1305'>1305</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable EXPECTED_VOTES' id='C1305'>
              Store EXPECTED_VOTES
            </span>
          </td>
        </tr>
        <tr id='P1306'>
          <td align='right'>
            <a name='P1306'>1306</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1306'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1307'>
          <td align='right'>
            <a name='P1307'>1307</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable WINNER' id='C1307'>
              Store WINNER
            </span>
          </td>
        </tr>
        <tr id='P1308'>
          <td align='right'>
            <a name='P1308'>1308</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(944)' id='C1308'>
              Push PC(944)
            </span>
          </td>
        </tr>
        <tr id='P1309'>
          <td align='right'>
            <a name='P1309'>1309</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1309'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1310'>
          <td align='right'>
            <a name='P1310'>1310</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable NUM_CANDIDATES' id='C1310'>
              Load NUM_CANDIDATES
            </span>
          </td>
        </tr>
        <tr id='P1311'>
          <td align='right'>
            <a name='P1311'>1311</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1311'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1312'>
          <td align='right'>
            <a name='P1312'>1312</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable NUM_CITIZENS' id='C1312'>
              Load NUM_CITIZENS
            </span>
          </td>
        </tr>
        <tr id='P1313'>
          <td align='right'>
            <a name='P1313'>1313</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1313'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1314'>
          <td align='right'>
            <a name='P1314'>1314</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1314'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1315'>
          <td align='right'>
            <a name='P1315'>1315</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store it in shared variable e' id='C1315'>
              Store e
            </span>
          </td>
        </tr>
        <tr id='P1316'>
          <td align='right'>
            <a name='P1316'>1316</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1455' id='C1316'>
              Jump 1455
            </span>
          </td>
        </tr>
        <tr id='P1317'>
          <td align='right'>
            <a name='P1317'>1317</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method complete' id='C1317'>
              Frame complete()
            </span>
          </td>
        </tr>
        <tr id='P1318'>
          <td align='right'>
            <a name='P1318'>1318</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1318'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P1319'>
          <td align='right'>
            <a name='P1319'>1319</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable threads_executed' id='C1319'>
              Load threads_executed
            </span>
          </td>
        </tr>
        <tr id='P1320'>
          <td align='right'>
            <a name='P1320'>1320</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 1' id='C1320'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1321'>
          <td align='right'>
            <a name='P1321'>1321</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying +' id='C1321'>
              2-ary +
            </span>
          </td>
        </tr>
        <tr id='P1322'>
          <td align='right'>
            <a name='P1322'>1322</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store it in shared variable threads_executed' id='C1322'>
              Store threads_executed
            </span>
          </td>
        </tr>
        <tr id='P1323'>
          <td align='right'>
            <a name='P1323'>1323</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1323'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1324'>
          <td align='right'>
            <a name='P1324'>1324</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1324'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1325'>
          <td align='right'>
            <a name='P1325'>1325</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1455' id='C1325'>
              Jump 1455
            </span>
          </td>
        </tr>
        <tr id='P1326'>
          <td align='right'>
            <a name='P1326'>1326</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method test_vote' id='C1326'>
              Frame test_vote(e, candidate_idx, citizen_idx)
            </span>
          </td>
        </tr>
        <tr id='P1327'>
          <td align='right'>
            <a name='P1327'>1327</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(980)' id='C1327'>
              Push PC(980)
            </span>
          </td>
        </tr>
        <tr id='P1328'>
          <td align='right'>
            <a name='P1328'>1328</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1328'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1329'>
          <td align='right'>
            <a name='P1329'>1329</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C1329'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P1330'>
          <td align='right'>
            <a name='P1330'>1330</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable e' id='C1330'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P1331'>
          <td align='right'>
            <a name='P1331'>1331</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1331'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1332'>
          <td align='right'>
            <a name='P1332'>1332</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of candidate_idx' id='C1332'>
              LoadVar candidate_idx
            </span>
          </td>
        </tr>
        <tr id='P1333'>
          <td align='right'>
            <a name='P1333'>1333</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable candidate_idx' id='C1333'>
              DelVar candidate_idx
            </span>
          </td>
        </tr>
        <tr id='P1334'>
          <td align='right'>
            <a name='P1334'>1334</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1334'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1335'>
          <td align='right'>
            <a name='P1335'>1335</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of citizen_idx' id='C1335'>
              LoadVar citizen_idx
            </span>
          </td>
        </tr>
        <tr id='P1336'>
          <td align='right'>
            <a name='P1336'>1336</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable citizen_idx' id='C1336'>
              DelVar citizen_idx
            </span>
          </td>
        </tr>
        <tr id='P1337'>
          <td align='right'>
            <a name='P1337'>1337</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1337'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1338'>
          <td align='right'>
            <a name='P1338'>1338</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1338'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1339'>
          <td align='right'>
            <a name='P1339'>1339</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1339'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1340'>
          <td align='right'>
            <a name='P1340'>1340</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(1317)' id='C1340'>
              Push PC(1317)
            </span>
          </td>
        </tr>
        <tr id='P1341'>
          <td align='right'>
            <a name='P1341'>1341</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ()' id='C1341'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1342'>
          <td align='right'>
            <a name='P1342'>1342</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1342'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1343'>
          <td align='right'>
            <a name='P1343'>1343</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1343'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1344'>
          <td align='right'>
            <a name='P1344'>1344</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1344'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1345'>
          <td align='right'>
            <a name='P1345'>1345</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='jump over method definition: set program counter to 1455' id='C1345'>
              Jump 1455
            </span>
          </td>
        </tr>
        <tr id='P1346'>
          <td align='right'>
            <a name='P1346'>1346</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='start of method test_withdraw' id='C1346'>
              Frame test_withdraw(e, first_candidate, second_candidate, citizen_idx)
            </span>
          </td>
        </tr>
        <tr id='P1347'>
          <td align='right'>
            <a name='P1347'>1347</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(980)' id='C1347'>
              Push PC(980)
            </span>
          </td>
        </tr>
        <tr id='P1348'>
          <td align='right'>
            <a name='P1348'>1348</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1348'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1349'>
          <td align='right'>
            <a name='P1349'>1349</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of e' id='C1349'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P1350'>
          <td align='right'>
            <a name='P1350'>1350</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1350'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1351'>
          <td align='right'>
            <a name='P1351'>1351</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of first_candidate' id='C1351'>
              LoadVar first_candidate
            </span>
          </td>
        </tr>
        <tr id='P1352'>
          <td align='right'>
            <a name='P1352'>1352</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable first_candidate' id='C1352'>
              DelVar first_candidate
            </span>
          </td>
        </tr>
        <tr id='P1353'>
          <td align='right'>
            <a name='P1353'>1353</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1353'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1354'>
          <td align='right'>
            <a name='P1354'>1354</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen_idx' id='C1354'>
              LoadVar citizen_idx
            </span>
          </td>
        </tr>
        <tr id='P1355'>
          <td align='right'>
            <a name='P1355'>1355</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1355'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1356'>
          <td align='right'>
            <a name='P1356'>1356</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1356'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1357'>
          <td align='right'>
            <a name='P1357'>1357</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1357'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1358'>
          <td align='right'>
            <a name='P1358'>1358</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(1063)' id='C1358'>
              Push PC(1063)
            </span>
          </td>
        </tr>
        <tr id='P1359'>
          <td align='right'>
            <a name='P1359'>1359</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1359'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1360'>
          <td align='right'>
            <a name='P1360'>1360</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C1360'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P1361'>
          <td align='right'>
            <a name='P1361'>1361</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1361'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1362'>
          <td align='right'>
            <a name='P1362'>1362</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen_idx' id='C1362'>
              LoadVar citizen_idx
            </span>
          </td>
        </tr>
        <tr id='P1363'>
          <td align='right'>
            <a name='P1363'>1363</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1363'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1364'>
          <td align='right'>
            <a name='P1364'>1364</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1364'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1365'>
          <td align='right'>
            <a name='P1365'>1365</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='discard the top value on the stack' id='C1365'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1366'>
          <td align='right'>
            <a name='P1366'>1366</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(980)' id='C1366'>
              Push PC(980)
            </span>
          </td>
        </tr>
        <tr id='P1367'>
          <td align='right'>
            <a name='P1367'>1367</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='building a tuple: push constant ()' id='C1367'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1368'>
          <td align='right'>
            <a name='P1368'>1368</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of e' id='C1368'>
              LoadVar e
            </span>
          </td>
        </tr>
        <tr id='P1369'>
          <td align='right'>
            <a name='P1369'>1369</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable e' id='C1369'>
              DelVar e
            </span>
          </td>
        </tr>
        <tr id='P1370'>
          <td align='right'>
            <a name='P1370'>1370</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1370'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1371'>
          <td align='right'>
            <a name='P1371'>1371</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of second_candidate' id='C1371'>
              LoadVar second_candidate
            </span>
          </td>
        </tr>
        <tr id='P1372'>
          <td align='right'>
            <a name='P1372'>1372</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable second_candidate' id='C1372'>
              DelVar second_candidate
            </span>
          </td>
        </tr>
        <tr id='P1373'>
          <td align='right'>
            <a name='P1373'>1373</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1373'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1374'>
          <td align='right'>
            <a name='P1374'>1374</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of citizen_idx' id='C1374'>
              LoadVar citizen_idx
            </span>
          </td>
        </tr>
        <tr id='P1375'>
          <td align='right'>
            <a name='P1375'>1375</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable citizen_idx' id='C1375'>
              DelVar citizen_idx
            </span>
          </td>
        </tr>
        <tr id='P1376'>
          <td align='right'>
            <a name='P1376'>1376</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1376'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1377'>
          <td align='right'>
            <a name='P1377'>1377</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1377'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1378'>
          <td align='right'>
            <a name='P1378'>1378</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1378'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1379'>
          <td align='right'>
            <a name='P1379'>1379</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1317)' id='C1379'>
              Push PC(1317)
            </span>
          </td>
        </tr>
        <tr id='P1380'>
          <td align='right'>
            <a name='P1380'>1380</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C1380'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1381'>
          <td align='right'>
            <a name='P1381'>1381</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1381'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1382'>
          <td align='right'>
            <a name='P1382'>1382</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1382'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1383'>
          <td align='right'>
            <a name='P1383'>1383</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1383'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1384'>
          <td align='right'>
            <a name='P1384'>1384</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='jump over method definition: set program counter to 1455' id='C1384'>
              Jump 1455
            </span>
          </td>
        </tr>
        <tr id='P1385'>
          <td align='right'>
            <a name='P1385'>1385</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='start of method end_test' id='C1385'>
              Frame end_test()
            </span>
          </td>
        </tr>
        <tr id='P1386'>
          <td align='right'>
            <a name='P1386'>1386</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1386'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P1387'>
          <td align='right'>
            <a name='P1387'>1387</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C1387'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P1388'>
          <td align='right'>
            <a name='P1388'>1388</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable threads_executed' id='C1388'>
              Load threads_executed
            </span>
          </td>
        </tr>
        <tr id='P1389'>
          <td align='right'>
            <a name='P1389'>1389</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push value of shared variable number_of_spawned_threads' id='C1389'>
              Load number_of_spawned_threads
            </span>
          </td>
        </tr>
        <tr id='P1390'>
          <td align='right'>
            <a name='P1390'>1390</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C1390'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1391'>
          <td align='right'>
            <a name='P1391'>1391</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and jump to 1393 if the value is False' id='C1391'>
              JumpCond False 1393
            </span>
          </td>
        </tr>
        <tr id='P1392'>
          <td align='right'>
            <a name='P1392'>1392</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1396' id='C1392'>
              Jump 1396
            </span>
          </td>
        </tr>
        <tr id='P1393'>
          <td align='right'>
            <a name='P1393'>1393</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C1393'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1394'>
          <td align='right'>
            <a name='P1394'>1394</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1394'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1395'>
          <td align='right'>
            <a name='P1395'>1395</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='set program counter to 1386' id='C1395'>
              Jump 1386
            </span>
          </td>
        </tr>
        <tr id='P1396'>
          <td align='right'>
            <a name='P1396'>1396</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C1396'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1397'>
          <td align='right'>
            <a name='P1397'>1397</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1200)' id='C1397'>
              Push PC(1200)
            </span>
          </td>
        </tr>
        <tr id='P1398'>
          <td align='right'>
            <a name='P1398'>1398</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1398'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1399'>
          <td align='right'>
            <a name='P1399'>1399</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?e' id='C1399'>
              Push ?e
            </span>
          </td>
        </tr>
        <tr id='P1400'>
          <td align='right'>
            <a name='P1400'>1400</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1400'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1401'>
          <td align='right'>
            <a name='P1401'>1401</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1401'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1402'>
          <td align='right'>
            <a name='P1402'>1402</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1402'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1403'>
          <td align='right'>
            <a name='P1403'>1403</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1403'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1404'>
          <td align='right'>
            <a name='P1404'>1404</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1404'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1405'>
          <td align='right'>
            <a name='P1405'>1405</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1405'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1406'>
          <td align='right'>
            <a name='P1406'>1406</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='discard the top value on the stack' id='C1406'>
              Pop
            </span>
          </td>
        </tr>
        <tr id='P1407'>
          <td align='right'>
            <a name='P1407'>1407</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {}' id='C1407'>
              Push {}
            </span>
          </td>
        </tr>
        <tr id='P1408'>
          <td align='right'>
            <a name='P1408'>1408</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1408'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1409'>
          <td align='right'>
            <a name='P1409'>1409</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C1409'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P1410'>
          <td align='right'>
            <a name='P1410'>1410</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable NUM_CANDIDATES' id='C1410'>
              Load NUM_CANDIDATES
            </span>
          </td>
        </tr>
        <tr id='P1411'>
          <td align='right'>
            <a name='P1411'>1411</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1411'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1412'>
          <td align='right'>
            <a name='P1412'>1412</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying -' id='C1412'>
              2-ary -
            </span>
          </td>
        </tr>
        <tr id='P1413'>
          <td align='right'>
            <a name='P1413'>1413</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying SetAdd' id='C1413'>
              2-ary SetAdd
            </span>
          </td>
        </tr>
        <tr id='P1414'>
          <td align='right'>
            <a name='P1414'>1414</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant 0' id='C1414'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1415'>
          <td align='right'>
            <a name='P1415'>1415</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='get next element and assign to i; push False or True depending on success' id='C1415'>
              Cut(i)
            </span>
          </td>
        </tr>
        <tr id='P1416'>
          <td align='right'>
            <a name='P1416'>1416</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='check if loop is done: pop a value and jump to 1439 if the value is False' id='C1416'>
              JumpCond False 1439
            </span>
          </td>
        </tr>
        <tr id='P1417'>
          <td align='right'>
            <a name='P1417'>1417</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1171)' id='C1417'>
              Push PC(1171)
            </span>
          </td>
        </tr>
        <tr id='P1418'>
          <td align='right'>
            <a name='P1418'>1418</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1418'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1419'>
          <td align='right'>
            <a name='P1419'>1419</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?e' id='C1419'>
              Push ?e
            </span>
          </td>
        </tr>
        <tr id='P1420'>
          <td align='right'>
            <a name='P1420'>1420</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1420'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1421'>
          <td align='right'>
            <a name='P1421'>1421</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push the value of i' id='C1421'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1422'>
          <td align='right'>
            <a name='P1422'>1422</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1422'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1423'>
          <td align='right'>
            <a name='P1423'>1423</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1423'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1424'>
          <td align='right'>
            <a name='P1424'>1424</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a value and store in received_votes' id='C1424'>
              StoreVar received_votes
            </span>
          </td>
        </tr>
        <tr id='P1425'>
          <td align='right'>
            <a name='P1425'>1425</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C1425'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P1426'>
          <td align='right'>
            <a name='P1426'>1426</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1426'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P1427'>
          <td align='right'>
            <a name='P1427'>1427</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?EXPECTED_VOTES' id='C1427'>
              Push ?EXPECTED_VOTES
            </span>
          </td>
        </tr>
        <tr id='P1428'>
          <td align='right'>
            <a name='P1428'>1428</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of i' id='C1428'>
              LoadVar i
            </span>
          </td>
        </tr>
        <tr id='P1429'>
          <td align='right'>
            <a name='P1429'>1429</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1429'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1430'>
          <td align='right'>
            <a name='P1430'>1430</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='combine the top two values on the stack into an address and push the result' id='C1430'>
              Address
            </span>
          </td>
        </tr>
        <tr id='P1431'>
          <td align='right'>
            <a name='P1431'>1431</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop an address and push the value at the address' id='C1431'>
              Load
            </span>
          </td>
        </tr>
        <tr id='P1432'>
          <td align='right'>
            <a name='P1432'>1432</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of received_votes' id='C1432'>
              LoadVar received_votes
            </span>
          </td>
        </tr>
        <tr id='P1433'>
          <td align='right'>
            <a name='P1433'>1433</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable received_votes' id='C1433'>
              DelVar received_votes
            </span>
          </td>
        </tr>
        <tr id='P1434'>
          <td align='right'>
            <a name='P1434'>1434</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ==' id='C1434'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1435'>
          <td align='right'>
            <a name='P1435'>1435</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a condition and raise exception if condition is false' id='C1435'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P1436'>
          <td align='right'>
            <a name='P1436'>1436</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement atomic counter of context' id='C1436'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1437'>
          <td align='right'>
            <a name='P1437'>1437</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement readonly counter of context' id='C1437'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1438'>
          <td align='right'>
            <a name='P1438'>1438</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='set program counter to 1415' id='C1438'>
              Jump 1415
            </span>
          </td>
        </tr>
        <tr id='P1439'>
          <td align='right'>
            <a name='P1439'>1439</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable i' id='C1439'>
              DelVar i
            </span>
          </td>
        </tr>
        <tr id='P1440'>
          <td align='right'>
            <a name='P1440'>1440</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant PC(1260)' id='C1440'>
              Push PC(1260)
            </span>
          </td>
        </tr>
        <tr id='P1441'>
          <td align='right'>
            <a name='P1441'>1441</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?e' id='C1441'>
              Push ?e
            </span>
          </td>
        </tr>
        <tr id='P1442'>
          <td align='right'>
            <a name='P1442'>1442</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a pc or dictionary f and an index i and push f(i)' id='C1442'>
              Apply
            </span>
          </td>
        </tr>
        <tr id='P1443'>
          <td align='right'>
            <a name='P1443'>1443</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop a value and store in winner_idx' id='C1443'>
              StoreVar winner_idx
            </span>
          </td>
        </tr>
        <tr id='P1444'>
          <td align='right'>
            <a name='P1444'>1444</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='increment readonly counter of context; thread cannot mutate shared variables if > 0' id='C1444'>
              ReadonlyInc
            </span>
          </td>
        </tr>
        <tr id='P1445'>
          <td align='right'>
            <a name='P1445'>1445</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='increment atomic counter of context; thread runs uninterrupted if larger than 0' id='C1445'>
              AtomicInc(lazy)
            </span>
          </td>
        </tr>
        <tr id='P1446'>
          <td align='right'>
            <a name='P1446'>1446</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push the value of winner_idx' id='C1446'>
              LoadVar winner_idx
            </span>
          </td>
        </tr>
        <tr id='P1447'>
          <td align='right'>
            <a name='P1447'>1447</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='delete method variable winner_idx' id='C1447'>
              DelVar winner_idx
            </span>
          </td>
        </tr>
        <tr id='P1448'>
          <td align='right'>
            <a name='P1448'>1448</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push value of shared variable WINNER' id='C1448'>
              Load WINNER
            </span>
          </td>
        </tr>
        <tr id='P1449'>
          <td align='right'>
            <a name='P1449'>1449</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='pop 2 values and push the result of applying ==' id='C1449'>
              2-ary ==
            </span>
          </td>
        </tr>
        <tr id='P1450'>
          <td align='right'>
            <a name='P1450'>1450</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop a condition and raise exception if condition is false' id='C1450'>
              Assert
            </span>
          </td>
        </tr>
        <tr id='P1451'>
          <td align='right'>
            <a name='P1451'>1451</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1451'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1452'>
          <td align='right'>
            <a name='P1452'>1452</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='decrement readonly counter of context' id='C1452'>
              ReadonlyDec
            </span>
          </td>
        </tr>
        <tr id='P1453'>
          <td align='right'>
            <a name='P1453'>1453</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='decrement atomic counter of context' id='C1453'>
              AtomicDec
            </span>
          </td>
        </tr>
        <tr id='P1454'>
          <td align='right'>
            <a name='P1454'>1454</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='restore caller method state and push result' id='C1454'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1455'>
          <td align='right'>
            <a name='P1455'>1455</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1326)' id='C1455'>
              Push PC(1326)
            </span>
          </td>
        </tr>
        <tr id='P1456'>
          <td align='right'>
            <a name='P1456'>1456</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1456'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1457'>
          <td align='right'>
            <a name='P1457'>1457</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?e' id='C1457'>
              Push ?e
            </span>
          </td>
        </tr>
        <tr id='P1458'>
          <td align='right'>
            <a name='P1458'>1458</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1458'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1459'>
          <td align='right'>
            <a name='P1459'>1459</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1459'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1460'>
          <td align='right'>
            <a name='P1460'>1460</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1460'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1461'>
          <td align='right'>
            <a name='P1461'>1461</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1461'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1462'>
          <td align='right'>
            <a name='P1462'>1462</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1462'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1463'>
          <td align='right'>
            <a name='P1463'>1463</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C1463'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1464'>
          <td align='right'>
            <a name='P1464'>1464</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1464'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1465'>
          <td align='right'>
            <a name='P1465'>1465</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1326)' id='C1465'>
              Push PC(1326)
            </span>
          </td>
        </tr>
        <tr id='P1466'>
          <td align='right'>
            <a name='P1466'>1466</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1466'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1467'>
          <td align='right'>
            <a name='P1467'>1467</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?e' id='C1467'>
              Push ?e
            </span>
          </td>
        </tr>
        <tr id='P1468'>
          <td align='right'>
            <a name='P1468'>1468</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1468'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1469'>
          <td align='right'>
            <a name='P1469'>1469</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1469'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1470'>
          <td align='right'>
            <a name='P1470'>1470</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1470'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1471'>
          <td align='right'>
            <a name='P1471'>1471</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1471'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1472'>
          <td align='right'>
            <a name='P1472'>1472</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1472'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1473'>
          <td align='right'>
            <a name='P1473'>1473</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C1473'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1474'>
          <td align='right'>
            <a name='P1474'>1474</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1474'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1475'>
          <td align='right'>
            <a name='P1475'>1475</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1326)' id='C1475'>
              Push PC(1326)
            </span>
          </td>
        </tr>
        <tr id='P1476'>
          <td align='right'>
            <a name='P1476'>1476</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1476'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1477'>
          <td align='right'>
            <a name='P1477'>1477</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?e' id='C1477'>
              Push ?e
            </span>
          </td>
        </tr>
        <tr id='P1478'>
          <td align='right'>
            <a name='P1478'>1478</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1478'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1479'>
          <td align='right'>
            <a name='P1479'>1479</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1479'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1480'>
          <td align='right'>
            <a name='P1480'>1480</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1480'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1481'>
          <td align='right'>
            <a name='P1481'>1481</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1481'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1482'>
          <td align='right'>
            <a name='P1482'>1482</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1482'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1483'>
          <td align='right'>
            <a name='P1483'>1483</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C1483'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1484'>
          <td align='right'>
            <a name='P1484'>1484</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1484'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1485'>
          <td align='right'>
            <a name='P1485'>1485</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1346)' id='C1485'>
              Push PC(1346)
            </span>
          </td>
        </tr>
        <tr id='P1486'>
          <td align='right'>
            <a name='P1486'>1486</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='building a tuple: push constant ()' id='C1486'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1487'>
          <td align='right'>
            <a name='P1487'>1487</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant ?e' id='C1487'>
              Push ?e
            </span>
          </td>
        </tr>
        <tr id='P1488'>
          <td align='right'>
            <a name='P1488'>1488</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1488'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1489'>
          <td align='right'>
            <a name='P1489'>1489</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 0' id='C1489'>
              Push 0
            </span>
          </td>
        </tr>
        <tr id='P1490'>
          <td align='right'>
            <a name='P1490'>1490</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1490'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1491'>
          <td align='right'>
            <a name='P1491'>1491</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 1' id='C1491'>
              Push 1
            </span>
          </td>
        </tr>
        <tr id='P1492'>
          <td align='right'>
            <a name='P1492'>1492</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1492'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1493'>
          <td align='right'>
            <a name='P1493'>1493</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant 2' id='C1493'>
              Push 2
            </span>
          </td>
        </tr>
        <tr id='P1494'>
          <td align='right'>
            <a name='P1494'>1494</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop 2 values and push the result of applying ListAdd' id='C1494'>
              2-ary ListAdd
            </span>
          </td>
        </tr>
        <tr id='P1495'>
          <td align='right'>
            <a name='P1495'>1495</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C1495'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1496'>
          <td align='right'>
            <a name='P1496'>1496</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1496'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1497'>
          <td align='right'>
            <a name='P1497'>1497</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant PC(1385)' id='C1497'>
              Push PC(1385)
            </span>
          </td>
        </tr>
        <tr id='P1498'>
          <td align='right'>
            <a name='P1498'>1498</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='push constant ()' id='C1498'>
              Push ()
            </span>
          </td>
        </tr>
        <tr id='P1499'>
          <td align='right'>
            <a name='P1499'>1499</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='push constant {:}' id='C1499'>
              Push {:}
            </span>
          </td>
        </tr>
        <tr id='P1500'>
          <td align='right'>
            <a name='P1500'>1500</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='pop thread-local state, argument, and pc and spawn a new thread' id='C1500'>
              Spawn
            </span>
          </td>
        </tr>
        <tr id='P1501'>
          <td align='right'>
            <a name='P1501'>1501</a>&nbsp;
          </td>
          <td style='background-color: white;'>
            <span title='restore caller method state and push result' id='C1501'>
              Return
            </span>
          </td>
        </tr>
        <tr id='P1502'>
          <td align='right'>
            <a name='P1502'>1502</a>&nbsp;
          </td>
          <td style='background-color: #E6E6E6;'>
            <span title='delete method variable result' id='C1502'>
              DelVar result
            </span>
          </td>
        </tr>
      </body>
    </table>
  </div>
</div>
    </td>
    <td valign='top'>
<table border='1'
  <thead>
    <tr>
      <th colspan='4'>Threads</th>
    </tr>
    <tr>
      <th>
        ID
      </th>
      <th>
        Status
      </th>
      <th>
        Stack Trace
      </th>
      <th>
        Stack Top
      </th>
    </tr>
  </thead>
  <tbody id='threadtable'>
    <tr id='thread0'>
      <td align='center'>
        T0
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo0' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread1'>
      <td align='center'>
        T1
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo1' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread2'>
      <td align='center'>
        T2
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo2' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread3'>
      <td align='center'>
        T3
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo3' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread4'>
      <td align='center'>
        T4
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo4' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
    <tr id='thread5'>
      <td align='center'>
        T5
      </td>
      <td align='center'>
        init
      </td>
      <td>
        <table id='threadinfo5' border='1'>
        </table>
      </td>
      <td align='left'>
      </td>
    </tr>
  </tbody>
</table>
    </td>
  </tr>
</table>
<script>
var nthreads = 6;
var nmegasteps = 6;
var vardir = [
  ['EXPECTED_VOTES'],
  ['NUM_CANDIDATES'],
  ['NUM_CITIZENS'],
  ['WINNER'],
  ['e', '"candidates"'],
  ['e', '"citizens"'],
  ['e', '"locks_can"'],
  ['e', '"locks_cit"'],
  ['number_of_spawned_threads'],
  ['threads_executed']
];
var state =
{
  "issue": "Safety violation",
  "macrosteps": [
    {
      "id": "1",
      "len": "0",
      "shared": { },
      "tid": "0",
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "6000017f8819",
        "fp": "1",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
          {
          "pc": "0",
          "xpc": "0",
          "method": "__init__()",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "atomic": "1",
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "method \"__init__\" with argument () set to []",
          "shared": { },
          "npc": "1",
          "fp": "1",
          "trace": [
            {
            "pc": "1",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "1",
          "pc": "0"
        },
        {
          "code": "Jump 52",
          "explain": "jump over method definition: set program counter to 52",
          "npc": "52",
          "push": [ ],
          "pc": "1"
        },
        {
          "code": "Push PC(55)",
          "explain": "push constant PC(55)",
          "npc": "53",
          "push": [ { "type": "pc", "value": "55" } ],
          "pc": "52"
        },
        {
          "code": "Builtin(list$tail)",
          "explain": "pop pc (PC(55)) and bind to built-in method list$tail",
          "npc": "54",
          "pop": "1",
          "push": [ ],
          "pc": "53"
        },
        {
          "code": "Jump 371",
          "explain": "jump over method definition: set program counter to 371",
          "npc": "371",
          "push": [ ],
          "pc": "54"
        },
        {
          "code": "Push PC(374)",
          "explain": "push constant PC(374)",
          "npc": "372",
          "push": [ { "type": "pc", "value": "374" } ],
          "pc": "371"
        },
        {
          "code": "Builtin(bag$multiplicity)",
          "explain": "pop pc (PC(374)) and bind to built-in method bag$multiplicity",
          "npc": "373",
          "pop": "1",
          "push": [ ],
          "pc": "372"
        },
        {
          "code": "Jump 392",
          "explain": "jump over method definition: set program counter to 392",
          "npc": "392",
          "push": [ ],
          "pc": "373"
        },
        {
          "code": "Push PC(395)",
          "explain": "push constant PC(395)",
          "npc": "393",
          "push": [ { "type": "pc", "value": "395" } ],
          "pc": "392"
        },
        {
          "code": "Builtin(bag$size)",
          "explain": "pop pc (PC(395)) and bind to built-in method bag$size",
          "npc": "394",
          "pop": "1",
          "push": [ ],
          "pc": "393"
        },
        {
          "code": "Jump 414",
          "explain": "jump over method definition: set program counter to 414",
          "npc": "414",
          "push": [ ],
          "pc": "394"
        },
        {
          "code": "Push PC(417)",
          "explain": "push constant PC(417)",
          "npc": "415",
          "push": [ { "type": "pc", "value": "417" } ],
          "pc": "414"
        },
        {
          "code": "Builtin(bag$bmin)",
          "explain": "pop pc (PC(417)) and bind to built-in method bag$bmin",
          "npc": "416",
          "pop": "1",
          "push": [ ],
          "pc": "415"
        },
        {
          "code": "Jump 433",
          "explain": "jump over method definition: set program counter to 433",
          "npc": "433",
          "push": [ ],
          "pc": "416"
        },
        {
          "code": "Push PC(436)",
          "explain": "push constant PC(436)",
          "npc": "434",
          "push": [ { "type": "pc", "value": "436" } ],
          "pc": "433"
        },
        {
          "code": "Builtin(bag$bmax)",
          "explain": "pop pc (PC(436)) and bind to built-in method bag$bmax",
          "npc": "435",
          "pop": "1",
          "push": [ ],
          "pc": "434"
        },
        {
          "code": "Jump 461",
          "explain": "jump over method definition: set program counter to 461",
          "npc": "461",
          "push": [ ],
          "pc": "435"
        },
        {
          "code": "Push PC(464)",
          "explain": "push constant PC(464)",
          "npc": "462",
          "push": [ { "type": "pc", "value": "464" } ],
          "pc": "461"
        },
        {
          "code": "Builtin(bag$add)",
          "explain": "pop pc (PC(464)) and bind to built-in method bag$add",
          "npc": "463",
          "pop": "1",
          "push": [ ],
          "pc": "462"
        },
        {
          "code": "Jump 490",
          "explain": "jump over method definition: set program counter to 490",
          "npc": "490",
          "push": [ ],
          "pc": "463"
        },
        {
          "code": "Push PC(493)",
          "explain": "push constant PC(493)",
          "npc": "491",
          "push": [ { "type": "pc", "value": "493" } ],
          "pc": "490"
        },
        {
          "code": "Builtin(bag$remove)",
          "explain": "pop pc (PC(493)) and bind to built-in method bag$remove",
          "npc": "492",
          "pop": "1",
          "push": [ ],
          "pc": "491"
        },
        {
          "code": "Jump 1296",
          "explain": "jump over method definition: set program counter to 1296",
          "npc": "1296",
          "push": [ ],
          "pc": "492"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1297",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1296"
        },
        {
          "code": "Store threads_executed",
          "explain": "pop value (0) and store into variable threads_executed",
          "shared": { "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1298",
          "pop": "1",
          "push": [ ],
          "pc": "1297"
        },
        {
          "code": "Push 4",
          "explain": "push constant 4",
          "npc": "1299",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "1298"
        },
        {
          "code": "Store number_of_spawned_threads",
          "explain": "pop value (4) and store into variable number_of_spawned_threads",
          "shared": { "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1300",
          "pop": "1",
          "push": [ ],
          "pc": "1299"
        },
        {
          "code": "Push 2",
          "explain": "push constant 2",
          "npc": "1301",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1300"
        },
        {
          "code": "Store NUM_CANDIDATES",
          "explain": "pop value (2) and store into variable NUM_CANDIDATES",
          "shared": { "NUM_CANDIDATES": { "type": "int", "value": "2" }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1302",
          "pop": "1",
          "push": [ ],
          "pc": "1301"
        },
        {
          "code": "Push 3",
          "explain": "push constant 3",
          "npc": "1303",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1302"
        },
        {
          "code": "Store NUM_CITIZENS",
          "explain": "pop value (3) and store into variable NUM_CITIZENS",
          "shared": { "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1304",
          "pop": "1",
          "push": [ ],
          "pc": "1303"
        },
        {
          "code": "Push [3, 0]",
          "explain": "push constant [3, 0]",
          "npc": "1305",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1304"
        },
        {
          "code": "Store EXPECTED_VOTES",
          "explain": "pop value ([3, 0]) and store into variable EXPECTED_VOTES",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1306",
          "pop": "1",
          "push": [ ],
          "pc": "1305"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1307",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1306"
        },
        {
          "code": "Store WINNER",
          "explain": "pop value (0) and store into variable WINNER",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1308",
          "pop": "1",
          "push": [ ],
          "pc": "1307"
        },
        {
          "code": "Push PC(944)",
          "explain": "push program counter constant 944 (\"Election\")",
          "npc": "1309",
          "push": [ { "type": "pc", "value": "944" } ],
          "pc": "1308"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1310",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1309"
        },
        {
          "code": "Load NUM_CANDIDATES",
          "explain": "push value (2) of variable NUM_CANDIDATES",
          "npc": "1311",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1310"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "npc": "1312",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1311"
        },
        {
          "code": "Load NUM_CITIZENS",
          "explain": "push value (3) of variable NUM_CITIZENS",
          "npc": "1313",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1312"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [2]); insert first value into the second; push result ([2, 3])",
          "npc": "1314",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "1313"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([2, 3]) and a program counter value (944: \"Election\") and call the method",
          "npc": "944",
          "fp": "3",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "944",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21042" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "1314"
        },
        {
          "code": "Frame Election(n, m)",
          "explain": "method \"Election\" with argument (n, m) set to [2, 3]",
          "npc": "945",
          "local": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "944"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "946",
          "local": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "945"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "947",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "946"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "948",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "947"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "949",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "948"
        },
        {
          "code": "Push PC(679)",
          "explain": "push program counter constant 679 (\"Lock\")",
          "npc": "950",
          "push": [ { "type": "pc", "value": "679" } ],
          "pc": "949"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "951",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "950"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (679: \"Lock\") and call the method",
          "npc": "679",
          "fp": "8",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "952",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "679",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 7
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15234" }, { "type": "list", "value": [] } ],
          "pc": "951"
        },
        {
          "code": "Frame Lock()",
          "explain": "method \"Lock\" with argument () set to []",
          "npc": "680",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "m" }, "value": { "type": "int", "value": "3" } }, { "key": { "type": "atom", "value": "n" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "679"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "681",
          "local": { },
          "push": [ ],
          "pc": "680"
        },
        {
          "code": "Push PC(672)",
          "explain": "push program counter constant 672 (\"BinSema\")",
          "npc": "682",
          "push": [ { "type": "pc", "value": "672" } ],
          "pc": "681"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "683",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "682"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (False) and a program counter value (672: \"BinSema\") and call the method",
          "npc": "672",
          "fp": "10",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "952",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 7
            },
            {
            "pc": "672",
            "xpc": "672",
            "method": "BinSema(False)",
            "calltype": "normal",
            "vars": { },
            "sp": 9
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "10946" }, { "type": "bool", "value": "False" } ],
          "pc": "683"
        },
        {
          "code": "Frame BinSema(acquired)",
          "explain": "method \"BinSema\" with argument acquired set to False",
          "npc": "673",
          "local": { "acquired": { "type": "bool", "value": "False" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "672"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "674",
          "local": { "acquired": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "673"
        },
        {
          "code": "LoadVar acquired",
          "explain": "push value (False) of variable \"acquired\"",
          "npc": "675",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "674"
        },
        {
          "code": "DelVar acquired",
          "explain": "delete method variable acquired",
          "npc": "676",
          "local": { },
          "push": [ ],
          "pc": "675"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "677",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "676"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "684",
          "fp": "8",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "952",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 7
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "677"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "685",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "684"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "952",
          "fp": "3",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "952",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "local": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "685"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, []); insert first value into the second; push result ([False])",
          "npc": "953",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "952"
        },
        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "npc": "954",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "953"
        },
        {
          "code": "2-ary *",
          "explain": "pop 2 values (2, [False]); create multiple copies of list; push result ([False, False])",
          "npc": "955",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ],
          "pc": "954"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([False, False], \"locks_can\", {:}); add key/value pair to dictionary; push result ({ \"locks_can\": [False, False] })",
          "npc": "956",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "955"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "957",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "956"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "958",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "957"
        },
        {
          "code": "Push PC(679)",
          "explain": "push program counter constant 679 (\"Lock\")",
          "npc": "959",
          "push": [ { "type": "pc", "value": "679" } ],
          "pc": "958"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "960",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "959"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (679: \"Lock\") and call the method",
          "npc": "679",
          "fp": "8",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "679",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 7
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15378" }, { "type": "list", "value": [] } ],
          "pc": "960"
        },
        {
          "code": "Frame Lock()",
          "explain": "method \"Lock\" with argument () set to []",
          "npc": "680",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "m" }, "value": { "type": "int", "value": "3" } }, { "key": { "type": "atom", "value": "n" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "679"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "681",
          "local": { },
          "push": [ ],
          "pc": "680"
        },
        {
          "code": "Push PC(672)",
          "explain": "push program counter constant 672 (\"BinSema\")",
          "npc": "682",
          "push": [ { "type": "pc", "value": "672" } ],
          "pc": "681"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "683",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "682"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (False) and a program counter value (672: \"BinSema\") and call the method",
          "npc": "672",
          "fp": "10",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 7
            },
            {
            "pc": "672",
            "xpc": "672",
            "method": "BinSema(False)",
            "calltype": "normal",
            "vars": { },
            "sp": 9
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "10946" }, { "type": "bool", "value": "False" } ],
          "pc": "683"
        },
        {
          "code": "Frame BinSema(acquired)",
          "explain": "method \"BinSema\" with argument acquired set to False",
          "npc": "673",
          "local": { "acquired": { "type": "bool", "value": "False" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "672"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "674",
          "local": { "acquired": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "673"
        },
        {
          "code": "LoadVar acquired",
          "explain": "push value (False) of variable \"acquired\"",
          "npc": "675",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "674"
        },
        {
          "code": "DelVar acquired",
          "explain": "delete method variable acquired",
          "npc": "676",
          "local": { },
          "push": [ ],
          "pc": "675"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "677",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "676"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "684",
          "fp": "8",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 7
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "677"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "685",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "684"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "961",
          "fp": "3",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "local": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "685"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, []); insert first value into the second; push result ([False])",
          "npc": "962",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "961"
        },
        {
          "code": "LoadVar m",
          "explain": "push value (3) of variable \"m\"",
          "npc": "963",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "962"
        },
        {
          "code": "2-ary *",
          "explain": "pop 2 values (3, [False]); create multiple copies of list; push result ([False, False, False])",
          "npc": "964",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ],
          "pc": "963"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([False, False, False], \"locks_cit\", { \"locks_can\": [False, False] }); add key/value pair to dictionary; push result ({ \"locks_can\": [False, False], \"locks_cit\": [False, False, False] })",
          "npc": "965",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "964"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "966",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "965"
        },
        {
          "code": "Push [0,]",
          "explain": "push constant [0,]",
          "npc": "967",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "966"
        },
        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "npc": "968",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "967"
        },
        {
          "code": "DelVar n",
          "explain": "delete method variable n",
          "npc": "969",
          "local": { "m": { "type": "int", "value": "3" } },
          "push": [ ],
          "pc": "968"
        },
        {
          "code": "2-ary *",
          "explain": "pop 2 values (2, [0]); create multiple copies of list; push result ([0, 0])",
          "npc": "970",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "969"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([0, 0], \"candidates\", { \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }); add key/value pair to dictionary; push result ({ \"candidates\": [0, 0], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] })",
          "npc": "971",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "970"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "972",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "971"
        },
        {
          "code": "Push [{ \"voted\":False, \"voted_for\":-1 },]",
          "explain": "push constant [{ \"voted\":False, \"voted_for\":-1 },]",
          "npc": "973",
          "push": [ { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } ],
          "pc": "972"
        },
        {
          "code": "LoadVar m",
          "explain": "push value (3) of variable \"m\"",
          "npc": "974",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "973"
        },
        {
          "code": "DelVar m",
          "explain": "delete method variable m",
          "npc": "975",
          "local": { },
          "push": [ ],
          "pc": "974"
        },
        {
          "code": "2-ary *",
          "explain": "pop 2 values (3, [{ \"voted\": False, \"voted_for\": -1 }]); create multiple copies of list; push result ([{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }])",
          "npc": "976",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } ],
          "pc": "975"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"citizens\", { \"candidates\": [0, 0], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }); add key/value pair to dictionary; push result ({ \"candidates\": [0, 0], \"citizens\": [{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] })",
          "npc": "977",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "976"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({ \"candidates\": [0, 0], \"citizens\": [{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }) and store locally in variable \"result\"",
          "npc": "978",
          "local": { "result": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "977"
        },
        {
          "code": "Return",
          "explain": "push result ({ \"candidates\": [0, 0], \"citizens\": [{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }) and restore method variables",
          "npc": "1315",
          "fp": "1",
          "trace": [
            {
            "pc": "1315",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "978"
        },
        {
          "code": "Store e",
          "explain": "pop value ({ \"candidates\": [0, 0], \"citizens\": [{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }) and store into variable e",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1316",
          "pop": "1",
          "push": [ ],
          "pc": "1315"
        },
        {
          "code": "Jump 1455",
          "explain": "jump over method definition: set program counter to 1455",
          "npc": "1455",
          "push": [ ],
          "pc": "1316"
        },
        {
          "code": "Push PC(1326)",
          "explain": "push program counter constant 1326 (\"test_vote\")",
          "npc": "1456",
          "push": [ { "type": "pc", "value": "1326" } ],
          "pc": "1455"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1457",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1456"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1458",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1457"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1459",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1458"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1460",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1459"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e]); insert first value into the second; push result ([?e, 0])",
          "npc": "1461",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1460"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1462",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1461"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e, 0]); insert first value into the second; push result ([?e, 0, 0])",
          "npc": "1463",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1462"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1464",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1463"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([?e, 0, 0]), and program counter (1326: \"test_vote\"), and spawn thread",
          "npc": "1465",
          "pop": "3",
          "push": [ ],
          "contexts": "2",
          "pc": "1464"
        },
        {
          "code": "Push PC(1326)",
          "explain": "push program counter constant 1326 (\"test_vote\")",
          "npc": "1466",
          "push": [ { "type": "pc", "value": "1326" } ],
          "pc": "1465"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1467",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1466"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1468",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1467"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1469",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1468"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1470",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1469"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1471",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1470"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1472",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1471"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e, 1]); insert first value into the second; push result ([?e, 1, 1])",
          "npc": "1473",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1472"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1474",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1473"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([?e, 1, 1]), and program counter (1326: \"test_vote\"), and spawn thread",
          "npc": "1475",
          "pop": "3",
          "push": [ ],
          "contexts": "3",
          "pc": "1474"
        },
        {
          "code": "Push PC(1326)",
          "explain": "push program counter constant 1326 (\"test_vote\")",
          "npc": "1476",
          "push": [ { "type": "pc", "value": "1326" } ],
          "pc": "1475"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1477",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1476"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1478",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1477"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1479",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1478"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1480",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1479"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1481",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1480"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1482",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1481"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e, 1]); insert first value into the second; push result ([?e, 1, 1])",
          "npc": "1483",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1482"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1484",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1483"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([?e, 1, 1]), and program counter (1326: \"test_vote\"), and spawn thread",
          "npc": "1485",
          "pop": "3",
          "push": [ ],
          "contexts": "3",
          "pc": "1484"
        },
        {
          "code": "Push PC(1346)",
          "explain": "push program counter constant 1346 (\"test_withdraw\")",
          "npc": "1486",
          "push": [ { "type": "pc", "value": "1346" } ],
          "pc": "1485"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1487",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1486"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1488",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1487"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1489",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1488"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1490",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1489"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e]); insert first value into the second; push result ([?e, 0])",
          "npc": "1491",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1490"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1492",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1491"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e, 0]); insert first value into the second; push result ([?e, 0, 1])",
          "npc": "1493",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1492"
        },
        {
          "code": "Push 2",
          "explain": "push constant 2",
          "npc": "1494",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1493"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [?e, 0, 1]); insert first value into the second; push result ([?e, 0, 1, 2])",
          "npc": "1495",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1494"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1496",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1495"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([?e, 0, 1, 2]), and program counter (1346: \"test_withdraw\"), and spawn thread",
          "npc": "1497",
          "pop": "3",
          "push": [ ],
          "contexts": "4",
          "pc": "1496"
        },
        {
          "code": "Push PC(1385)",
          "explain": "push program counter constant 1385 (\"end_test\")",
          "npc": "1498",
          "push": [ { "type": "pc", "value": "1385" } ],
          "pc": "1497"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "1499",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1498"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1500",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1499"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([]), and program counter (1385: \"end_test\"), and spawn thread",
          "npc": "1501",
          "pop": "3",
          "push": [ ],
          "contexts": "5",
          "pc": "1500"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1501",
          "local": { },
          "mode": "terminated",
          "pop": "1",
          "push": [ ],
          "pc": "1501"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d18999": "1",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140d18999",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1346",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }],
          "trace": [
            {
            "pc": "1346",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140d18999",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1346",
        "sp": "1",
        "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }],
        "trace": [
          {
          "pc": "1346",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame test_withdraw(e, first_candidate, second_candidate, citizen_idx)",
          "explain": "method \"test_withdraw\" with argument (e, first_candidate, second_candidate, citizen_idx) set to [?e, 0, 1, 2]",
          "npc": "1347",
          "fp": "1",
          "trace": [
            {
            "pc": "1347",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "first_candidate": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            }
          ],
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "first_candidate": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "4",
          "pc": "1346"
        },
        {
          "code": "Push PC(980)",
          "explain": "push program counter constant 980 (\"vote\")",
          "npc": "1348",
          "push": [ { "type": "pc", "value": "980" } ],
          "pc": "1347"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1349",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1348"
        },
        {
          "code": "LoadVar e",
          "explain": "push value (?e) of variable \"e\"",
          "npc": "1350",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1349"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1351",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1350"
        },
        {
          "code": "LoadVar first_candidate",
          "explain": "push value (0) of variable \"first_candidate\"",
          "npc": "1352",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1351"
        },
        {
          "code": "DelVar first_candidate",
          "explain": "delete method variable first_candidate",
          "npc": "1353",
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "1352"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e]); insert first value into the second; push result ([?e, 0])",
          "npc": "1354",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1353"
        },
        {
          "code": "LoadVar citizen_idx",
          "explain": "push value (2) of variable \"citizen_idx\"",
          "npc": "1355",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1354"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [?e, 0]); insert first value into the second; push result ([?e, 0, 2])",
          "npc": "1356",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1355"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 0, 2]) and a program counter value (980: \"vote\") and call the method",
          "npc": "980",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "980",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21714" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1356"
        },
        {
          "code": "Frame vote(election, candidate, citizen)",
          "explain": "method \"vote\" with argument (election, candidate, citizen) set to [?e, 0, 2]",
          "npc": "981",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "980"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "982",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "981"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "983",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "982"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "984",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "983"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "985",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "984"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "986",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "985"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "987",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "986"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "988",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "987"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15826" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "988"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140e18af9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140e18af9",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "10",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140e18af9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "15826" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "989",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "990",
          "pop": "1",
          "push": [ ],
          "pc": "989"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "991",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "990"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "992",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "991"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "993",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "992"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "993"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "995",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "994"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "996",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "995"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15954" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "996"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140918799": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140918799",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "21",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140918799",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "15954" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "997",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "998",
          "pop": "1",
          "push": [ ],
          "pc": "997"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "999",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "998"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1000",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "999"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1001",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1000"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1002",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1001"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1003",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1002"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1004",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1003"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted\"])",
          "npc": "1005",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1004"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140f19569": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140f19569",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1005",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1005",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "56",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140f19569",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1005",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }],
        "trace": [
          {
          "pc": "1005",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][2][\"voted\"]) and push value (False)",
          "npc": "1006",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1006",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "contexts": "4",
          "pc": "1005"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1007",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1006"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (False, False); check if both values are the same; push result (True)",
          "npc": "1008",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1007"
        },
        {
          "code": "JumpCond False 1039",
          "explain": "pop value (True), compare to False, and jump to 1039 if the same",
          "npc": "1009",
          "pop": "1",
          "push": [ ],
          "pc": "1008"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1010",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1009"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1011",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1010"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1012",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1011"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1013",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1012"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][0])",
          "npc": "1014",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1013"
        },
        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "npc": "1015",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1014"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140f1b7e9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140f1b7e9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1015",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1015",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "77",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140f1b7e9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1015",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }],
        "trace": [
          {
          "pc": "1015",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][0]) and push value (0)",
          "npc": "1016",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1016",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "contexts": "4",
          "pc": "1015"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1017",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1016"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "npc": "1018",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1017"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "14101c339": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "14101c339",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1018",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1018",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "161",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "14101c339",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1018",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" }],
        "trace": [
          {
          "pc": "1018",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?e[\"candidates\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1019",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1019",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1018"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1020",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1019"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1021",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1020"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1022",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1021"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1023",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1022"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1024",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1023"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1025",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1024"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted\"])",
          "npc": "1026",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1025"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1027",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1026"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140e1acd9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140e1acd9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1027",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1027",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "197",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140e1acd9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1027",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
        "trace": [
          {
          "pc": "1027",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"citizens\"][2][\"voted\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1028",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1028",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1027"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1029",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1028"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1030",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1029"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1031",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1030"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1032",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1031"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1033",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1032"
        },
        {
          "code": "Push \"voted_for\"",
          "explain": "push constant \"voted_for\"",
          "npc": "1034",
          "push": [ { "type": "atom", "value": "voted_for" } ],
          "pc": "1033"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted_for\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted_for\"])",
          "npc": "1035",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] } ],
          "pc": "1034"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1036",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1035"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140e2a359": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140e2a359",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1036",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "0" }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1036",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "329",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140e2a359",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1036",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "0" }],
        "trace": [
          {
          "pc": "1036",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (0) and address (?e[\"citizens\"][2][\"voted_for\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1037",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1037",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1036"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1038",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1037"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (True) and store locally in variable \"result\"",
          "npc": "1039",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "1038"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1040",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1039"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1041",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1040"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "1042",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "1041"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1043",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1042"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1044",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1043"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1045",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1044"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1046",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1045"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1047",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1046"
        },
        {
          "code": "DelVar citizen",
          "explain": "delete method variable citizen",
          "npc": "1048",
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1047"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "1049",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1048"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16802" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1049"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140d1c0b9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140d1c0b9",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "381",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140d1c0b9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "16802" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1050",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1051",
          "pop": "1",
          "push": [ ],
          "pc": "1050"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1052",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1051"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1053",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1052"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1054",
          "local": { "candidate": { "type": "int", "value": "0" }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1053"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1055",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1054"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1056",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1055"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1057",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1056"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1058",
          "local": { "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1057"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1059",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1058"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16962" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1059"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140d34089": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140d34089",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "541",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140d34089",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21714" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "16962" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1060",
          "fp": "3",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1061",
          "pop": "1",
          "push": [ ],
          "pc": "1060"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "1357",
          "fp": "1",
          "trace": [
            {
            "pc": "1357",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            }
          ],
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1061"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (False)",
          "npc": "1358",
          "pop": "1",
          "push": [ ],
          "pc": "1357"
        },
        {
          "code": "Push PC(1063)",
          "explain": "push program counter constant 1063 (\"withdraw\")",
          "npc": "1359",
          "push": [ { "type": "pc", "value": "1063" } ],
          "pc": "1358"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1360",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1359"
        },
        {
          "code": "LoadVar e",
          "explain": "push value (?e) of variable \"e\"",
          "npc": "1361",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1360"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1362",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1361"
        },
        {
          "code": "LoadVar citizen_idx",
          "explain": "push value (2) of variable \"citizen_idx\"",
          "npc": "1363",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1362"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [?e]); insert first value into the second; push result ([?e, 2])",
          "npc": "1364",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "2" } ] } ],
          "pc": "1363"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 2]) and a program counter value (1063: \"withdraw\") and call the method",
          "npc": "1063",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1063",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21842" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "2" } ] } ],
          "pc": "1364"
        },
        {
          "code": "Frame withdraw(election, citizen)",
          "explain": "method \"withdraw\" with argument (election, citizen) set to [?e, 2]",
          "npc": "1064",
          "local": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1063"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1065",
          "local": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1064"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "1066",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "1065"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1067",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1066"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1068",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1067"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1069",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1068"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1070",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1069"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "1071",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1070"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1072",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "17154" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1071"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140c1cbb9": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140c1cbb9",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1072",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "655",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140c1cbb9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "17154" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1072",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1072",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1072",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1073",
          "pop": "1",
          "push": [ ],
          "pc": "1072"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1074",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1073"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1075",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1074"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1076",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1075"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1077",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1076"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1078",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1077"
        },
        {
          "code": "Push \"voted_for\"",
          "explain": "push constant \"voted_for\"",
          "npc": "1079",
          "push": [ { "type": "atom", "value": "voted_for" } ],
          "pc": "1078"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted_for\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted_for\"])",
          "npc": "1080",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] } ],
          "pc": "1079"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140e3a6b9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140e3a6b9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1080",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1080",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "766",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140e3a6b9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1080",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }],
        "trace": [
          {
          "pc": "1080",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][2][\"voted_for\"]) and push value (0)",
          "npc": "1081",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1081",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "contexts": "4",
          "pc": "1080"
        },
        {
          "code": "StoreVar candidate",
          "explain": "pop value (0) and store locally in variable \"candidate\"",
          "npc": "1082",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "1081"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1083",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1082"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1084",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1083"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1085",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1084"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1086",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1085"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1087",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1086"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "1088",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1087"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1089",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "17426" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1088"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140923d99": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140923d99",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1089",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "976",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140923d99",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "17426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1089",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1089",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1089",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1090",
          "pop": "1",
          "push": [ ],
          "pc": "1089"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "1091",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "1090"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1092",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1091"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1093",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1092"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1094",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1093"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1095",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1094"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1096",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1095"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1097",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "17554" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1096"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "14092f239": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "14092f239",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1097",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "1094",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "14092f239",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "17554" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1097",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1097",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1097",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1098",
          "pop": "1",
          "push": [ ],
          "pc": "1097"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "1099",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "1098"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1100",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1099"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1101",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1100"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1102",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1101"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1103",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1102"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "1104",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1103"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1105",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "17682" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1104"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140949e29": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140949e29",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1105",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "1386",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140949e29",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "17682" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1105",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1105",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1105",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1106",
          "pop": "1",
          "push": [ ],
          "pc": "1105"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1107",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1106"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1108",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1107"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1109",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1108"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1110",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1109"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1111",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1110"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1112",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1111"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted\"])",
          "npc": "1113",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1112"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140c31299": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140c31299",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1113",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1113",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "1643",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140c31299",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1113",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }],
        "trace": [
          {
          "pc": "1113",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][2][\"voted\"]) and push value (True)",
          "npc": "1114",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1114",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "contexts": "4",
          "pc": "1113"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1115",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1114"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (True, True); check if both values are the same; push result (True)",
          "npc": "1116",
          "pop": "1",
          "push": [ ],
          "pc": "1115"
        },
        {
          "code": "JumpCond False 1147",
          "explain": "pop value (True), compare to False, and jump to 1147 if the same",
          "npc": "1117",
          "pop": "1",
          "push": [ ],
          "pc": "1116"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1118",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1117"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1119",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1118"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1120",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1119"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1121",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1120"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][0])",
          "npc": "1122",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1121"
        },
        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "npc": "1123",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1122"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140b18839": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140b18839",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1123",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1123",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "1955",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140b18839",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1123",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }],
        "trace": [
          {
          "pc": "1123",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][0]) and push value (1)",
          "npc": "1124",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1124",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "contexts": "4",
          "pc": "1123"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1125",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1124"
        },
        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 1); the second integer minus the first; push result (0)",
          "npc": "1126",
          "pop": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1125"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140b30089": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140b30089",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1126",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "0" }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1126",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "2251",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140b30089",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1126",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "0" }],
        "trace": [
          {
          "pc": "1126",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (0) and address (?e[\"candidates\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1127",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1127",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1126"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1128",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1127"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1129",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1128"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1130",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1129"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1131",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1130"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1132",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1131"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1133",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1132"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted\"])",
          "npc": "1134",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1133"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1135",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1134"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "141031099": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141031099",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1135",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "False" }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1135",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "2493",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "141031099",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1135",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "False" }],
        "trace": [
          {
          "pc": "1135",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"citizens\"][2][\"voted\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1136",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1136",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1135"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1137",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1136"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1138",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1137"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1139",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1138"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1140",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1139"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1141",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1140"
        },
        {
          "code": "Push \"voted_for\"",
          "explain": "push constant \"voted_for\"",
          "npc": "1142",
          "push": [ { "type": "atom", "value": "voted_for" } ],
          "pc": "1141"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted_for\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted_for\"])",
          "npc": "1143",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] } ],
          "pc": "1142"
        },
        {
          "code": "Push -1",
          "explain": "push constant -1",
          "npc": "1144",
          "push": [ { "type": "int", "value": "-1" } ],
          "pc": "1143"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140b4dae9": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140b4dae9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1144",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "-1" }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1144",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3042",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140b4dae9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1144",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "-1" }],
        "trace": [
          {
          "pc": "1144",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (-1) and address (?e[\"citizens\"][2][\"voted_for\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1145",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1145",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1144"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1146",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1145"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (True) and store locally in variable \"result\"",
          "npc": "1147",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "1146"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1148",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1147"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1149",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1148"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "1150",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "1149"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1151",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1150"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1152",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1151"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1153",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1152"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1154",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1153"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1155",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1154"
        },
        {
          "code": "DelVar citizen",
          "explain": "delete method variable citizen",
          "npc": "1156",
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1155"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "1157",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1156"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1158",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "18530" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1157"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140f45fa9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140f45fa9",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1158",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3228",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140f45fa9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "18530" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1158",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1158",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1158",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1159",
          "pop": "1",
          "push": [ ],
          "pc": "1158"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1160",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1159"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1161",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1160"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1162",
          "local": { "candidate": { "type": "int", "value": "0" }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1161"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1163",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1162"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1164",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1163"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1165",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1164"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1166",
          "local": { "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1165"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1167",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1166"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1168",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "18690" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1167"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140d549e9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140d549e9",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1168",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3770",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140d549e9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21842" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "18690" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1168",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1168",
          "fp": "3",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1168",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1169",
          "pop": "1",
          "push": [ ],
          "pc": "1168"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "1365",
          "fp": "1",
          "trace": [
            {
            "pc": "1365",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            }
          ],
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1169"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (False)",
          "npc": "1366",
          "pop": "1",
          "push": [ ],
          "pc": "1365"
        },
        {
          "code": "Push PC(980)",
          "explain": "push program counter constant 980 (\"vote\")",
          "npc": "1367",
          "push": [ { "type": "pc", "value": "980" } ],
          "pc": "1366"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1368",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1367"
        },
        {
          "code": "LoadVar e",
          "explain": "push value (?e) of variable \"e\"",
          "npc": "1369",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1368"
        },
        {
          "code": "DelVar e",
          "explain": "delete method variable e",
          "npc": "1370",
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "1369"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1371",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1370"
        },
        {
          "code": "LoadVar second_candidate",
          "explain": "push value (1) of variable \"second_candidate\"",
          "npc": "1372",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1371"
        },
        {
          "code": "DelVar second_candidate",
          "explain": "delete method variable second_candidate",
          "npc": "1373",
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1372"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1374",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1373"
        },
        {
          "code": "LoadVar citizen_idx",
          "explain": "push value (2) of variable \"citizen_idx\"",
          "npc": "1375",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1374"
        },
        {
          "code": "DelVar citizen_idx",
          "explain": "delete method variable citizen_idx",
          "npc": "1376",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1375"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [?e, 1]); insert first value into the second; push result ([?e, 1, 2])",
          "npc": "1377",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1376"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 1, 2]) and a program counter value (980: \"vote\") and call the method",
          "npc": "980",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "980",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "22050" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1377"
        },
        {
          "code": "Frame vote(election, candidate, citizen)",
          "explain": "method \"vote\" with argument (election, candidate, citizen) set to [?e, 1, 2]",
          "npc": "981",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "980"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "982",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "981"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "983",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "982"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "984",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "983"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "985",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "984"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "986",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "985"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "987",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "986"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "988",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "987"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15826" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "988"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140e62519": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140e62519",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3999",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140e62519",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "15826" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "989",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "990",
          "pop": "1",
          "push": [ ],
          "pc": "989"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "991",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "990"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "992",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "991"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "993",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "992"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "993"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "995",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "994"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "996",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "995"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15954" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "996"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140c5c019": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140c5c019",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "4261",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140c5c019",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "15954" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "997",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "998",
          "pop": "1",
          "push": [ ],
          "pc": "997"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "999",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "998"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1000",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "999"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1001",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1000"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1002",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1001"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1003",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1002"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1004",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1003"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted\"])",
          "npc": "1005",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1004"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140990629": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140990629",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1005",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1005",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "4775",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140990629",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1005",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }],
        "trace": [
          {
          "pc": "1005",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][2][\"voted\"]) and push value (False)",
          "npc": "1006",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1006",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "contexts": "4",
          "pc": "1005"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1007",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1006"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (False, False); check if both values are the same; push result (True)",
          "npc": "1008",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1007"
        },
        {
          "code": "JumpCond False 1039",
          "explain": "pop value (True), compare to False, and jump to 1039 if the same",
          "npc": "1009",
          "pop": "1",
          "push": [ ],
          "pc": "1008"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1010",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1009"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1011",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1010"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1012",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1011"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1013",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1012"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][1])",
          "npc": "1014",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1013"
        },
        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "npc": "1015",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1014"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140a6f019": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140a6f019",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1015",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1015",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "5352",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140a6f019",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1015",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }],
        "trace": [
          {
          "pc": "1015",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][1]) and push value (0)",
          "npc": "1016",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1016",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "contexts": "4",
          "pc": "1015"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1017",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1016"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "npc": "1018",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1017"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140e72ae9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140e72ae9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1018",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1018",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "5765",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140e72ae9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1018",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "1" }],
        "trace": [
          {
          "pc": "1018",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?e[\"candidates\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1019",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1019",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1018"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1020",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1019"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1021",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1020"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1022",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1021"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1023",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1022"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1024",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1023"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1025",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1024"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted\"])",
          "npc": "1026",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1025"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1027",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1026"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140f69bb9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140f69bb9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1027",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1027",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "6140",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140f69bb9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1027",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
        "trace": [
          {
          "pc": "1027",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"citizens\"][2][\"voted\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1028",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1028",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1027"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1029",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1028"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1030",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1029"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1031",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1030"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1032",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1031"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1033",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1032"
        },
        {
          "code": "Push \"voted_for\"",
          "explain": "push constant \"voted_for\"",
          "npc": "1034",
          "push": [ { "type": "atom", "value": "voted_for" } ],
          "pc": "1033"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted_for\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted_for\"])",
          "npc": "1035",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] } ],
          "pc": "1034"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1036",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1035"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "141071e59": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "141071e59",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1036",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1036",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "6550",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "141071e59",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1036",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "1" }],
        "trace": [
          {
          "pc": "1036",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?e[\"citizens\"][2][\"voted_for\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1037",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1037",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1036"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1038",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1037"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (True) and store locally in variable \"result\"",
          "npc": "1039",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "1038"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1040",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1039"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1041",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1040"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "1042",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "1041"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1043",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1042"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1044",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1043"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1045",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1044"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1046",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1045"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1047",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1046"
        },
        {
          "code": "DelVar citizen",
          "explain": "delete method variable citizen",
          "npc": "1048",
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1047"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "1049",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1048"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16802" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1049"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "14107ec89": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "14107ec89",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "6932",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "14107ec89",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "16802" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1050",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1051",
          "pop": "1",
          "push": [ ],
          "pc": "1050"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1052",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1051"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1053",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1052"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1054",
          "local": { "candidate": { "type": "int", "value": "1" }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1053"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1055",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1054"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1056",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1055"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1057",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1056"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1058",
          "local": { "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1057"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "1059",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1058"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16962" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1059"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1",
          "140da75c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140da75c9",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "7026",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140da75c9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22050" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "16962" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1060",
          "fp": "3",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1061",
          "pop": "1",
          "push": [ ],
          "pc": "1060"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "1378",
          "fp": "1",
          "trace": [
            {
            "pc": "1378",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1061"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (False)",
          "npc": "1379",
          "pop": "1",
          "push": [ ],
          "pc": "1378"
        },
        {
          "code": "Push PC(1317)",
          "explain": "push program counter constant 1317 (\"complete\")",
          "npc": "1380",
          "push": [ { "type": "pc", "value": "1317" } ],
          "pc": "1379"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "1381",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1380"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (1317: \"complete\") and call the method",
          "npc": "1317",
          "fp": "3",
          "trace": [
            {
            "pc": "1382",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1317",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "22114" }, { "type": "list", "value": [] } ],
          "pc": "1381"
        },
        {
          "code": "Frame complete()",
          "explain": "method \"complete\" with argument () set to []",
          "npc": "1318",
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1317"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140c9ffc9": "1",
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140c9ffc9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1318",
          "sp": "3",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
          "trace": [
            {
            "pc": "1382",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1318",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "7630",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "140c9ffc9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1346",
        "pc": "1318",
        "sp": "3",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "22114" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
        "trace": [
          {
          "pc": "1318",
          "xpc": "1346",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "1319",
          "fp": "3",
          "trace": [
            {
            "pc": "1382",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1319",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "1318"
        },
        {
          "code": "Load threads_executed",
          "explain": "push value (0) of variable threads_executed",
          "npc": "1320",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1319"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1321",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1320"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "npc": "1322",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1321"
        },
        {
          "code": "Store threads_executed",
          "explain": "pop value (1) and store into variable threads_executed",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
          "npc": "1323",
          "pop": "1",
          "push": [ ],
          "pc": "1322"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "1324",
          "atomic": "0",
          "push": [ ],
          "pc": "1323"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1382",
          "fp": "1",
          "trace": [
            {
            "pc": "1382",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "1324"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1383",
          "pop": "1",
          "push": [ ],
          "pc": "1382"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1383",
          "local": { },
          "mode": "terminated",
          "pop": "1",
          "push": [ ],
          "pc": "1383"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "2",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "7787",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140d188f9",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1326",
        "sp": "1",
        "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
        "trace": [
          {
          "pc": "1326",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame test_vote(e, candidate_idx, citizen_idx)",
          "explain": "method \"test_vote\" with argument (e, candidate_idx, citizen_idx) set to [?e, 1, 1]",
          "npc": "1327",
          "fp": "1",
          "trace": [
            {
            "pc": "1327",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "candidate_idx": { "type": "int", "value": "1" }, "citizen_idx": { "type": "int", "value": "1" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "candidate_idx": { "type": "int", "value": "1" }, "citizen_idx": { "type": "int", "value": "1" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "3",
          "pc": "1326"
        },
        {
          "code": "Push PC(980)",
          "explain": "push program counter constant 980 (\"vote\")",
          "npc": "1328",
          "push": [ { "type": "pc", "value": "980" } ],
          "pc": "1327"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1329",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1328"
        },
        {
          "code": "LoadVar e",
          "explain": "push value (?e) of variable \"e\"",
          "npc": "1330",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1329"
        },
        {
          "code": "DelVar e",
          "explain": "delete method variable e",
          "npc": "1331",
          "local": { "candidate_idx": { "type": "int", "value": "1" }, "citizen_idx": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1330"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1332",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1331"
        },
        {
          "code": "LoadVar candidate_idx",
          "explain": "push value (1) of variable \"candidate_idx\"",
          "npc": "1333",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1332"
        },
        {
          "code": "DelVar candidate_idx",
          "explain": "delete method variable candidate_idx",
          "npc": "1334",
          "local": { "citizen_idx": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1333"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1335",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1334"
        },
        {
          "code": "LoadVar citizen_idx",
          "explain": "push value (1) of variable \"citizen_idx\"",
          "npc": "1336",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1335"
        },
        {
          "code": "DelVar citizen_idx",
          "explain": "delete method variable citizen_idx",
          "npc": "1337",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1336"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e, 1]); insert first value into the second; push result ([?e, 1, 1])",
          "npc": "1338",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1337"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 1, 1]) and a program counter value (980: \"vote\") and call the method",
          "npc": "980",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "980",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21426" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1338"
        },
        {
          "code": "Frame vote(election, candidate, citizen)",
          "explain": "method \"vote\" with argument (election, candidate, citizen) set to [?e, 1, 1]",
          "npc": "981",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "980"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "982",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "981"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "983",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "982"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "984",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "983"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "985",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "984"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "986",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "985"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "987",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "986"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "988",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "987"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15826" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "988"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1",
          "140e18759": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e18759",
          "fp": "5",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8438",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140e18759",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "15826" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "989",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "990",
          "pop": "1",
          "push": [ ],
          "pc": "989"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "991",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "990"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "992",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "991"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "993",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "992"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "993"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (1) of variable \"citizen\"",
          "npc": "995",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "994"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][1])",
          "npc": "996",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "995"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][1]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15954" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "996"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][1]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140918d29": "1",
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140918d29",
          "fp": "5",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8594",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140918d29",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "15954" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][1]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][1]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][1]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "997",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "998",
          "pop": "1",
          "push": [ ],
          "pc": "997"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "999",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "998"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1000",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "999"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1001",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1000"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (1) of variable \"citizen\"",
          "npc": "1002",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1001"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][1])",
          "npc": "1003",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1002"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1004",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1003"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][1]) and push the combined address (?e[\"citizens\"][1][\"voted\"])",
          "npc": "1005",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1004"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1",
          "140f187e9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140f187e9",
          "fp": "3",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1005",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1005",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "8886",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140f187e9",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1005",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] }],
        "trace": [
          {
          "pc": "1005",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][1][\"voted\"]) and push value (False)",
          "npc": "1006",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1006",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "contexts": "4",
          "pc": "1005"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1007",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1006"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (False, False); check if both values are the same; push result (True)",
          "npc": "1008",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1007"
        },
        {
          "code": "JumpCond False 1039",
          "explain": "pop value (True), compare to False, and jump to 1039 if the same",
          "npc": "1009",
          "pop": "1",
          "push": [ ],
          "pc": "1008"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1010",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1009"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1011",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1010"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1012",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1011"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1013",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1012"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][1])",
          "npc": "1014",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1013"
        },
        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "npc": "1015",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1014"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1",
          "140f1d619": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140f1d619",
          "fp": "3",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1015",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1015",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "9192",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140f1d619",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1015",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }],
        "trace": [
          {
          "pc": "1015",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][1]) and push value (1)",
          "npc": "1016",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1016",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "contexts": "4",
          "pc": "1015"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1017",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1016"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 1); add the integers; push result (2)",
          "npc": "1018",
          "pop": "2",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1017"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140bcadf9": "1",
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140bcadf9",
          "fp": "3",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1018",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "2" }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1018",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "9553",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140bcadf9",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1018",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] }, { "type": "int", "value": "2" }],
        "trace": [
          {
          "pc": "1018",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (2) and address (?e[\"candidates\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
          "npc": "1019",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1019",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1018"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1020",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1019"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1021",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1020"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1022",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1021"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (1) of variable \"citizen\"",
          "npc": "1023",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1022"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][1])",
          "npc": "1024",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1023"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1025",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1024"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][1]) and push the combined address (?e[\"citizens\"][1][\"voted\"])",
          "npc": "1026",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1025"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1027",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1026"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1",
          "140e1fc09": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e1fc09",
          "fp": "3",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1027",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1027",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "9861",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140e1fc09",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1027",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
        "trace": [
          {
          "pc": "1027",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"citizens\"][1][\"voted\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
          "npc": "1028",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1028",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1027"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1029",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1028"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1030",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1029"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1031",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1030"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (1) of variable \"citizen\"",
          "npc": "1032",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1031"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][1])",
          "npc": "1033",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1032"
        },
        {
          "code": "Push \"voted_for\"",
          "explain": "push constant \"voted_for\"",
          "npc": "1034",
          "push": [ { "type": "atom", "value": "voted_for" } ],
          "pc": "1033"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted_for\") and an address (?e[\"citizens\"][1]) and push the combined address (?e[\"citizens\"][1][\"voted_for\"])",
          "npc": "1035",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted_for" } ] } ],
          "pc": "1034"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1036",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1035"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1",
          "140e23cf9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e23cf9",
          "fp": "3",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1036",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1036",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "10106",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140e23cf9",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1036",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "1" }],
        "trace": [
          {
          "pc": "1036",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?e[\"citizens\"][1][\"voted_for\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
          "npc": "1037",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1037",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1036"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1038",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1037"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (True) and store locally in variable \"result\"",
          "npc": "1039",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "1038"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1040",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1039"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1041",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1040"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "1042",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "1041"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1043",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1042"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1044",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1043"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1045",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1044"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1046",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1045"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (1) of variable \"citizen\"",
          "npc": "1047",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1046"
        },
        {
          "code": "DelVar citizen",
          "explain": "delete method variable citizen",
          "npc": "1048",
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1047"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][1])",
          "npc": "1049",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1048"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][1]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16802" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1049"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_cit\"][1]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1",
          "140d24009": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d24009",
          "fp": "5",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "10410",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140d24009",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "16802" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][1]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][1]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][1]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_cit\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1050",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1051",
          "pop": "1",
          "push": [ ],
          "pc": "1050"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1052",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1051"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1053",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1052"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1054",
          "local": { "candidate": { "type": "int", "value": "1" }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1053"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1055",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1054"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1056",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1055"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1057",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1056"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1058",
          "local": { "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1057"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "1059",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1058"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16962" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1059"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1",
          "140d2a9d9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140d2a9d9",
          "fp": "5",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "10570",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "140d2a9d9",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "16962" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1060",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1061",
          "pop": "1",
          "push": [ ],
          "pc": "1060"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "1339",
          "fp": "1",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1061"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (False)",
          "npc": "1340",
          "pop": "1",
          "push": [ ],
          "pc": "1339"
        },
        {
          "code": "Push PC(1317)",
          "explain": "push program counter constant 1317 (\"complete\")",
          "npc": "1341",
          "push": [ { "type": "pc", "value": "1317" } ],
          "pc": "1340"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "1342",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1341"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (1317: \"complete\") and call the method",
          "npc": "1317",
          "fp": "3",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1317",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21490" }, { "type": "list", "value": [] } ],
          "pc": "1342"
        },
        {
          "code": "Frame complete()",
          "explain": "method \"complete\" with argument () set to []",
          "npc": "1318",
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1317"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1",
          "141020239": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "141020239",
          "fp": "3",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1318",
          "sp": "3",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1318",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "10937",
      "len": "2",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "1" } },
      "tid": "2",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "2",
        "hvalue": "141020239",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1318",
        "sp": "3",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21490" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
        "trace": [
          {
          "pc": "1318",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "1319",
          "fp": "3",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1319",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "1318"
        },
        {
          "code": "Load threads_executed",
          "explain": "push value (1) of variable threads_executed",
          "npc": "1320",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1319"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1321",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1320"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 1); add the integers; push result (2)",
          "npc": "1322",
          "pop": "2",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1321"
        },
        {
          "code": "Store threads_executed",
          "explain": "pop value (2) and store into variable threads_executed",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
          "npc": "1323",
          "pop": "1",
          "push": [ ],
          "pc": "1322"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "1324",
          "atomic": "0",
          "push": [ ],
          "pc": "1323"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1343",
          "fp": "1",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "1324"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1344",
          "pop": "1",
          "push": [ ],
          "pc": "1343"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1344",
          "local": { },
          "mode": "terminated",
          "pop": "1",
          "push": [ ],
          "pc": "1344"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d188f9": "1",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140d188f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "11064",
      "len": "3",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
      "tid": "3",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "3",
        "hvalue": "140d188f9",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1326",
        "sp": "1",
        "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
        "trace": [
          {
          "pc": "1326",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame test_vote(e, candidate_idx, citizen_idx)",
          "explain": "method \"test_vote\" with argument (e, candidate_idx, citizen_idx) set to [?e, 1, 1]",
          "npc": "1327",
          "fp": "1",
          "trace": [
            {
            "pc": "1327",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "candidate_idx": { "type": "int", "value": "1" }, "citizen_idx": { "type": "int", "value": "1" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "candidate_idx": { "type": "int", "value": "1" }, "citizen_idx": { "type": "int", "value": "1" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "3",
          "pc": "1326"
        },
        {
          "code": "Push PC(980)",
          "explain": "push program counter constant 980 (\"vote\")",
          "npc": "1328",
          "push": [ { "type": "pc", "value": "980" } ],
          "pc": "1327"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1329",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1328"
        },
        {
          "code": "LoadVar e",
          "explain": "push value (?e) of variable \"e\"",
          "npc": "1330",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1329"
        },
        {
          "code": "DelVar e",
          "explain": "delete method variable e",
          "npc": "1331",
          "local": { "candidate_idx": { "type": "int", "value": "1" }, "citizen_idx": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1330"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1332",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1331"
        },
        {
          "code": "LoadVar candidate_idx",
          "explain": "push value (1) of variable \"candidate_idx\"",
          "npc": "1333",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1332"
        },
        {
          "code": "DelVar candidate_idx",
          "explain": "delete method variable candidate_idx",
          "npc": "1334",
          "local": { "citizen_idx": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1333"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1335",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1334"
        },
        {
          "code": "LoadVar citizen_idx",
          "explain": "push value (1) of variable \"citizen_idx\"",
          "npc": "1336",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1335"
        },
        {
          "code": "DelVar citizen_idx",
          "explain": "delete method variable citizen_idx",
          "npc": "1337",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1336"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e, 1]); insert first value into the second; push result ([?e, 1, 1])",
          "npc": "1338",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1337"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 1, 1]) and a program counter value (980: \"vote\") and call the method",
          "npc": "980",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "980",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21426" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1338"
        },
        {
          "code": "Frame vote(election, candidate, citizen)",
          "explain": "method \"vote\" with argument (election, candidate, citizen) set to [?e, 1, 1]",
          "npc": "981",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "980"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "982",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "981"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "983",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "982"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "984",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "983"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "985",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "984"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "986",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "985"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "987",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "986"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "988",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "987"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15826" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "988"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d189c9": "1",
          "140e18759": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e18759",
          "fp": "5",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "11276",
      "len": "3",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
      "tid": "3",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "3",
        "hvalue": "140e18759",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "15826" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "3",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "989",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "990",
          "pop": "1",
          "push": [ ],
          "pc": "989"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "991",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "990"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "992",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "991"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "993",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "992"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "993"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (1) of variable \"citizen\"",
          "npc": "995",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "994"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][1])",
          "npc": "996",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "995"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][1]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15954" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "996"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][1]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140918d29": "1",
          "140d18869": "1",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140918d29",
          "fp": "5",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "11542",
      "len": "3",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
      "tid": "3",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "3",
        "hvalue": "140918d29",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "15954" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "3",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][1]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][1]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][1]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "997",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "998",
          "pop": "1",
          "push": [ ],
          "pc": "997"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "999",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "998"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1000",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "999"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1001",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1000"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (1) of variable \"citizen\"",
          "npc": "1002",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1001"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][1])",
          "npc": "1003",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1002"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1004",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1003"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][1]) and push the combined address (?e[\"citizens\"][1][\"voted\"])",
          "npc": "1005",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1004"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d189c9": "1",
          "140f187e9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140f187e9",
          "fp": "3",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1005",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1005",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "11777",
      "len": "3",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
      "tid": "3",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "3",
        "hvalue": "140f187e9",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1005",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "1" }, { "type": "atom", "value": "voted" } ] }],
        "trace": [
          {
          "pc": "1005",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][1][\"voted\"]) and push value (True)",
          "npc": "1006",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1006",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "contexts": "3",
          "pc": "1005"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1007",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1006"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (False, True); check if both values are the same; push result (False)",
          "npc": "1008",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1007"
        },
        {
          "code": "JumpCond False 1039",
          "explain": "pop value (False), compare to False, and jump to 1039 if the same",
          "npc": "1039",
          "pop": "1",
          "push": [ ],
          "pc": "1008"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1040",
          "push": [ ],
          "pc": "1039"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1041",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1040"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "1042",
          "local": { "candidate": { "type": "int", "value": "1" }, "citizen": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "1041"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1043",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1042"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1044",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1043"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1045",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1044"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1046",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1045"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (1) of variable \"citizen\"",
          "npc": "1047",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1046"
        },
        {
          "code": "DelVar citizen",
          "explain": "delete method variable citizen",
          "npc": "1048",
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1047"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][1])",
          "npc": "1049",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1048"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][1]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16802" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1049"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_cit\"][1]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d189c9": "1",
          "140d24009": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140d24009",
          "fp": "5",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "11986",
      "len": "3",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
      "tid": "3",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "3",
        "hvalue": "140d24009",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "16802" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "3",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][1]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][1]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][1]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "1" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_cit\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1050",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1051",
          "pop": "1",
          "push": [ ],
          "pc": "1050"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1052",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1051"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1053",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1052"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1054",
          "local": { "candidate": { "type": "int", "value": "1" }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1053"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1055",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1054"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1056",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1055"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1057",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1056"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1058",
          "local": { "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1057"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "1059",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1058"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16962" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1059"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d189c9": "1",
          "140d2a9d9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140d2a9d9",
          "fp": "5",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12177",
      "len": "3",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
      "tid": "3",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "3",
        "hvalue": "140d2a9d9",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "16962" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "3",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1060",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 1, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1061",
          "pop": "1",
          "push": [ ],
          "pc": "1060"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "1339",
          "fp": "1",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1061"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (False)",
          "npc": "1340",
          "pop": "1",
          "push": [ ],
          "pc": "1339"
        },
        {
          "code": "Push PC(1317)",
          "explain": "push program counter constant 1317 (\"complete\")",
          "npc": "1341",
          "push": [ { "type": "pc", "value": "1317" } ],
          "pc": "1340"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "1342",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1341"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (1317: \"complete\") and call the method",
          "npc": "1317",
          "fp": "3",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1317",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21490" }, { "type": "list", "value": [] } ],
          "pc": "1342"
        },
        {
          "code": "Frame complete()",
          "explain": "method \"complete\" with argument () set to []",
          "npc": "1318",
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1317"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d189c9": "1",
          "141020239": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "141020239",
          "fp": "3",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1318",
          "sp": "3",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1318",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12445",
      "len": "3",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "2" } },
      "tid": "3",
      "name": "test_vote(?e, 1, 1)",
      "context": {
        "tid": "3",
        "hvalue": "141020239",
        "fp": "1",
        "name": "test_vote(?e, 1, 1)",
        "entry": "1326",
        "pc": "1318",
        "sp": "3",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21490" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
        "trace": [
          {
          "pc": "1318",
          "xpc": "1326",
          "method": "test_vote(?e, 1, 1)",
          "calltype": "process",
          "vars": { "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "1319",
          "fp": "3",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1319",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "3",
          "pc": "1318"
        },
        {
          "code": "Load threads_executed",
          "explain": "push value (2) of variable threads_executed",
          "npc": "1320",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1319"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1321",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1320"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 2); add the integers; push result (3)",
          "npc": "1322",
          "pop": "2",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1321"
        },
        {
          "code": "Store threads_executed",
          "explain": "pop value (3) and store into variable threads_executed",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
          "npc": "1323",
          "pop": "1",
          "push": [ ],
          "pc": "1322"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "1324",
          "atomic": "0",
          "push": [ ],
          "pc": "1323"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1343",
          "fp": "1",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "1324"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1344",
          "pop": "1",
          "push": [ ],
          "pc": "1343"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1344",
          "local": { },
          "mode": "terminated",
          "pop": "1",
          "push": [ ],
          "pc": "1344"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d18869": "1",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d18869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1326",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1326",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12546",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140d18869",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "1326",
        "sp": "1",
        "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
        "trace": [
          {
          "pc": "1326",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame test_vote(e, candidate_idx, citizen_idx)",
          "explain": "method \"test_vote\" with argument (e, candidate_idx, citizen_idx) set to [?e, 0, 0]",
          "npc": "1327",
          "fp": "1",
          "trace": [
            {
            "pc": "1327",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "candidate_idx": { "type": "int", "value": "0" }, "citizen_idx": { "type": "int", "value": "0" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "candidate_idx": { "type": "int", "value": "0" }, "citizen_idx": { "type": "int", "value": "0" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "2",
          "pc": "1326"
        },
        {
          "code": "Push PC(980)",
          "explain": "push program counter constant 980 (\"vote\")",
          "npc": "1328",
          "push": [ { "type": "pc", "value": "980" } ],
          "pc": "1327"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1329",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1328"
        },
        {
          "code": "LoadVar e",
          "explain": "push value (?e) of variable \"e\"",
          "npc": "1330",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1329"
        },
        {
          "code": "DelVar e",
          "explain": "delete method variable e",
          "npc": "1331",
          "local": { "candidate_idx": { "type": "int", "value": "0" }, "citizen_idx": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1330"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1332",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1331"
        },
        {
          "code": "LoadVar candidate_idx",
          "explain": "push value (0) of variable \"candidate_idx\"",
          "npc": "1333",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1332"
        },
        {
          "code": "DelVar candidate_idx",
          "explain": "delete method variable candidate_idx",
          "npc": "1334",
          "local": { "citizen_idx": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1333"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e]); insert first value into the second; push result ([?e, 0])",
          "npc": "1335",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1334"
        },
        {
          "code": "LoadVar citizen_idx",
          "explain": "push value (0) of variable \"citizen_idx\"",
          "npc": "1336",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1335"
        },
        {
          "code": "DelVar citizen_idx",
          "explain": "delete method variable citizen_idx",
          "npc": "1337",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1336"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e, 0]); insert first value into the second; push result ([?e, 0, 0])",
          "npc": "1338",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1337"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 0, 0]) and a program counter value (980: \"vote\") and call the method",
          "npc": "980",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "980",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21426" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1338"
        },
        {
          "code": "Frame vote(election, candidate, citizen)",
          "explain": "method \"vote\" with argument (election, candidate, citizen) set to [?e, 0, 0]",
          "npc": "981",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "980"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "982",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "981"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "983",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "982"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "984",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "983"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "985",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "984"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "986",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "985"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "987",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "986"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "988",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "987"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15826" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "988"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "140e18369": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140e18369",
          "fp": "5",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12665",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140e18369",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "15826" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "2",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "989",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "990",
          "pop": "1",
          "push": [ ],
          "pc": "989"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "991",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "990"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "992",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "991"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "993",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "992"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "993"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (0) of variable \"citizen\"",
          "npc": "995",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "994"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][0])",
          "npc": "996",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] } ],
          "pc": "995"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][0]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][0])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15954" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] } ],
          "pc": "996"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][0]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140919009": "1",
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140919009",
          "fp": "5",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12808",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140919009",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "15954" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "2",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][0]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][0]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][0]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "997",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "998",
          "pop": "1",
          "push": [ ],
          "pc": "997"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "999",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "998"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1000",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "999"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1001",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1000"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (0) of variable \"citizen\"",
          "npc": "1002",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1001"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][0])",
          "npc": "1003",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1002"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1004",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1003"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][0]) and push the combined address (?e[\"citizens\"][0][\"voted\"])",
          "npc": "1005",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1004"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "140f18209": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140f18209",
          "fp": "3",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1005",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted" } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1005",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12881",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140f18209",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "1005",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted" } ] }],
        "trace": [
          {
          "pc": "1005",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][0][\"voted\"]) and push value (False)",
          "npc": "1006",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1006",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "contexts": "2",
          "pc": "1005"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1007",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1006"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (False, False); check if both values are the same; push result (True)",
          "npc": "1008",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1007"
        },
        {
          "code": "JumpCond False 1039",
          "explain": "pop value (True), compare to False, and jump to 1039 if the same",
          "npc": "1009",
          "pop": "1",
          "push": [ ],
          "pc": "1008"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1010",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1009"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1011",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1010"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1012",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1011"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1013",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1012"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][0])",
          "npc": "1014",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1013"
        },
        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "npc": "1015",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1014"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "140f1dfb9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140f1dfb9",
          "fp": "3",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1015",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1015",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12990",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140f1dfb9",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "1015",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }],
        "trace": [
          {
          "pc": "1015",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][0]) and push value (0)",
          "npc": "1016",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1016",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "contexts": "2",
          "pc": "1015"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1017",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1016"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "npc": "1018",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1017"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "1410182f9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "1410182f9",
          "fp": "3",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1018",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1018",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13018",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "1410182f9",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "1018",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" }],
        "trace": [
          {
          "pc": "1018",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?e[\"candidates\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
          "npc": "1019",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1019",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "2",
          "pc": "1018"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1020",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1019"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1021",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1020"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1022",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1021"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (0) of variable \"citizen\"",
          "npc": "1023",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1022"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][0])",
          "npc": "1024",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1023"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1025",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1024"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][0]) and push the combined address (?e[\"citizens\"][0][\"voted\"])",
          "npc": "1026",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1025"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1027",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1026"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "140e21579": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140e21579",
          "fp": "3",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1027",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1027",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13091",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140e21579",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "1027",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
        "trace": [
          {
          "pc": "1027",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"citizens\"][0][\"voted\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
          "npc": "1028",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1028",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "2",
          "pc": "1027"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1029",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1028"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1030",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1029"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1031",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1030"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (0) of variable \"citizen\"",
          "npc": "1032",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1031"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][0])",
          "npc": "1033",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1032"
        },
        {
          "code": "Push \"voted_for\"",
          "explain": "push constant \"voted_for\"",
          "npc": "1034",
          "push": [ { "type": "atom", "value": "voted_for" } ],
          "pc": "1033"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted_for\") and an address (?e[\"citizens\"][0]) and push the combined address (?e[\"citizens\"][0][\"voted_for\"])",
          "npc": "1035",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted_for" } ] } ],
          "pc": "1034"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1036",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1035"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "140e22059": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140e22059",
          "fp": "3",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1036",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "0" }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1036",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13120",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140e22059",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "1036",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "0" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "0" }],
        "trace": [
          {
          "pc": "1036",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (0) and address (?e[\"citizens\"][0][\"voted_for\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
          "npc": "1037",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1037",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "2",
          "pc": "1036"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1038",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1037"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (True) and store locally in variable \"result\"",
          "npc": "1039",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "1038"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1040",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1039"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1041",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1040"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "1042",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "1041"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1043",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1042"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1044",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1043"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1045",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1044"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1046",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1045"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (0) of variable \"citizen\"",
          "npc": "1047",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1046"
        },
        {
          "code": "DelVar citizen",
          "explain": "delete method variable citizen",
          "npc": "1048",
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1047"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][0])",
          "npc": "1049",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1048"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][0]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][0])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16802" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1049"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_cit\"][0]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "140d26dc9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d26dc9",
          "fp": "5",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13134",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140d26dc9",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "16802" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "2",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][0]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][0]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][0]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "0" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_cit\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1050",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1051",
          "pop": "1",
          "push": [ ],
          "pc": "1050"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1052",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1051"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1053",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1052"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1054",
          "local": { "candidate": { "type": "int", "value": "0" }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1053"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1055",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1054"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1056",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1055"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1057",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1056"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1058",
          "local": { "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1057"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1059",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1058"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16962" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1059"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "140d27859": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140d27859",
          "fp": "5",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13144",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "140d27859",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21426" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }, { "type": "int", "value": "16962" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "2",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1060",
          "fp": "3",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1061",
          "pop": "1",
          "push": [ ],
          "pc": "1060"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "1339",
          "fp": "1",
          "trace": [
            {
            "pc": "1339",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1061"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (False)",
          "npc": "1340",
          "pop": "1",
          "push": [ ],
          "pc": "1339"
        },
        {
          "code": "Push PC(1317)",
          "explain": "push program counter constant 1317 (\"complete\")",
          "npc": "1341",
          "push": [ { "type": "pc", "value": "1317" } ],
          "pc": "1340"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "1342",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1341"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (1317: \"complete\") and call the method",
          "npc": "1317",
          "fp": "3",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1317",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21490" }, { "type": "list", "value": [] } ],
          "pc": "1342"
        },
        {
          "code": "Frame complete()",
          "explain": "method \"complete\" with argument () set to []",
          "npc": "1318",
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1317"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1",
          "141020239": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "141020239",
          "fp": "3",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1318",
          "sp": "3",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1318",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13151",
      "len": "4",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "3" } },
      "tid": "1",
      "name": "test_vote(?e, 0, 0)",
      "context": {
        "tid": "1",
        "hvalue": "141020239",
        "fp": "1",
        "name": "test_vote(?e, 0, 0)",
        "entry": "1326",
        "pc": "1318",
        "sp": "3",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21490" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
        "trace": [
          {
          "pc": "1318",
          "xpc": "1326",
          "method": "test_vote(?e, 0, 0)",
          "calltype": "process",
          "vars": { "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "1319",
          "fp": "3",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1319",
            "xpc": "1317",
            "method": "complete()",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "2",
          "pc": "1318"
        },
        {
          "code": "Load threads_executed",
          "explain": "push value (3) of variable threads_executed",
          "npc": "1320",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1319"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1321",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1320"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 3); add the integers; push result (4)",
          "npc": "1322",
          "pop": "2",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "1321"
        },
        {
          "code": "Store threads_executed",
          "explain": "pop value (4) and store into variable threads_executed",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "1323",
          "pop": "1",
          "push": [ ],
          "pc": "1322"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "1324",
          "atomic": "0",
          "push": [ ],
          "pc": "1323"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1343",
          "fp": "1",
          "trace": [
            {
            "pc": "1343",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "1324"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1344",
          "pop": "1",
          "push": [ ],
          "pc": "1343"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1344",
          "local": { },
          "mode": "terminated",
          "pop": "1",
          "push": [ ],
          "pc": "1344"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140d189c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140d189c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1385",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1385",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13152",
      "len": "5",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
      "tid": "5",
      "name": "end_test()",
      "context": {
        "tid": "5",
        "hvalue": "140d189c9",
        "fp": "1",
        "name": "end_test()",
        "entry": "1385",
        "pc": "1385",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
          {
          "pc": "1385",
          "xpc": "1385",
          "method": "end_test()",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame end_test()",
          "explain": "method \"end_test\" with argument () set to []",
          "npc": "1386",
          "fp": "1",
          "trace": [
            {
            "pc": "1386",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "1",
          "pc": "1385"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "140e18c39": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "140e18c39",
          "fp": "1",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1386",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
            {
            "pc": "1386",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "13153",
      "len": "5",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
      "tid": "5",
      "name": "end_test()",
      "context": {
        "tid": "5",
        "hvalue": "140e18c39",
        "fp": "1",
        "name": "end_test()",
        "entry": "1385",
        "pc": "1386",
        "sp": "1",
        "stack": [{ "type": "dict", "value": [] }],
        "trace": [
          {
          "pc": "1386",
          "xpc": "1385",
          "method": "end_test()",
          "calltype": "process",
          "vars": { "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "1387",
          "fp": "1",
          "trace": [
            {
            "pc": "1387",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "1",
          "pc": "1386"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "1388",
          "readonly": "1",
          "push": [ ],
          "pc": "1387"
        },
        {
          "code": "Load threads_executed",
          "explain": "push value (4) of variable threads_executed",
          "npc": "1389",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "1388"
        },
        {
          "code": "Load number_of_spawned_threads",
          "explain": "push value (4) of variable number_of_spawned_threads",
          "npc": "1390",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "1389"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (4, 4); check if both values are the same; push result (True)",
          "npc": "1391",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1390"
        },
        {
          "code": "JumpCond False 1393",
          "explain": "pop value (True), compare to False, and jump to 1393 if the same",
          "npc": "1392",
          "pop": "1",
          "push": [ ],
          "pc": "1391"
        },
        {
          "code": "Jump 1396",
          "explain": "set program counter to 1396",
          "npc": "1396",
          "push": [ ],
          "pc": "1392"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "1397",
          "readonly": "0",
          "push": [ ],
          "pc": "1396"
        },
        {
          "code": "Push PC(1200)",
          "explain": "push program counter constant 1200 (\"transfer\")",
          "npc": "1398",
          "push": [ { "type": "pc", "value": "1200" } ],
          "pc": "1397"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1399",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1398"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1400",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1399"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1401",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1400"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1402",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1401"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1403",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1402"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1404",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1403"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e, 1]); insert first value into the second; push result ([?e, 1, 0])",
          "npc": "1405",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1404"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 1, 0]) and a program counter value (1200: \"transfer\") and call the method",
          "npc": "1200",
          "fp": "3",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1200",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "22498" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1405"
        },
        {
          "code": "Frame transfer(election, candidate_from, candidate_to)",
          "explain": "method \"transfer\" with argument (election, candidate_from, candidate_to) set to [?e, 1, 0]",
          "npc": "1201",
          "local": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1200"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "1202",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "1201"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1203",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1202"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1204",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1203"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1205",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1204"
        },
        {
          "code": "LoadVar candidate_from",
          "explain": "push value (1) of variable \"candidate_from\"",
          "npc": "1206",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1205"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "1207",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1206"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1208",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "19330" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1207"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate_from" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "candidate_to" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "695"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "697",
          "atomic": "2",
          "push": [ ],
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "712",
          "atomic": "1",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1208",
          "fp": "3",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1208",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "local": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1209",
          "pop": "1",
          "push": [ ],
          "pc": "1208"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "1210",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "1209"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1211",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1210"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1212",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1211"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1213",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1212"
        },
        {
          "code": "LoadVar candidate_to",
          "explain": "push value (0) of variable \"candidate_to\"",
          "npc": "1214",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1213"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1215",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1214"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1216",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "19458" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1215"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate_from" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "candidate_to" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "695"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "697",
          "atomic": "2",
          "push": [ ],
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "712",
          "atomic": "1",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1216",
          "fp": "3",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1216",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "local": { "candidate_from": { "type": "int", "value": "1" }, "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1217",
          "pop": "1",
          "push": [ ],
          "pc": "1216"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1218",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1217"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1219",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1218"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1220",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1219"
        },
        {
          "code": "LoadVar candidate_to",
          "explain": "push value (0) of variable \"candidate_to\"",
          "npc": "1221",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1220"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][0])",
          "npc": "1222",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1221"
        },
        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "npc": "1223",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1222"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][0]) and push value (1)",
          "npc": "1224",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1223"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1225",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1224"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1226",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1225"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1227",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1226"
        },
        {
          "code": "LoadVar candidate_from",
          "explain": "push value (1) of variable \"candidate_from\"",
          "npc": "1228",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1227"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][1])",
          "npc": "1229",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1228"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][1]) and push value (2)",
          "npc": "1230",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1229"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (2, 1); add the integers; push result (3)",
          "npc": "1231",
          "pop": "2",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1230"
        },
        {
          "code": "Store",
          "explain": "pop value (3) and address (?e[\"candidates\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "2" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "1232",
          "pop": "2",
          "push": [ ],
          "pc": "1231"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1233",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1232"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1234",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1233"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1235",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1234"
        },
        {
          "code": "LoadVar candidate_from",
          "explain": "push value (1) of variable \"candidate_from\"",
          "npc": "1236",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1235"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][1])",
          "npc": "1237",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1236"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1238",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1237"
        },
        {
          "code": "Store",
          "explain": "pop value (0) and address (?e[\"candidates\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "1239",
          "pop": "2",
          "push": [ ],
          "pc": "1238"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1240",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1239"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1241",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1240"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1242",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1241"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1243",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1242"
        },
        {
          "code": "LoadVar candidate_from",
          "explain": "push value (1) of variable \"candidate_from\"",
          "npc": "1244",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1243"
        },
        {
          "code": "DelVar candidate_from",
          "explain": "delete method variable candidate_from",
          "npc": "1245",
          "local": { "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1244"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "1246",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1245"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1247",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "19954" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1246"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate_to" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "714"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "716",
          "atomic": "2",
          "push": [ ],
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 2 to 3: remains atomic",
          "npc": "718",
          "atomic": "3",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 3 to 2: remains atomic",
          "npc": "722",
          "atomic": "2",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "728",
          "atomic": "1",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1247",
          "fp": "3",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1247",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "local": { "candidate_to": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1248",
          "pop": "1",
          "push": [ ],
          "pc": "1247"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1249",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1248"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1250",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1249"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1251",
          "local": { "candidate_to": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1250"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1252",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1251"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1253",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1252"
        },
        {
          "code": "LoadVar candidate_to",
          "explain": "push value (0) of variable \"candidate_to\"",
          "npc": "1254",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1253"
        },
        {
          "code": "DelVar candidate_to",
          "explain": "delete method variable candidate_to",
          "npc": "1255",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1254"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1256",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1255"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1257",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "20114" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1256"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "714"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "716",
          "atomic": "2",
          "push": [ ],
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 2 to 3: remains atomic",
          "npc": "718",
          "atomic": "3",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 3 to 2: remains atomic",
          "npc": "722",
          "atomic": "2",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "728",
          "atomic": "1",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1257",
          "fp": "3",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1257",
            "xpc": "1200",
            "method": "transfer(?e, 1, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1258",
          "pop": "1",
          "push": [ ],
          "pc": "1257"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1406",
          "fp": "1",
          "trace": [
            {
            "pc": "1406",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "1258"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1407",
          "pop": "1",
          "push": [ ],
          "pc": "1406"
        },
        {
          "code": "Push {}",
          "explain": "push constant {}",
          "npc": "1408",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "1407"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1409",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1408"
        },
        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (0, {}); insert first value into the second; push result ({ 0 })",
          "npc": "1410",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "1409"
        },
        {
          "code": "Load NUM_CANDIDATES",
          "explain": "push value (2) of variable NUM_CANDIDATES",
          "npc": "1411",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1410"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1412",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1411"
        },
        {
          "code": "2-ary -",
          "explain": "pop 2 values (1, 2); the second integer minus the first; push result (1)",
          "npc": "1413",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1412"
        },
        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values (1, { 0 }); insert first value into the second; push result ({ 0, 1 })",
          "npc": "1414",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1413"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1415",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1414"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (0) and value ({ 0, 1 }); assign value (0) to i; push new index (1) and True",
          "npc": "1416",
          "local": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "1415"
        },
        {
          "code": "JumpCond False 1439",
          "explain": "pop value (True), compare to False, and jump to 1439 if the same",
          "npc": "1417",
          "pop": "1",
          "push": [ ],
          "pc": "1416"
        },
        {
          "code": "Push PC(1171)",
          "explain": "push program counter constant 1171 (\"get_votes\")",
          "npc": "1418",
          "push": [ { "type": "pc", "value": "1171" } ],
          "pc": "1417"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1419",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1418"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1420",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1419"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1421",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1420"
        },
        {
          "code": "LoadVar i",
          "explain": "push value (0) of variable \"i\"",
          "npc": "1422",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1421"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e]); insert first value into the second; push result ([?e, 0])",
          "npc": "1423",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1422"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 0]) and a program counter value (1171: \"get_votes\") and call the method",
          "npc": "1171",
          "fp": "5",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1171",
            "xpc": "1171",
            "method": "get_votes(?e, 0)",
            "calltype": "normal",
            "vars": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "22786" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1423"
        },
        {
          "code": "Frame get_votes(election, candidate)",
          "explain": "method \"get_votes\" with argument (election, candidate) set to [?e, 0]",
          "npc": "1172",
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "i" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1171"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1173",
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1172"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "1174",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "1173"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1175",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1174"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1176",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1175"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1177",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1176"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1178",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1177"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1179",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1178"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "7",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1180",
            "xpc": "1171",
            "method": "get_votes(?e, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 6
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "18882" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1179"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "697",
          "atomic": "2",
          "push": [ ],
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "712",
          "atomic": "1",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1180",
          "fp": "5",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1180",
            "xpc": "1171",
            "method": "get_votes(?e, 0)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1181",
          "pop": "1",
          "push": [ ],
          "pc": "1180"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1182",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1181"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1183",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1182"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1184",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1183"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1185",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1184"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][0])",
          "npc": "1186",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1185"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][0]) and push value (3)",
          "npc": "1187",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1186"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (3) and store locally in variable \"result\"",
          "npc": "1188",
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "int", "value": "3" } },
          "pop": "1",
          "push": [ ],
          "pc": "1187"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1189",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1188"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1190",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1189"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1191",
          "local": { "candidate": { "type": "int", "value": "0" }, "result": { "type": "int", "value": "3" } },
          "push": [ ],
          "pc": "1190"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1192",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1191"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1193",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1192"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1194",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1193"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1195",
          "local": { "result": { "type": "int", "value": "3" } },
          "push": [ ],
          "pc": "1194"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1196",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1195"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "7",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1197",
            "xpc": "1171",
            "method": "get_votes(?e, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "int", "value": "3" } },
            "sp": 4
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "result": { "type": "int", "value": "3" } },
            "sp": 6
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "19154" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1196"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "int", "value": "3" } } ] } ],
          "pc": "714"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "716",
          "atomic": "2",
          "push": [ ],
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 2 to 3: remains atomic",
          "npc": "718",
          "atomic": "3",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 3 to 2: remains atomic",
          "npc": "722",
          "atomic": "2",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "728",
          "atomic": "1",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1197",
          "fp": "5",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1197",
            "xpc": "1171",
            "method": "get_votes(?e, 0)",
            "calltype": "normal",
            "vars": { "result": { "type": "int", "value": "3" } },
            "sp": 4
            }
          ],
          "local": { "result": { "type": "int", "value": "3" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1198",
          "pop": "1",
          "push": [ ],
          "pc": "1197"
        },
        {
          "code": "Return",
          "explain": "push result (3) and restore method variables",
          "npc": "1424",
          "fp": "1",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "i": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1198"
        },
        {
          "code": "StoreVar received_votes",
          "explain": "pop value (3) and store locally in variable \"received_votes\"",
          "npc": "1425",
          "local": { "i": { "type": "int", "value": "0" }, "received_votes": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "1424"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "1426",
          "readonly": "1",
          "push": [ ],
          "pc": "1425"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "1427",
          "atomic": "2",
          "push": [ ],
          "pc": "1426"
        },
        {
          "code": "Push ?EXPECTED_VOTES",
          "explain": "push constant ?EXPECTED_VOTES",
          "npc": "1428",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "EXPECTED_VOTES" } ] } ],
          "pc": "1427"
        },
        {
          "code": "LoadVar i",
          "explain": "push value (0) of variable \"i\"",
          "npc": "1429",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1428"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1430",
          "local": { "received_votes": { "type": "int", "value": "3" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1429"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?EXPECTED_VOTES) and push the combined address (?EXPECTED_VOTES[0])",
          "npc": "1431",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "EXPECTED_VOTES" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1430"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?EXPECTED_VOTES[0]) and push value (3)",
          "npc": "1432",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1431"
        },
        {
          "code": "LoadVar received_votes",
          "explain": "push value (3) of variable \"received_votes\"",
          "npc": "1433",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1432"
        },
        {
          "code": "DelVar received_votes",
          "explain": "delete method variable received_votes",
          "npc": "1434",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1433"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (3, 3); check if both values are the same; push result (True)",
          "npc": "1435",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1434"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "1436",
          "pop": "1",
          "push": [ ],
          "pc": "1435"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "1437",
          "atomic": "1",
          "push": [ ],
          "pc": "1436"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "1438",
          "readonly": "0",
          "push": [ ],
          "pc": "1437"
        },
        {
          "code": "Jump 1415",
          "explain": "set program counter to 1415",
          "npc": "1415",
          "push": [ ],
          "pc": "1438"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (1) and value ({ 0, 1 }); assign value (1) to i; push new index (2) and True",
          "npc": "1416",
          "local": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "1415"
        },
        {
          "code": "JumpCond False 1439",
          "explain": "pop value (True), compare to False, and jump to 1439 if the same",
          "npc": "1417",
          "pop": "1",
          "push": [ ],
          "pc": "1416"
        },
        {
          "code": "Push PC(1171)",
          "explain": "push program counter constant 1171 (\"get_votes\")",
          "npc": "1418",
          "push": [ { "type": "pc", "value": "1171" } ],
          "pc": "1417"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1419",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1418"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1420",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1419"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1421",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1420"
        },
        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "npc": "1422",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1421"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1423",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1422"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 1]) and a program counter value (1171: \"get_votes\") and call the method",
          "npc": "1171",
          "fp": "5",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1171",
            "xpc": "1171",
            "method": "get_votes(?e, 1)",
            "calltype": "normal",
            "vars": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "22786" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1423"
        },
        {
          "code": "Frame get_votes(election, candidate)",
          "explain": "method \"get_votes\" with argument (election, candidate) set to [?e, 1]",
          "npc": "1172",
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "i" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1171"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1173",
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1172"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "1174",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "1173"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1175",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1174"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1176",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1175"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1177",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1176"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1178",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1177"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "1179",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1178"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "7",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1180",
            "xpc": "1171",
            "method": "get_votes(?e, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 6
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "18882" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1179"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "1" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "697",
          "atomic": "2",
          "push": [ ],
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "712",
          "atomic": "1",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1180",
          "fp": "5",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1180",
            "xpc": "1171",
            "method": "get_votes(?e, 1)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1181",
          "pop": "1",
          "push": [ ],
          "pc": "1180"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1182",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1181"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1183",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1182"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1184",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1183"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1185",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1184"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][1])",
          "npc": "1186",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1185"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][1]) and push value (0)",
          "npc": "1187",
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1186"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (0) and store locally in variable \"result\"",
          "npc": "1188",
          "local": { "candidate": { "type": "int", "value": "1" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "1187"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1189",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1188"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1190",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1189"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1191",
          "local": { "candidate": { "type": "int", "value": "1" }, "result": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "1190"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1192",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1191"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1193",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1192"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (1) of variable \"candidate\"",
          "npc": "1194",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1193"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1195",
          "local": { "result": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "1194"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][1])",
          "npc": "1196",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1195"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][1]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "7",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1197",
            "xpc": "1171",
            "method": "get_votes(?e, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "int", "value": "0" } },
            "sp": 4
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][1])",
            "calltype": "normal",
            "vars": { "result": { "type": "int", "value": "0" } },
            "sp": 6
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "19154" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1196"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][1]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "int", "value": "0" } } ] } ],
          "pc": "714"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "716",
          "atomic": "2",
          "push": [ ],
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 2 to 3: remains atomic",
          "npc": "718",
          "atomic": "3",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][1]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 3 to 2: remains atomic",
          "npc": "722",
          "atomic": "2",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][1]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "1" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][1]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "4" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "728",
          "atomic": "1",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1197",
          "fp": "5",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1197",
            "xpc": "1171",
            "method": "get_votes(?e, 1)",
            "calltype": "normal",
            "vars": { "result": { "type": "int", "value": "0" } },
            "sp": 4
            }
          ],
          "local": { "result": { "type": "int", "value": "0" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1198",
          "pop": "1",
          "push": [ ],
          "pc": "1197"
        },
        {
          "code": "Return",
          "explain": "push result (0) and restore method variables",
          "npc": "1424",
          "fp": "1",
          "trace": [
            {
            "pc": "1424",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "i": { "type": "int", "value": "1" }, "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1198"
        },
        {
          "code": "StoreVar received_votes",
          "explain": "pop value (0) and store locally in variable \"received_votes\"",
          "npc": "1425",
          "local": { "i": { "type": "int", "value": "1" }, "received_votes": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "1424"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "1426",
          "readonly": "1",
          "push": [ ],
          "pc": "1425"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "1427",
          "atomic": "2",
          "push": [ ],
          "pc": "1426"
        },
        {
          "code": "Push ?EXPECTED_VOTES",
          "explain": "push constant ?EXPECTED_VOTES",
          "npc": "1428",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "EXPECTED_VOTES" } ] } ],
          "pc": "1427"
        },
        {
          "code": "LoadVar i",
          "explain": "push value (1) of variable \"i\"",
          "npc": "1429",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1428"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1430",
          "local": { "received_votes": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1429"
        },
        {
          "code": "Address",
          "explain": "pop a key (1) and an address (?EXPECTED_VOTES) and push the combined address (?EXPECTED_VOTES[1])",
          "npc": "1431",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "EXPECTED_VOTES" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1430"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?EXPECTED_VOTES[1]) and push value (0)",
          "npc": "1432",
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1431"
        },
        {
          "code": "LoadVar received_votes",
          "explain": "push value (0) of variable \"received_votes\"",
          "npc": "1433",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1432"
        },
        {
          "code": "DelVar received_votes",
          "explain": "delete method variable received_votes",
          "npc": "1434",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1433"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (0, 0); check if both values are the same; push result (True)",
          "npc": "1435",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1434"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "1436",
          "pop": "1",
          "push": [ ],
          "pc": "1435"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "1437",
          "atomic": "1",
          "push": [ ],
          "pc": "1436"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "1438",
          "readonly": "0",
          "push": [ ],
          "pc": "1437"
        },
        {
          "code": "Jump 1415",
          "explain": "set program counter to 1415",
          "npc": "1415",
          "push": [ ],
          "pc": "1438"
        },
        {
          "code": "Cut(i)",
          "explain": "pop index (2) and value ({ 0, 1 }); out of range -> push False",
          "npc": "1416",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1415"
        },
        {
          "code": "JumpCond False 1439",
          "explain": "pop value (False), compare to False, and jump to 1439 if the same",
          "npc": "1439",
          "pop": "1",
          "push": [ ],
          "pc": "1416"
        },
        {
          "code": "DelVar i",
          "explain": "delete method variable i",
          "npc": "1440",
          "push": [ ],
          "pc": "1439"
        },
        {
          "code": "Push PC(1260)",
          "explain": "push program counter constant 1260 (\"winner\")",
          "npc": "1441",
          "push": [ { "type": "pc", "value": "1260" } ],
          "pc": "1440"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1442",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1441"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e) and a program counter value (1260: \"winner\") and call the method",
          "npc": "1260",
          "fp": "3",
          "trace": [
            {
            "pc": "1443",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1260",
            "xpc": "1260",
            "method": "winner(?e)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "23090" }, { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1442"
        },
        {
          "code": "Frame winner(election)",
          "explain": "method \"winner\" with argument election set to ?e",
          "npc": "1261",
          "local": { "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "1260"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1262",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "1261"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1263",
          "local": { },
          "push": [ ],
          "pc": "1262"
        },
        {
          "code": "Push -1",
          "explain": "push constant -1",
          "npc": "1264",
          "push": [ { "type": "int", "value": "-1" } ],
          "pc": "1263"
        },
        {
          "code": "StoreVar high",
          "explain": "pop value (-1) and store locally in variable \"high\"",
          "npc": "1265",
          "local": { "high": { "type": "int", "value": "-1" } },
          "pop": "1",
          "push": [ ],
          "pc": "1264"
        },
        {
          "code": "Push -1",
          "explain": "push constant -1",
          "npc": "1266",
          "push": [ { "type": "int", "value": "-1" } ],
          "pc": "1265"
        },
        {
          "code": "StoreVar idx",
          "explain": "pop value (-1) and store locally in variable \"idx\"",
          "npc": "1267",
          "local": { "high": { "type": "int", "value": "-1" }, "idx": { "type": "int", "value": "-1" } },
          "pop": "1",
          "push": [ ],
          "pc": "1266"
        },
        {
          "code": "Load election$candidates",
          "explain": "push value of shared variable candidates",
          "npc": "1267",
          "failure": "Load: unknown variable ?election$candidates",
          "mode": "failed",
          "push": [ ],
          "pc": "1267"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "120116669": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "140d189f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1501",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1501",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "2",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "3",
          "hvalue": "140e2e869",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1326",
          "pc": "1344",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1326",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "4",
          "hvalue": "140caff69",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1346",
          "pc": "1383",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1383",
            "xpc": "1346",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "terminated"
        },
        {
          "tid": "5",
          "hvalue": "120116669",
          "fp": "3",
          "name": "end_test()",
          "entry": "1385",
          "pc": "1267",
          "sp": "3",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
          "trace": [
            {
            "pc": "1443",
            "xpc": "1385",
            "method": "end_test()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "1267",
            "xpc": "1260",
            "method": "winner(?e)",
            "calltype": "normal",
            "vars": { "high": { "type": "int", "value": "-1" }, "idx": { "type": "int", "value": "-1" } },
            "sp": 2
            }
          ],
          "failure": "Load: unknown variable ?election$candidates",
          "this": { "type": "dict", "value": [] },
          "atomic": "1",
          "mode": "failed"
        }
      ]
    }
  ],
  "code": [
    "Frame __init__()",
    "Jump 52",
    "Frame subseq(s, b, e)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu3",
    "LoadVar b",
    "DelVar b",
    "LoadVar e",
    "DelVar e",
    "Push 1",
    "2-ary -",
    "2-ary ..",
    "Push 0",
    "Cut(x)",
    "JumpCond False 25",
    "LoadVar $accu3",
    "DelVar $accu3",
    "LoadVar s",
    "LoadVar x",
    "DelVar x",
    "Apply",
    "2-ary ListAdd",
    "StoreVar $accu3",
    "Jump 14",
    "DelVar s",
    "DelVar x",
    "LoadVar $accu3",
    "DelVar $accu3",
    "StoreVar result",
    "Return",
    "Jump 52",
    "Frame append(s, e)",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push ()",
    "LoadVar e",
    "DelVar e",
    "2-ary ListAdd",
    "2-ary +",
    "StoreVar result",
    "Return",
    "Jump 52",
    "Frame head(s)",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Apply",
    "StoreVar result",
    "Return",
    "Push PC(55)",
    "Builtin(list$tail)",
    "Jump 371",
    "Frame tail(s)",
    "DelVar result",
    "Push PC(2)",
    "Push ()",
    "LoadVar s",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "LoadVar s",
    "DelVar s",
    "1-ary len",
    "2-ary ListAdd",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sum(a)",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 87",
    "LoadVar result",
    "DelVar result",
    "LoadVar v",
    "DelVar v",
    "2-ary +",
    "StoreVar result",
    "Jump 78",
    "DelVar v",
    "Return",
    "Jump 371",
    "Frame set(a)",
    "DelVar result",
    "Push {}",
    "StoreVar $accu71",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 106",
    "LoadVar $accu71",
    "DelVar $accu71",
    "LoadVar v",
    "DelVar v",
    "2-ary SetAdd",
    "StoreVar $accu71",
    "Jump 97",
    "DelVar v",
    "LoadVar $accu71",
    "DelVar $accu71",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame list(a)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu87",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 128",
    "LoadVar $accu87",
    "DelVar $accu87",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu87",
    "Jump 119",
    "DelVar v",
    "LoadVar $accu87",
    "DelVar $accu87",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame values(d)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu103",
    "LoadVar d",
    "DelVar d",
    "Push 0",
    "Cut(_, v)",
    "DelVar _",
    "JumpCond False 151",
    "LoadVar $accu103",
    "DelVar $accu103",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu103",
    "Jump 141",
    "DelVar v",
    "LoadVar $accu103",
    "DelVar $accu103",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame items(d)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu119",
    "LoadVar d",
    "DelVar d",
    "Push 0",
    "Cut(k, v)",
    "JumpCond False 178",
    "LoadVar $accu119",
    "DelVar $accu119",
    "Push ()",
    "LoadVar k",
    "DelVar k",
    "2-ary ListAdd",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "2-ary ListAdd",
    "StoreVar $accu119",
    "Jump 164",
    "DelVar k",
    "DelVar v",
    "LoadVar $accu119",
    "DelVar $accu119",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame qsort(a)",
    "DelVar result",
    "LoadVar a",
    "Push ()",
    "2-ary ==",
    "JumpCond False 195",
    "DelVar a",
    "Push ()",
    "StoreVar result",
    "Jump 265",
    "Push ()",
    "Push PC(44)",
    "LoadVar a",
    "Apply",
    "2-ary ListAdd",
    "Push PC(55)",
    "LoadVar a",
    "DelVar a",
    "Apply",
    "2-ary ListAdd",
    "StoreVar (pivot, rest)",
    "Push ()",
    "StoreVar $accu156",
    "LoadVar rest",
    "Push 0",
    "DelVar v",
    "Cut(v)",
    "JumpCond False 224",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary <",
    "JumpCond False 210",
    "LoadVar $accu156",
    "DelVar $accu156",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu156",
    "Jump 210",
    "DelVar v",
    "LoadVar $accu156",
    "DelVar $accu156",
    "StoreVar lower",
    "Push ()",
    "StoreVar $accu173",
    "LoadVar rest",
    "DelVar rest",
    "Push 0",
    "DelVar v",
    "Cut(v)",
    "JumpCond False 247",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary >=",
    "JumpCond False 233",
    "LoadVar $accu173",
    "DelVar $accu173",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu173",
    "Jump 233",
    "DelVar v",
    "LoadVar $accu173",
    "DelVar $accu173",
    "StoreVar higher",
    "Push PC(185)",
    "LoadVar lower",
    "DelVar lower",
    "Apply",
    "Push ()",
    "LoadVar pivot",
    "DelVar pivot",
    "2-ary ListAdd",
    "Push PC(185)",
    "LoadVar higher",
    "DelVar higher",
    "Apply",
    "3-ary +",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sorted(d)",
    "DelVar result",
    "Push PC(185)",
    "Push PC(112)",
    "LoadVar d",
    "DelVar d",
    "Apply",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame reversed(d)",
    "DelVar result",
    "LoadVar d",
    "1-ary len",
    "StoreVar n",
    "Push ()",
    "StoreVar $accu216",
    "Push 1",
    "LoadVar n",
    "2-ary ..",
    "Push 0",
    "Cut(i)",
    "JumpCond False 302",
    "LoadVar $accu216",
    "DelVar $accu216",
    "LoadVar d",
    "LoadVar n",
    "LoadVar i",
    "DelVar i",
    "2-ary -",
    "Apply",
    "2-ary ListAdd",
    "StoreVar $accu216",
    "Jump 289",
    "DelVar d",
    "DelVar i",
    "DelVar n",
    "LoadVar $accu216",
    "DelVar $accu216",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame empty()",
    "DelVar result",
    "Push {:}",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame fromSet(s)",
    "DelVar result",
    "Push {:}",
    "StoreVar $accu243",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Cut(elt)",
    "JumpCond False 333",
    "LoadVar $accu243",
    "DelVar $accu243",
    "LoadVar elt",
    "DelVar elt",
    "Push 1",
    "3-ary DictAdd",
    "StoreVar $accu243",
    "Jump 323",
    "DelVar elt",
    "LoadVar $accu243",
    "DelVar $accu243",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame fromList(a)",
    "DelVar result",
    "Push {:}",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 369",
    "LoadVar v",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 362",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 346",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Jump 346",
    "DelVar v",
    "Return",
    "Push PC(374)",
    "Builtin(bag$multiplicity)",
    "Jump 392",
    "Frame multiplicity(bg, elt)",
    "DelVar result",
    "LoadVar elt",
    "LoadVar bg",
    "2-ary in",
    "JumpCond False 387",
    "LoadVar bg",
    "DelVar bg",
    "LoadVar elt",
    "DelVar elt",
    "Apply",
    "StoreVar result",
    "Jump 391",
    "DelVar bg",
    "DelVar elt",
    "Push 0",
    "StoreVar result",
    "Return",
    "Push PC(395)",
    "Builtin(bag$size)",
    "Jump 414",
    "Frame size(bg)",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar bg",
    "DelVar bg",
    "Push 0",
    "Cut(_, c)",
    "DelVar _",
    "JumpCond False 412",
    "LoadVar result",
    "DelVar result",
    "LoadVar c",
    "DelVar c",
    "2-ary +",
    "StoreVar result",
    "Jump 402",
    "DelVar c",
    "Return",
    "Push PC(417)",
    "Builtin(bag$bmin)",
    "Jump 433",
    "Frame bmin(bg)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar bg",
    "Push {:}",
    "2-ary !=",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary min",
    "StoreVar result",
    "Return",
    "Push PC(436)",
    "Builtin(bag$bmax)",
    "Jump 461",
    "Frame bmax(bg)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar bg",
    "Push {:}",
    "2-ary !=",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary max",
    "StoreVar result",
    "Return",
    "Jump 461",
    "Frame bchoose(bg)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "Choose",
    "StoreVar result",
    "Return",
    "Push PC(464)",
    "Builtin(bag$add)",
    "Jump 490",
    "Frame add(bg, elt)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 483",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 489",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Return",
    "Push PC(493)",
    "Builtin(bag$remove)",
    "Jump 1296",
    "Frame remove(bg, elt)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 510",
    "Push ?result",
    "LoadVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary -",
    "StoreVar [result]",
    "LoadVar result",
    "LoadVar elt",
    "Apply",
    "Push 0",
    "2-ary <=",
    "JumpCond False 521",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "DelVar [result]",
    "DelVar elt",
    "Return",
    "Jump 1296",
    "Frame combinations(bg, k)",
    "DelVar result",
    "LoadVar k",
    "Push 0",
    "2-ary ==",
    "JumpCond False 535",
    "DelVar bg",
    "DelVar k",
    "Push { {:} }",
    "StoreVar result",
    "Jump 616",
    "Push PC(395)",
    "LoadVar bg",
    "Apply",
    "StoreVar n",
    "LoadVar k",
    "LoadVar n",
    "2-ary >",
    "JumpCond False 549",
    "DelVar bg",
    "DelVar k",
    "DelVar n",
    "Push {}",
    "StoreVar result",
    "Jump 616",
    "LoadVar k",
    "LoadVar n",
    "DelVar n",
    "2-ary ==",
    "JumpCond False 561",
    "DelVar k",
    "Push {}",
    "LoadVar bg",
    "DelVar bg",
    "2-ary SetAdd",
    "StoreVar result",
    "Jump 616",
    "Push PC(417)",
    "LoadVar bg",
    "Apply",
    "StoreVar hd",
    "Push PC(493)",
    "Push ()",
    "LoadVar bg",
    "DelVar bg",
    "2-ary ListAdd",
    "LoadVar hd",
    "2-ary ListAdd",
    "Apply",
    "StoreVar tl",
    "Push {}",
    "StoreVar $accu454",
    "Push PC(524)",
    "Push ()",
    "LoadVar tl",
    "2-ary ListAdd",
    "LoadVar k",
    "Push 1",
    "2-ary -",
    "2-ary ListAdd",
    "Apply",
    "Push 0",
    "Cut(x)",
    "JumpCond False 601",
    "LoadVar $accu454",
    "DelVar $accu454",
    "Push PC(464)",
    "Push ()",
    "LoadVar x",
    "DelVar x",
    "2-ary ListAdd",
    "LoadVar hd",
    "2-ary ListAdd",
    "Apply",
    "2-ary SetAdd",
    "StoreVar $accu454",
    "Jump 586",
    "DelVar hd",
    "DelVar x",
    "LoadVar $accu454",
    "DelVar $accu454",
    "Push PC(524)",
    "Push ()",
    "LoadVar tl",
    "DelVar tl",
    "2-ary ListAdd",
    "LoadVar k",
    "DelVar k",
    "2-ary ListAdd",
    "Apply",
    "2-ary |",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame atomic_load(p)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "DelVar p",
    "Load",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame atomic_store(p, v)",
    "AtomicInc(lazy)",
    "LoadVar p",
    "DelVar p",
    "LoadVar v",
    "DelVar v",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame tas(lk)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar lk",
    "Load",
    "StoreVar result",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame cas(p, old, new)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "Load",
    "LoadVar old",
    "DelVar old",
    "2-ary ==",
    "StoreVar result",
    "LoadVar result",
    "JumpCond False 667",
    "LoadVar p",
    "DelVar p",
    "LoadVar new",
    "DelVar new",
    "Store",
    "DelVar new",
    "DelVar p",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame BinSema(acquired)",
    "DelVar result",
    "LoadVar acquired",
    "DelVar acquired",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame Lock()",
    "DelVar result",
    "Push PC(672)",
    "Push False",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame acquired(binsema)",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame acquire(binsema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar binsema",
    "Load",
    "1-ary not",
    "JumpCond False 703",
    "Jump 706",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 696",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame release(binsema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar binsema",
    "Load",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push False",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame held(binsema)",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame Condition()",
    "DelVar result",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame wait(c, lk)",
    "Push 0",
    "StoreVar cnt",
    "DelVar cnt",
    "Push ()",
    "Save",
    "Continue",
    "StoreVar ((), ctx)",
    "AtomicInc(lazy)",
    "Push PC(374)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "StoreVar cnt",
    "LoadVar c",
    "Push PC(464)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "LoadVar lk",
    "Push False",
    "Store",
    "AtomicDec",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar lk",
    "Load",
    "1-ary not",
    "JumpCond False 795",
    "Push PC(374)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "LoadVar cnt",
    "2-ary <=",
    "Jump 796",
    "Push False",
    "JumpCond False 801",
    "DelVar c",
    "DelVar cnt",
    "DelVar ctx",
    "Jump 804",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 778",
    "ReadonlyDec",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame notify(c)",
    "AtomicInc(lazy)",
    "LoadVar c",
    "Load",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "2-ary !=",
    "JumpCond False 835",
    "LoadVar c",
    "Push PC(493)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "Push PC(453)",
    "LoadVar c",
    "DelVar c",
    "Load",
    "Apply",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "DelVar c",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame notifyAll(c)",
    "AtomicInc(lazy)",
    "LoadVar c",
    "DelVar c",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame Semaphore(cnt)",
    "DelVar result",
    "LoadVar cnt",
    "DelVar cnt",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame P(sema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar sema",
    "Load",
    "Push 0",
    "2-ary >",
    "JumpCond False 866",
    "Jump 869",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 858",
    "ReadonlyDec",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame V(sema)",
    "AtomicInc(lazy)",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame Queue()",
    "DelVar result",
    "Push ()",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame get(q)",
    "DelVar result",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar q",
    "Load",
    "Push ()",
    "2-ary !=",
    "JumpCond False 908",
    "Jump 911",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 899",
    "ReadonlyDec",
    "Push PC(44)",
    "LoadVar q",
    "Load",
    "Apply",
    "StoreVar result",
    "LoadVar q",
    "Push PC(55)",
    "LoadVar q",
    "DelVar q",
    "Load",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame put(q, item)",
    "AtomicInc(lazy)",
    "LoadVar q",
    "Push PC(32)",
    "Push ()",
    "LoadVar q",
    "DelVar q",
    "Load",
    "2-ary ListAdd",
    "LoadVar item",
    "DelVar item",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1296",
    "Frame Election(n, m)",
    "DelVar result",
    "Push {:}",
    "Push \"locks_can\"",
    "Push ()",
    "Push PC(679)",
    "Push ()",
    "Apply",
    "2-ary ListAdd",
    "LoadVar n",
    "2-ary *",
    "3-ary DictAdd",
    "Push \"locks_cit\"",
    "Push ()",
    "Push PC(679)",
    "Push ()",
    "Apply",
    "2-ary ListAdd",
    "LoadVar m",
    "2-ary *",
    "3-ary DictAdd",
    "Push \"candidates\"",
    "Push [0,]",
    "LoadVar n",
    "DelVar n",
    "2-ary *",
    "3-ary DictAdd",
    "Push \"citizens\"",
    "Push [{ \"voted\":False, \"voted_for\":-1 },]",
    "LoadVar m",
    "DelVar m",
    "2-ary *",
    "3-ary DictAdd",
    "StoreVar result",
    "Return",
    "Jump 1296",
    "Frame vote(election, candidate, citizen)",
    "DelVar result",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Apply",
    "Pop",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted\"",
    "Address",
    "Load",
    "Push False",
    "2-ary ==",
    "JumpCond False 1039",
    "LoadVar election",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted\"",
    "Address",
    "Push True",
    "Store",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted_for\"",
    "Address",
    "LoadVar candidate",
    "Store",
    "Push True",
    "StoreVar result",
    "DelVar result",
    "Push False",
    "StoreVar result",
    "Push PC(714)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "DelVar citizen",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "LoadVar election",
    "DelVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "DelVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1296",
    "Frame withdraw(election, citizen)",
    "DelVar result",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Apply",
    "Pop",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted_for\"",
    "Address",
    "Load",
    "StoreVar candidate",
    "Push PC(714)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Apply",
    "Pop",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Apply",
    "Pop",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted\"",
    "Address",
    "Load",
    "Push True",
    "2-ary ==",
    "JumpCond False 1147",
    "LoadVar election",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted\"",
    "Address",
    "Push False",
    "Store",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted_for\"",
    "Address",
    "Push -1",
    "Store",
    "Push True",
    "StoreVar result",
    "DelVar result",
    "Push False",
    "StoreVar result",
    "Push PC(714)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "DelVar citizen",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "LoadVar election",
    "DelVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "DelVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1296",
    "Frame get_votes(election, candidate)",
    "DelVar result",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Apply",
    "Pop",
    "LoadVar election",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Load",
    "StoreVar result",
    "Push PC(714)",
    "LoadVar election",
    "DelVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "DelVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1296",
    "Frame transfer(election, candidate_from, candidate_to)",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate_from",
    "Address",
    "Apply",
    "Pop",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate_to",
    "Address",
    "Apply",
    "Pop",
    "LoadVar election",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate_to",
    "Address",
    "Dup",
    "Load",
    "LoadVar election",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate_from",
    "Address",
    "Load",
    "2-ary +",
    "Store",
    "LoadVar election",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate_from",
    "Address",
    "Push 0",
    "Store",
    "Push PC(714)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate_from",
    "DelVar candidate_from",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "LoadVar election",
    "DelVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate_to",
    "DelVar candidate_to",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1296",
    "Frame winner(election)",
    "DelVar election",
    "DelVar result",
    "Push -1",
    "StoreVar high",
    "Push -1",
    "StoreVar idx",
    "Load election$candidates",
    "Push 0",
    "Cut(i)",
    "JumpCond False 1290",
    "Push ?election$candidates",
    "LoadVar i",
    "Address",
    "Load",
    "LoadVar high",
    "2-ary >",
    "JumpCond False 1288",
    "DelVar high",
    "DelVar idx",
    "Push ?election$candidates",
    "LoadVar i",
    "Address",
    "Load",
    "StoreVar high",
    "LoadVar i",
    "DelVar i",
    "StoreVar idx",
    "DelVar i",
    "Jump 1269",
    "DelVar high",
    "DelVar i",
    "LoadVar idx",
    "DelVar idx",
    "StoreVar result",
    "Return",
    "Push 0",
    "Store threads_executed",
    "Push 4",
    "Store number_of_spawned_threads",
    "Push 2",
    "Store NUM_CANDIDATES",
    "Push 3",
    "Store NUM_CITIZENS",
    "Push [3, 0]",
    "Store EXPECTED_VOTES",
    "Push 0",
    "Store WINNER",
    "Push PC(944)",
    "Push ()",
    "Load NUM_CANDIDATES",
    "2-ary ListAdd",
    "Load NUM_CITIZENS",
    "2-ary ListAdd",
    "Apply",
    "Store e",
    "Jump 1455",
    "Frame complete()",
    "AtomicInc(lazy)",
    "Load threads_executed",
    "Push 1",
    "2-ary +",
    "Store threads_executed",
    "AtomicDec",
    "Return",
    "Jump 1455",
    "Frame test_vote(e, candidate_idx, citizen_idx)",
    "Push PC(980)",
    "Push ()",
    "LoadVar e",
    "DelVar e",
    "2-ary ListAdd",
    "LoadVar candidate_idx",
    "DelVar candidate_idx",
    "2-ary ListAdd",
    "LoadVar citizen_idx",
    "DelVar citizen_idx",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push PC(1317)",
    "Push ()",
    "Apply",
    "Pop",
    "Return",
    "Jump 1455",
    "Frame test_withdraw(e, first_candidate, second_candidate, citizen_idx)",
    "Push PC(980)",
    "Push ()",
    "LoadVar e",
    "2-ary ListAdd",
    "LoadVar first_candidate",
    "DelVar first_candidate",
    "2-ary ListAdd",
    "LoadVar citizen_idx",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push PC(1063)",
    "Push ()",
    "LoadVar e",
    "2-ary ListAdd",
    "LoadVar citizen_idx",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push PC(980)",
    "Push ()",
    "LoadVar e",
    "DelVar e",
    "2-ary ListAdd",
    "LoadVar second_candidate",
    "DelVar second_candidate",
    "2-ary ListAdd",
    "LoadVar citizen_idx",
    "DelVar citizen_idx",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push PC(1317)",
    "Push ()",
    "Apply",
    "Pop",
    "Return",
    "Jump 1455",
    "Frame end_test()",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "Load threads_executed",
    "Load number_of_spawned_threads",
    "2-ary ==",
    "JumpCond False 1393",
    "Jump 1396",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 1386",
    "ReadonlyDec",
    "Push PC(1200)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push 0",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push {}",
    "Push 0",
    "2-ary SetAdd",
    "Load NUM_CANDIDATES",
    "Push 1",
    "2-ary -",
    "2-ary SetAdd",
    "Push 0",
    "Cut(i)",
    "JumpCond False 1439",
    "Push PC(1171)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "LoadVar i",
    "2-ary ListAdd",
    "Apply",
    "StoreVar received_votes",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push ?EXPECTED_VOTES",
    "LoadVar i",
    "DelVar i",
    "Address",
    "Load",
    "LoadVar received_votes",
    "DelVar received_votes",
    "2-ary ==",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Jump 1415",
    "DelVar i",
    "Push PC(1260)",
    "Push ?e",
    "Apply",
    "StoreVar winner_idx",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar winner_idx",
    "DelVar winner_idx",
    "Load WINNER",
    "2-ary ==",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "AtomicDec",
    "Return",
    "Push PC(1326)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 0",
    "2-ary ListAdd",
    "Push 0",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Push PC(1326)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Push PC(1326)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Push PC(1346)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 0",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push 2",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Push PC(1385)",
    "Push ()",
    "Push {:}",
    "Spawn",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "jump over method definition: set program counter to 52",
    "start of method subseq",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu3",
    "push the value of b",
    "delete method variable b",
    "push the value of e",
    "delete method variable e",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ..",
    "push constant 0",
    "get next element and assign to x; push False or True depending on success",
    "check if loop is done: pop a value and jump to 25 if the value is False",
    "load accumulator: push the value of $accu3",
    "delete method variable $accu3",
    "push the value of s",
    "push the value of x",
    "delete method variable x",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu3",
    "set program counter to 14",
    "delete method variable s",
    "delete method variable x",
    "load final accumulator result: push the value of $accu3",
    "delete method variable $accu3",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 52",
    "start of method append",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "building a tuple: push constant ()",
    "push the value of e",
    "delete method variable e",
    "pop 2 values and push the result of applying ListAdd",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 52",
    "start of method head",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(55)",
    "top of stack is a built-in operation called list$tail",
    "jump over method definition: set program counter to 371",
    "start of method tail",
    "delete method variable result",
    "push constant PC(2)",
    "building a tuple: push constant ()",
    "push the value of s",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of s",
    "delete method variable s",
    "pop 1 value and push the result of applying len",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method sum",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 87 if the value is False",
    "push the value of result",
    "delete method variable result",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 78",
    "delete method variable v",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method set",
    "delete method variable result",
    "initialize accumulator for set comprehension: push constant {}",
    "initialize accumulator for set comprehension: pop a value and store in $accu71",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 106 if the value is False",
    "load accumulator: push the value of $accu71",
    "delete method variable $accu71",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying SetAdd",
    "update accumulator: pop a value and store in $accu71",
    "set program counter to 97",
    "delete method variable v",
    "load final accumulator result: push the value of $accu71",
    "delete method variable $accu71",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method list",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu87",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 128 if the value is False",
    "load accumulator: push the value of $accu87",
    "delete method variable $accu87",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu87",
    "set program counter to 119",
    "delete method variable v",
    "load final accumulator result: push the value of $accu87",
    "delete method variable $accu87",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method values",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu103",
    "push the value of d",
    "delete method variable d",
    "push constant 0",
    "get next element and assign to _:v; push False or True depending on success",
    "delete method variable _",
    "check if loop is done: pop a value and jump to 151 if the value is False",
    "load accumulator: push the value of $accu103",
    "delete method variable $accu103",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu103",
    "set program counter to 141",
    "delete method variable v",
    "load final accumulator result: push the value of $accu103",
    "delete method variable $accu103",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method items",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu119",
    "push the value of d",
    "delete method variable d",
    "push constant 0",
    "get next element and assign to k:v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 178 if the value is False",
    "load accumulator: push the value of $accu119",
    "delete method variable $accu119",
    "building a tuple: push constant ()",
    "push the value of k",
    "delete method variable k",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu119",
    "set program counter to 164",
    "delete method variable k",
    "delete method variable v",
    "load final accumulator result: push the value of $accu119",
    "delete method variable $accu119",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method qsort",
    "delete method variable result",
    "push the value of a",
    "push constant ()",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 195 if the value is False",
    "delete method variable a",
    "push constant ()",
    "pop a value and store in result",
    "set program counter to 265",
    "building a tuple: push constant ()",
    "push constant PC(44)",
    "push the value of a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(55)",
    "push the value of a",
    "delete method variable a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in (pivot, rest)",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu156",
    "push the value of rest",
    "push constant 0",
    "delete method variable v",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 224 if the value is False",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 210 if the value is False",
    "load accumulator: push the value of $accu156",
    "delete method variable $accu156",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu156",
    "set program counter to 210",
    "delete method variable v",
    "load final accumulator result: push the value of $accu156",
    "delete method variable $accu156",
    "pop a value and store in lower",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu173",
    "push the value of rest",
    "delete method variable rest",
    "push constant 0",
    "delete method variable v",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 247 if the value is False",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying >=",
    "pop a value and jump to 233 if the value is False",
    "load accumulator: push the value of $accu173",
    "delete method variable $accu173",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu173",
    "set program counter to 233",
    "delete method variable v",
    "load final accumulator result: push the value of $accu173",
    "delete method variable $accu173",
    "pop a value and store in higher",
    "push constant PC(185)",
    "push the value of lower",
    "delete method variable lower",
    "pop a pc or dictionary f and an index i and push f(i)",
    "building a tuple: push constant ()",
    "push the value of pivot",
    "delete method variable pivot",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(185)",
    "push the value of higher",
    "delete method variable higher",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method sorted",
    "delete method variable result",
    "push constant PC(185)",
    "push constant PC(112)",
    "push the value of d",
    "delete method variable d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method reversed",
    "delete method variable result",
    "push the value of d",
    "pop 1 value and push the result of applying len",
    "pop a value and store in n",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu216",
    "push constant 1",
    "push the value of n",
    "pop 2 values and push the result of applying ..",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 302 if the value is False",
    "load accumulator: push the value of $accu216",
    "delete method variable $accu216",
    "push the value of d",
    "push the value of n",
    "push the value of i",
    "delete method variable i",
    "pop 2 values and push the result of applying -",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu216",
    "set program counter to 289",
    "delete method variable d",
    "delete method variable i",
    "delete method variable n",
    "load final accumulator result: push the value of $accu216",
    "delete method variable $accu216",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method empty",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method fromSet",
    "delete method variable result",
    "initialize accumulator for dict comprehension: push constant {:}",
    "initialize accumulator for dict comprehension: pop a value and store in $accu243",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "get next element and assign to elt; push False or True depending on success",
    "check if loop is done: pop a value and jump to 333 if the value is False",
    "load accumulator: push the value of $accu243",
    "delete method variable $accu243",
    "push the value of elt",
    "delete method variable elt",
    "push constant 1",
    "pop 3 values and push the result of applying DictAdd",
    "update accumulator: pop a value and store in $accu243",
    "set program counter to 323",
    "delete method variable elt",
    "load final accumulator result: push the value of $accu243",
    "delete method variable $accu243",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method fromList",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 369 if the value is False",
    "push the value of v",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 362 if the value is False",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 346",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 346",
    "delete method variable v",
    "restore caller method state and push result",
    "push constant PC(374)",
    "top of stack is a built-in operation called bag$multiplicity",
    "jump over method definition: set program counter to 392",
    "start of method multiplicity",
    "delete method variable result",
    "push the value of elt",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 387 if the value is False",
    "push the value of bg",
    "delete method variable bg",
    "push the value of elt",
    "delete method variable elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "set program counter to 391",
    "delete method variable bg",
    "delete method variable elt",
    "push constant 0",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(395)",
    "top of stack is a built-in operation called bag$size",
    "jump over method definition: set program counter to 414",
    "start of method size",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of bg",
    "delete method variable bg",
    "push constant 0",
    "get next element and assign to _:c; push False or True depending on success",
    "delete method variable _",
    "check if loop is done: pop a value and jump to 412 if the value is False",
    "push the value of result",
    "delete method variable result",
    "push the value of c",
    "delete method variable c",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 402",
    "delete method variable c",
    "restore caller method state and push result",
    "push constant PC(417)",
    "top of stack is a built-in operation called bag$bmin",
    "jump over method definition: set program counter to 433",
    "start of method bmin",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bg",
    "push constant {:}",
    "pop 2 values and push the result of applying !=",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying min",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(436)",
    "top of stack is a built-in operation called bag$bmax",
    "jump over method definition: set program counter to 461",
    "start of method bmax",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bg",
    "push constant {:}",
    "pop 2 values and push the result of applying !=",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying max",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 461",
    "start of method bchoose",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop a set value and push one of its elements",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(464)",
    "top of stack is a built-in operation called bag$add",
    "jump over method definition: set program counter to 490",
    "start of method add",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 483 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 489",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "restore caller method state and push result",
    "push constant PC(493)",
    "top of stack is a built-in operation called bag$remove",
    "jump over method definition: set program counter to 1296",
    "start of method remove",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 510 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and the address of a method variable and store the value at that address",
    "push the value of result",
    "push the value of elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying <=",
    "pop a value and jump to 521 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "pop an address of a method variable and delete that variable",
    "delete method variable elt",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method combinations",
    "delete method variable result",
    "push the value of k",
    "push constant 0",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 535 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "push constant { {:} }",
    "pop a value and store in result",
    "set program counter to 616",
    "push constant PC(395)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in n",
    "push the value of k",
    "push the value of n",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 549 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "delete method variable n",
    "push constant {}",
    "pop a value and store in result",
    "set program counter to 616",
    "push the value of k",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 561 if the value is False",
    "delete method variable k",
    "push constant {}",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying SetAdd",
    "pop a value and store in result",
    "set program counter to 616",
    "push constant PC(417)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in hd",
    "push constant PC(493)",
    "building a tuple: push constant ()",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of hd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in tl",
    "initialize accumulator for set comprehension: push constant {}",
    "initialize accumulator for set comprehension: pop a value and store in $accu454",
    "push constant PC(524)",
    "building a tuple: push constant ()",
    "push the value of tl",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of k",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "get next element and assign to x; push False or True depending on success",
    "check if loop is done: pop a value and jump to 601 if the value is False",
    "load accumulator: push the value of $accu454",
    "delete method variable $accu454",
    "push constant PC(464)",
    "building a tuple: push constant ()",
    "push the value of x",
    "delete method variable x",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of hd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying SetAdd",
    "update accumulator: pop a value and store in $accu454",
    "set program counter to 586",
    "delete method variable hd",
    "delete method variable x",
    "load final accumulator result: push the value of $accu454",
    "delete method variable $accu454",
    "push constant PC(524)",
    "building a tuple: push constant ()",
    "push the value of tl",
    "delete method variable tl",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of k",
    "delete method variable k",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying |",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method atomic_load",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "delete method variable p",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method atomic_store",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "delete method variable p",
    "push the value of v",
    "delete method variable v",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method tas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method cas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "pop an address and push the value at the address",
    "push the value of old",
    "delete method variable old",
    "pop 2 values and push the result of applying ==",
    "pop a value and store in result",
    "push the value of result",
    "pop a value and jump to 667 if the value is False",
    "push the value of p",
    "delete method variable p",
    "push the value of new",
    "delete method variable new",
    "pop a value and an address and store the value at the address",
    "delete method variable new",
    "delete method variable p",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method BinSema",
    "delete method variable result",
    "push the value of acquired",
    "delete method variable acquired",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method Lock",
    "delete method variable result",
    "push constant PC(672)",
    "push constant False",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method acquired",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method acquire",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 703 if the value is False",
    "set program counter to 706",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 696",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method release",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method held",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method Condition",
    "delete method variable result",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method wait",
    "push constant 0",
    "pop a value and store in cnt",
    "delete method variable cnt",
    "push constant ()",
    "pop a value and save context",
    "a no-op, must follow a Stop operation",
    "pop a value and store in ((), ctx)",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(374)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in cnt",
    "push the value of c",
    "push constant PC(464)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "push the value of lk",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 795 if the value is False",
    "push constant PC(374)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of cnt",
    "pop 2 values and push the result of applying <=",
    "set program counter to 796",
    "push constant False",
    "pop a value and jump to 801 if the value is False",
    "delete method variable c",
    "delete method variable cnt",
    "delete method variable ctx",
    "set program counter to 804",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 778",
    "decrement readonly counter of context",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method notify",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 835 if the value is False",
    "push the value of c",
    "push constant PC(493)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(453)",
    "push the value of c",
    "delete method variable c",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "delete method variable c",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method notifyAll",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "delete method variable c",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method Semaphore",
    "delete method variable result",
    "push the value of cnt",
    "delete method variable cnt",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method P",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of sema",
    "pop an address and push the value at the address",
    "push constant 0",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 866 if the value is False",
    "set program counter to 869",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 858",
    "decrement readonly counter of context",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method V",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method Queue",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method get",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of q",
    "pop an address and push the value at the address",
    "push constant ()",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 908 if the value is False",
    "set program counter to 911",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 899",
    "decrement readonly counter of context",
    "push constant PC(44)",
    "push the value of q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "push the value of q",
    "push constant PC(55)",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method put",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of q",
    "push constant PC(32)",
    "building a tuple: push constant ()",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of item",
    "delete method variable item",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method Election",
    "delete method variable result",
    "push constant {:}",
    "push constant \"locks_can\"",
    "building a tuple: push constant ()",
    "push constant PC(679)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of n",
    "pop 2 values and push the result of applying *",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"locks_cit\"",
    "building a tuple: push constant ()",
    "push constant PC(679)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of m",
    "pop 2 values and push the result of applying *",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"candidates\"",
    "push constant [0,]",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying *",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"citizens\"",
    "push constant [{ \"voted\":False, \"voted_for\":-1 },]",
    "push the value of m",
    "delete method variable m",
    "pop 2 values and push the result of applying *",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method vote",
    "delete method variable result",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push constant False",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1039 if the value is False",
    "push the value of election",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted_for\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "delete method variable result",
    "push constant False",
    "pop a value and store in result",
    "push constant PC(714)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "delete method variable citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of election",
    "delete method variable election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "delete method variable candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method withdraw",
    "delete method variable result",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted_for\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in candidate",
    "push constant PC(714)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push constant True",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1147 if the value is False",
    "push the value of election",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted_for\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant -1",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "delete method variable result",
    "push constant False",
    "pop a value and store in result",
    "push constant PC(714)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "delete method variable citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of election",
    "delete method variable election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "delete method variable candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method get_votes",
    "delete method variable result",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of election",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push constant PC(714)",
    "push the value of election",
    "delete method variable election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "delete method variable candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method transfer",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_from",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_to",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of election",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_to",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push the value of election",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_from",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_from",
    "combine the top two values on the stack into an address and push the result",
    "push constant 0",
    "pop a value and an address and store the value at the address",
    "push constant PC(714)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_from",
    "delete method variable candidate_from",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of election",
    "delete method variable election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_to",
    "delete method variable candidate_to",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1296",
    "start of method winner",
    "delete method variable election",
    "delete method variable result",
    "push constant -1",
    "pop a value and store in high",
    "push constant -1",
    "pop a value and store in idx",
    "push value of shared variable candidates",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 1290 if the value is False",
    "push constant ?election$candidates",
    "push the value of i",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of high",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 1288 if the value is False",
    "delete method variable high",
    "delete method variable idx",
    "push constant ?election$candidates",
    "push the value of i",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store in high",
    "push the value of i",
    "delete method variable i",
    "pop a value and store in idx",
    "delete method variable i",
    "set program counter to 1269",
    "delete method variable high",
    "delete method variable i",
    "push the value of idx",
    "delete method variable idx",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant 0",
    "pop a value and store it in shared variable threads_executed",
    "push constant 4",
    "pop a value and store it in shared variable number_of_spawned_threads",
    "push constant 2",
    "pop a value and store it in shared variable NUM_CANDIDATES",
    "push constant 3",
    "pop a value and store it in shared variable NUM_CITIZENS",
    "push constant [3, 0]",
    "pop a value and store it in shared variable EXPECTED_VOTES",
    "push constant 0",
    "pop a value and store it in shared variable WINNER",
    "push constant PC(944)",
    "building a tuple: push constant ()",
    "push value of shared variable NUM_CANDIDATES",
    "pop 2 values and push the result of applying ListAdd",
    "push value of shared variable NUM_CITIZENS",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable e",
    "jump over method definition: set program counter to 1455",
    "start of method complete",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push value of shared variable threads_executed",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and store it in shared variable threads_executed",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1455",
    "start of method test_vote",
    "push constant PC(980)",
    "building a tuple: push constant ()",
    "push the value of e",
    "delete method variable e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of candidate_idx",
    "delete method variable candidate_idx",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of citizen_idx",
    "delete method variable citizen_idx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1317)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1455",
    "start of method test_withdraw",
    "push constant PC(980)",
    "building a tuple: push constant ()",
    "push the value of e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of first_candidate",
    "delete method variable first_candidate",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of citizen_idx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1063)",
    "building a tuple: push constant ()",
    "push the value of e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of citizen_idx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(980)",
    "building a tuple: push constant ()",
    "push the value of e",
    "delete method variable e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of second_candidate",
    "delete method variable second_candidate",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of citizen_idx",
    "delete method variable citizen_idx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1317)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1455",
    "start of method end_test",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push value of shared variable threads_executed",
    "push value of shared variable number_of_spawned_threads",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1393 if the value is False",
    "set program counter to 1396",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 1386",
    "decrement readonly counter of context",
    "push constant PC(1200)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 0",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant {}",
    "push constant 0",
    "pop 2 values and push the result of applying SetAdd",
    "push value of shared variable NUM_CANDIDATES",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying SetAdd",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 1439 if the value is False",
    "push constant PC(1171)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of i",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in received_votes",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant ?EXPECTED_VOTES",
    "push the value of i",
    "delete method variable i",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of received_votes",
    "delete method variable received_votes",
    "pop 2 values and push the result of applying ==",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "set program counter to 1415",
    "delete method variable i",
    "push constant PC(1260)",
    "push constant ?e",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in winner_idx",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of winner_idx",
    "delete method variable winner_idx",
    "push value of shared variable WINNER",
    "pop 2 values and push the result of applying ==",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "push constant PC(1326)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 0",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 0",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "push constant PC(1326)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "push constant PC(1326)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "push constant PC(1346)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 0",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 2",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "push constant PC(1385)",
    "push constant ()",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "1444": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "398": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "12", "stmt": [24,5,24,14], "code": "    result = 0" },
    "1114": { "file": "electionimpl.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "48", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "813": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "16", "stmt": [56,16,58,6], "code": "    atomically if !c != bag.empty():" },
    "115": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1321": { "file": "electiontest.hny", "line": "16", "column": "9", "endline": "16", "endcolumn": "29", "stmt": [16,9,16,29], "code": "        threads_executed += 1" },
    "209": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "193": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "9", "endline": "40", "endcolumn": "16", "stmt": [40,9,40,19], "code": "        result = []" },
    "1410": { "file": "electiontest.hny", "line": "32", "column": "22", "endline": "32", "endcolumn": "35", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "895": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "12", "stmt": [73,5,73,15], "code": "    result = []" },
    "72": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "14", "endline": "17", "endcolumn": "14", "stmt": [17,5,17,14], "code": "    result = 0" },
    "1032": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "35", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "829": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "42", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "143": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1453": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "307": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "9", "endline": "54", "endcolumn": "16", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "263": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "60", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1389": { "file": "electiontest.hny", "line": "29", "column": "41", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "845": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "21", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "590": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1401": { "file": "electiontest.hny", "line": "31", "column": "31", "endline": "31", "endcolumn": "31", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "43": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "3", "stmt": [8,1,8,12], "code": "def head(s):" },
    "1159": { "file": "electionimpl.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "11", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1148": { "file": "electionimpl.hny", "line": "48", "column": "14", "endline": "48", "endcolumn": "18", "stmt": [48,5,48,18], "code": "    result = False" },
    "1487": { "file": "electiontest.hny", "line": "42", "column": "22", "endline": "42", "endcolumn": "22", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "879": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "3", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "835": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "36", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "50": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "12", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "993": { "file": "electionimpl.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "33", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "540": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "20", "endline": "63", "endcolumn": "20", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "665": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "18", "endline": "19", "endcolumn": "20", "stmt": [19,13,19,20], "code": "            !p = new" },
    "259": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "48", "endline": "45", "endcolumn": "52", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "705": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "32", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "1136": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "16", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "889": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "943": { "file": "electionimpl.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "stmt": [4,1,4,19], "code": "def Election(n, m):" },
    "530": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "188": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "13", "endline": "39", "endcolumn": "14", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "1496": { "file": "electiontest.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "32", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1462": { "file": "electiontest.hny", "line": "39", "column": "17", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "942": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "17", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "454": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "357": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1373": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "755": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "19", "endline": "49", "endcolumn": "34", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "650": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "3", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "1336": { "file": "electiontest.hny", "line": "19", "column": "37", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1303": { "file": "electiontest.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "14", "stmt": [8,1,8,16], "code": "NUM_CITIZENS = 3" },
    "932": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "34", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "354": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "20", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "338": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "1471": { "file": "electiontest.hny", "line": "40", "column": "24", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1310": { "file": "electiontest.hny", "line": "12", "column": "23", "endline": "12", "endcolumn": "36", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "933": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "34", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "600": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "74", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1125": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "44", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "878": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "12", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "418": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "348": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "12", "endline": "10", "endcolumn": "12", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "304": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "992": { "file": "electionimpl.hny", "line": "17", "column": "25", "endline": "17", "endcolumn": "33", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "1362": { "file": "electiontest.hny", "line": "24", "column": "26", "endline": "24", "endcolumn": "36", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "888": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "23", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "404": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1158": { "file": "electionimpl.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "44", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1261": { "file": "electionimpl.hny", "line": "77", "column": "16", "endline": "77", "endcolumn": "17", "stmt": [77,5,77,17], "code": "    var high = -1" },
    "1235": { "file": "electionimpl.hny", "line": "70", "column": "26", "endline": "70", "endcolumn": "39", "stmt": [70,5,70,44], "code": "    election->candidates[candidate_from] = 0" },
    "62": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "419": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "1124": { "file": "electionimpl.hny", "line": "44", "column": "44", "endline": "44", "endcolumn": "44", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "914": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "28", "endline": "77", "endcolumn": "29", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "828": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "42", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "42": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "17", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "754": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "48", "column": "9", "endline": "48", "endcolumn": "18", "stmt": [48,9,48,19], "code": "        atomically:" },
    "1372": { "file": "electiontest.hny", "line": "25", "column": "22", "endline": "25", "endcolumn": "37", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "403": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1420": { "file": "electiontest.hny", "line": "33", "column": "53", "endline": "33", "endcolumn": "57", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1031": { "file": "electionimpl.hny", "line": "23", "column": "28", "endline": "23", "endcolumn": "34", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "128": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "114": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1472": { "file": "electiontest.hny", "line": "40", "column": "17", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1311": { "file": "electiontest.hny", "line": "12", "column": "23", "endline": "12", "endcolumn": "50", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "453": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "16", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "1201": { "file": "electionimpl.hny", "line": "66", "column": "5", "endline": "66", "endcolumn": "11", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "566": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "178": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1320": { "file": "electiontest.hny", "line": "16", "column": "29", "endline": "16", "endcolumn": "29", "stmt": [16,9,16,29], "code": "        threads_executed += 1" },
    "931": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1023": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "35", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "591": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "564": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "17", "endline": "68", "endcolumn": "24", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "704": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "915": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "18", "endline": "77", "endcolumn": "30", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "1213": { "file": "electionimpl.hny", "line": "67", "column": "35", "endline": "67", "endcolumn": "46", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "768": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "27", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "707": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "10", "endline": "32", "endcolumn": "16", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "208": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "34", "endline": "43", "endcolumn": "37", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1337": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1223": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "78", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "565": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "44", "endline": "68", "endcolumn": "49", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "531": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "1302": { "file": "electiontest.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "16", "stmt": [8,1,8,16], "code": "NUM_CITIZENS = 3" },
    "1454": { "file": "electiontest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "15", "stmt": [28,1,28,15], "code": "def end_test():" },
    "757": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "37", "endline": "49", "endcolumn": "37", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1388": { "file": "electiontest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "36", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1271": { "file": "electionimpl.hny", "line": "80", "column": "12", "endline": "80", "endcolumn": "21", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "258": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "43", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1013": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "39", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "541": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "16", "endline": "63", "endcolumn": "20", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "1402": { "file": "electiontest.hny", "line": "31", "column": "27", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "452": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "3", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "1495": { "file": "electiontest.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "32", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1370": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "847": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "1470": { "file": "electiontest.hny", "line": "40", "column": "17", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1137": { "file": "electionimpl.hny", "line": "46", "column": "19", "endline": "46", "endcolumn": "26", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "897": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "3", "stmt": [75,1,75,11], "code": "def get(q):" },
    "1220": { "file": "electionimpl.hny", "line": "69", "column": "26", "endline": "69", "endcolumn": "37", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "509": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "22", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1174": { "file": "electionimpl.hny", "line": "56", "column": "15", "endline": "56", "endcolumn": "22", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "811": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "3", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "559": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "17", "endline": "66", "endcolumn": "24", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "2": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "20", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "1363": { "file": "electiontest.hny", "line": "24", "column": "23", "endline": "24", "endcolumn": "36", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "837": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "14", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "1461": { "file": "electiontest.hny", "line": "39", "column": "24", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1003": { "file": "electionimpl.hny", "line": "20", "column": "35", "endline": "20", "endcolumn": "40", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "1455": { "file": "electiontest.hny", "line": "39", "column": "7", "endline": "39", "endcolumn": "15", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "834": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "9", "endline": "57", "endcolumn": "12", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1203": { "file": "electionimpl.hny", "line": "66", "column": "25", "endline": "66", "endcolumn": "33", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "1234": { "file": "electionimpl.hny", "line": "70", "column": "5", "endline": "70", "endcolumn": "24", "stmt": [70,5,70,44], "code": "    election->candidates[candidate_from] = 0" },
    "51": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "12", "stmt": [8,1,8,12], "code": "def head(s):" },
    "1273": { "file": "electionimpl.hny", "line": "80", "column": "12", "endline": "80", "endcolumn": "24", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "3": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1104": { "file": "electionimpl.hny", "line": "40", "column": "5", "endline": "40", "endcolumn": "44", "stmt": [40,5,40,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "894": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "14", "endline": "73", "endcolumn": "15", "stmt": [73,5,73,15], "code": "    result = []" },
    "12": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1073": { "file": "electionimpl.hny", "line": "35", "column": "21", "endline": "35", "endcolumn": "28", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "1211": { "file": "electionimpl.hny", "line": "67", "column": "25", "endline": "67", "endcolumn": "33", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "1030": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "26", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "567": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "52", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1260": { "file": "electionimpl.hny", "line": "76", "column": "1", "endline": "76", "endcolumn": "21", "stmt": [76,1,76,21], "code": "def winner(election):" },
    "844": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "30", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "1210": { "file": "electionimpl.hny", "line": "67", "column": "15", "endline": "67", "endcolumn": "22", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "830": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "41", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "568": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "52", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1300": { "file": "electiontest.hny", "line": "7", "column": "18", "endline": "7", "endcolumn": "18", "stmt": [7,1,7,18], "code": "NUM_CANDIDATES = 2" },
    "56": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "19", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1400": { "file": "electiontest.hny", "line": "31", "column": "27", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1360": { "file": "electiontest.hny", "line": "24", "column": "23", "endline": "24", "endcolumn": "23", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "896": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "12", "stmt": [72,1,72,12], "code": "def Queue():" },
    "840": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "16", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "890": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "12", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "1334": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1270": { "file": "electionimpl.hny", "line": "79", "column": "5", "endline": "79", "endcolumn": "7", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "1411": { "file": "electiontest.hny", "line": "32", "column": "38", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1494": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1313": { "file": "electiontest.hny", "line": "12", "column": "23", "endline": "12", "endcolumn": "50", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "1421": { "file": "electiontest.hny", "line": "33", "column": "57", "endline": "33", "endcolumn": "57", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1130": { "file": "electionimpl.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "34", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "1198": { "file": "electionimpl.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "35", "stmt": [54,1,54,35], "code": "def get_votes(election, candidate):" },
    "1200": { "file": "electionimpl.hny", "line": "64", "column": "1", "endline": "64", "endcolumn": "53", "stmt": [64,1,64,53], "code": "def transfer(election, candidate_from, candidate_to):" },
    "1460": { "file": "electiontest.hny", "line": "39", "column": "17", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1323": { "file": "electiontest.hny", "line": "15", "column": "5", "endline": "15", "endcolumn": "15", "stmt": [15,5,15,15], "code": "    atomically:" },
    "1237": { "file": "electionimpl.hny", "line": "70", "column": "44", "endline": "70", "endcolumn": "44", "stmt": [70,5,70,44], "code": "    election->candidates[candidate_from] = 0" },
    "846": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "19", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "812": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "14", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "1445": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "1164": { "file": "electionimpl.hny", "line": "52", "column": "35", "endline": "52", "endcolumn": "43", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "836": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "36", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "1343": { "file": "electiontest.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "14", "stmt": [20,5,20,14], "code": "    complete()" },
    "709": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "20", "endline": "32", "endcolumn": "23", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "450": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "5", "endline": "36", "endcolumn": "12", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "997": { "file": "electionimpl.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "44", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "71": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1037": { "file": "electionimpl.hny", "line": "24", "column": "18", "endline": "24", "endcolumn": "21", "stmt": [24,9,24,21], "code": "        result = True" },
    "1422": { "file": "electiontest.hny", "line": "33", "column": "53", "endline": "33", "endcolumn": "57", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1119": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "28", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "361": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "23", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "9": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "34", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "533": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "9", "endline": "60", "endcolumn": "16", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "457": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "21", "endline": "39", "endcolumn": "28", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "1322": { "file": "electiontest.hny", "line": "16", "column": "9", "endline": "16", "endcolumn": "27", "stmt": [16,9,16,29], "code": "        threads_executed += 1" },
    "400": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "16", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1350": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "937": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "37", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "407": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "19", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "1441": { "file": "electiontest.hny", "line": "36", "column": "43", "endline": "36", "endcolumn": "43", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "1450": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "18", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "947": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "7", "endcolumn": "18", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "618": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "1250": { "file": "electionimpl.hny", "line": "74", "column": "15", "endline": "74", "endcolumn": "22", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "119": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1335": { "file": "electiontest.hny", "line": "19", "column": "37", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1221": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "38", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "111": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "3", "stmt": [26,1,26,12], "code": "def list(a):" },
    "1108": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "25", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "1474": { "file": "electiontest.hny", "line": "40", "column": "1", "endline": "40", "endcolumn": "25", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "507": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "24", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1404": { "file": "electiontest.hny", "line": "31", "column": "27", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1241": { "file": "electionimpl.hny", "line": "73", "column": "25", "endline": "73", "endcolumn": "33", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "1178": { "file": "electionimpl.hny", "line": "56", "column": "15", "endline": "56", "endcolumn": "44", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1413": { "file": "electiontest.hny", "line": "32", "column": "19", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1131": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "35", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "543": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "1465": { "file": "electiontest.hny", "line": "40", "column": "7", "endline": "40", "endcolumn": "15", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "759": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "936": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "37", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "593": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "36", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "756": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1451": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "1312": { "file": "electiontest.hny", "line": "12", "column": "39", "endline": "12", "endcolumn": "50", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "401": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "990": { "file": "electionimpl.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "11", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "946": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "41": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "5", "endline": "6", "endcolumn": "12", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "706": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "264": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "13", "endline": "45", "endcolumn": "20", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "532": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "996": { "file": "electionimpl.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "44", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "369": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "366": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "25", "endline": "13", "endcolumn": "25", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "8": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "34", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1493": { "file": "electiontest.hny", "line": "42", "column": "31", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "604": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1475": { "file": "electiontest.hny", "line": "41", "column": "7", "endline": "41", "endcolumn": "15", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "542": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "13", "endline": "63", "endcolumn": "14", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "1199": { "file": "electionimpl.hny", "line": "64", "column": "1", "endline": "64", "endcolumn": "3", "stmt": [64,1,64,53], "code": "def transfer(election, candidate_from, candidate_to):" },
    "1129": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "26", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "654": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "19", "endline": "17", "endcolumn": "19", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "451": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "1412": { "file": "electiontest.hny", "line": "32", "column": "22", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "266": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "3", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "592": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "36", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "557": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "1423": { "file": "electiontest.hny", "line": "33", "column": "34", "endline": "33", "endcolumn": "58", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1236": { "file": "electionimpl.hny", "line": "70", "column": "5", "endline": "70", "endcolumn": "40", "stmt": [70,5,70,44], "code": "    election->candidates[candidate_from] = 0" },
    "61": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "24", "endline": "13", "endcolumn": "24", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "606": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "13": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "558": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "607": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "49", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "656": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "24", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1036": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "47", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "508": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "657": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "24", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1405": { "file": "electiontest.hny", "line": "31", "column": "9", "endline": "31", "endcolumn": "35", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1240": { "file": "electionimpl.hny", "line": "73", "column": "15", "endline": "73", "endcolumn": "22", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "930": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "21", "endline": "81", "endcolumn": "31", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "267": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "14", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "1353": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "940": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "19", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1392": { "file": "electiontest.hny", "line": "29", "column": "65", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1473": { "file": "electiontest.hny", "line": "40", "column": "1", "endline": "40", "endcolumn": "25", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "998": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "15", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "602": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1088": { "file": "electionimpl.hny", "line": "36", "column": "5", "endline": "36", "endcolumn": "44", "stmt": [36,5,36,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "402": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1179": { "file": "electionimpl.hny", "line": "56", "column": "5", "endline": "56", "endcolumn": "46", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1251": { "file": "electionimpl.hny", "line": "74", "column": "25", "endline": "74", "endcolumn": "33", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "265": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "13", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "384": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "24", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "229": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "991": { "file": "electionimpl.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "22", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "938": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "163": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1464": { "file": "electiontest.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "25", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1168": { "file": "electionimpl.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "46", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "363": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "20", "endline": "13", "endcolumn": "20", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "941": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "41", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "374": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "26", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1132": { "file": "electionimpl.hny", "line": "45", "column": "36", "endline": "45", "endcolumn": "41", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "948": { "file": "electionimpl.hny", "line": "7", "column": "21", "endline": "7", "endcolumn": "27", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1352": { "file": "electiontest.hny", "line": "23", "column": "22", "endline": "23", "endcolumn": "36", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "1149": { "file": "electionimpl.hny", "line": "48", "column": "5", "endline": "48", "endcolumn": "12", "stmt": [48,5,48,18], "code": "    result = False" },
    "261": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "54", "endline": "45", "endcolumn": "59", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "959": { "file": "electionimpl.hny", "line": "8", "column": "25", "endline": "8", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "405": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "324": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "112": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "12", "stmt": [26,1,26,12], "code": "def list(a):" },
    "974": { "file": "electionimpl.hny", "line": "11", "column": "54", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "1239": { "file": "electionimpl.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "11", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "702": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "32", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "601": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "506": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "327": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1443": { "file": "electiontest.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "24", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "1452": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "909": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "455": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "52": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "11", "column": "9", "endline": "11", "endcolumn": "12", "stmt": [11,1,11,24], "code": "builtin tail \"list$tail\"" },
    "924": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "819": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "19", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "818": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "752": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "19", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "651": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "21", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "63": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "31", "endline": "13", "endcolumn": "31", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "619": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "16", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "360": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "24", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "73": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "14", "endline": "17", "endcolumn": "14", "stmt": [17,5,17,14], "code": "    result = 0" },
    "11": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1035": { "file": "electionimpl.hny", "line": "23", "column": "49", "endline": "23", "endcolumn": "57", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "1492": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "556": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "377": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "16", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "40": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "21", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1109": { "file": "electionimpl.hny", "line": "43", "column": "27", "endline": "43", "endcolumn": "33", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "701": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "158": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "53": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "11", "column": "1", "endline": "11", "endcolumn": "24", "stmt": [11,1,11,24], "code": "builtin tail \"list$tail\"" },
    "1403": { "file": "electiontest.hny", "line": "31", "column": "34", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "387": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "228": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "262": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "48", "endline": "45", "endcolumn": "60", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "10": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "36", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "925": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "11", "stmt": [75,1,75,11], "code": "def get(q):" },
    "1463": { "file": "electiontest.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "25", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "278": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "16", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "703": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "555": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "110": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "11", "stmt": [22,1,22,11], "code": "def set(a):" },
    "653": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "14", "stmt": [16,5,16,15], "code": "    atomically:" },
    "1291": { "file": "electionimpl.hny", "line": "83", "column": "14", "endline": "83", "endcolumn": "16", "stmt": [83,5,83,16], "code": "    result = idx" },
    "288": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "751": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "19", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "505": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "70": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "3", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "984": { "file": "electionimpl.hny", "line": "16", "column": "25", "endline": "16", "endcolumn": "33", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "116": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "603": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "318": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1491": { "file": "electiontest.hny", "line": "42", "column": "28", "endline": "42", "endcolumn": "28", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1118": { "file": "electionimpl.hny", "line": "44", "column": "19", "endline": "44", "endcolumn": "28", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "375": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "10", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "362": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "18", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "289": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1133": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "41", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "406": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "798": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1393": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "279": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "17", "endline": "53", "endcolumn": "17", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "1414": { "file": "electiontest.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "11", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "753": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "5", "endline": "47", "endcolumn": "17", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "1439": { "file": "electiontest.hny", "line": "36", "column": "26", "endline": "36", "endcolumn": "40", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "695": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "21", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "1128": { "file": "electionimpl.hny", "line": "45", "column": "19", "endline": "45", "endcolumn": "26", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "1089": { "file": "electionimpl.hny", "line": "36", "column": "5", "endline": "36", "endcolumn": "44", "stmt": [36,5,36,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "748": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "46", "column": "5", "endline": "46", "endcolumn": "15", "stmt": [46,5,46,15], "code": "    var cnt = 0" },
    "456": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "325": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1442": { "file": "electiontest.hny", "line": "36", "column": "26", "endline": "36", "endcolumn": "44", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "1169": { "file": "electionimpl.hny", "line": "32", "column": "1", "endline": "32", "endcolumn": "32", "stmt": [32,1,32,32], "code": "def withdraw(election, citizen):" },
    "975": { "file": "electionimpl.hny", "line": "11", "column": "19", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "645": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "10", "endline": "13", "endcolumn": "11", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "1424": { "file": "electiontest.hny", "line": "33", "column": "13", "endline": "33", "endcolumn": "32", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "750": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "60": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1342": { "file": "electiontest.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "14", "stmt": [20,5,20,14], "code": "    complete()" },
    "385": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "9", "endline": "18", "endcolumn": "16", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "260": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "54", "endline": "45", "endcolumn": "59", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "652": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "14", "stmt": [16,5,16,15], "code": "    atomically:" },
    "108": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "985": { "file": "electionimpl.hny", "line": "16", "column": "15", "endline": "16", "endcolumn": "33", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "635": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "117": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "700": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "21", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "504": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "19", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "961": { "file": "electionimpl.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "27", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "681": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "20", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "343": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "554": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "711": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "976": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "694": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "1238": { "file": "electionimpl.hny", "line": "70", "column": "5", "endline": "70", "endcolumn": "42", "stmt": [70,5,70,44], "code": "    election->candidates[candidate_from] = 0" },
    "777": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "48", "column": "9", "endline": "48", "endcolumn": "19", "stmt": [48,9,48,19], "code": "        atomically:" },
    "762": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "19", "endline": "49", "endcolumn": "43", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "194": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "15", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "67": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "33", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "462": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "41", "column": "1", "endline": "41", "endcolumn": "21", "stmt": [41,1,41,21], "code": "builtin add \"bag$add\"" },
    "20": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "18", "endline": "3", "endcolumn": "18", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1138": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "26", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "1112": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "40", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "1277": { "file": "electionimpl.hny", "line": "80", "column": "9", "endline": "80", "endcolumn": "10", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "1025": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "41", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "1346": { "file": "electiontest.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "69", "stmt": [22,1,22,69], "code": "def test_withdraw(e, first_candidate, second_candidate, citizen_idx):" },
    "738": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "16", "stmt": [42,1,42,16], "code": "def Condition():" },
    "547": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "17", "endline": "64", "endcolumn": "24", "stmt": [64,17,64,27], "code": "                result = {}" },
    "1379": { "file": "electiontest.hny", "line": "26", "column": "5", "endline": "26", "endcolumn": "12", "stmt": [26,5,26,14], "code": "    complete()" },
    "822": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "14", "endline": "57", "endcolumn": "23", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "814": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "20", "endline": "56", "endcolumn": "20", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "286": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "41", "endline": "54", "endcolumn": "41", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1229": { "file": "electionimpl.hny", "line": "69", "column": "43", "endline": "69", "endcolumn": "78", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "376": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "10", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "634": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "19", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "268": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "18", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1034": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "45", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "511": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "15", "endline": "54", "endcolumn": "17", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "109": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "12", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "227": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "9", "endline": "43", "endcolumn": "19", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "126": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1077": { "file": "electionimpl.hny", "line": "35", "column": "21", "endline": "35", "endcolumn": "47", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "226": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "579": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1429": { "file": "electiontest.hny", "line": "34", "column": "39", "endline": "34", "endcolumn": "39", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1255": { "file": "electionimpl.hny", "line": "74", "column": "15", "endline": "74", "endcolumn": "47", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1364": { "file": "electiontest.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "37", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "235": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1309": { "file": "electiontest.hny", "line": "12", "column": "23", "endline": "12", "endcolumn": "50", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "621": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "26", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "287": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "38", "endline": "54", "endcolumn": "41", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "449": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "14", "endline": "36", "endcolumn": "26", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "1438": { "file": "electiontest.hny", "line": "32", "column": "39", "endline": "32", "endcolumn": "39", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "463": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "3", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1416": { "file": "electiontest.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "11", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1051": { "file": "electionimpl.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "11", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "4": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1007": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "49", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "475": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "16", "endline": "45", "endcolumn": "18", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "295": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "24", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "134": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "14", "stmt": [30,1,30,14], "code": "def values(d):" },
    "447": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "23", "endline": "36", "endcolumn": "24", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "1356": { "file": "electiontest.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "50", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "697": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,16,33,6], "code": "    atomically when not !binsema:" },
    "476": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "19", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "292": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "371": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "15", "column": "9", "endline": "15", "endcolumn": "20", "stmt": [15,1,15,39], "code": "builtin multiplicity \"bag$multiplicity\"" },
    "680": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "20", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "30": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "20", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "201": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "43", "endline": "42", "endcolumn": "43", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1207": { "file": "electionimpl.hny", "line": "66", "column": "5", "endline": "66", "endcolumn": "51", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "1015": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "44", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "763": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "13", "endline": "49", "endcolumn": "17", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1245": { "file": "electionimpl.hny", "line": "73", "column": "15", "endline": "73", "endcolumn": "49", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "1194": { "file": "electionimpl.hny", "line": "62", "column": "35", "endline": "62", "endcolumn": "43", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "962": { "file": "electionimpl.hny", "line": "8", "column": "30", "endline": "8", "endcolumn": "30", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "1482": { "file": "electiontest.hny", "line": "41", "column": "17", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1390": { "file": "electiontest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1156": { "file": "electionimpl.hny", "line": "51", "column": "15", "endline": "51", "endcolumn": "42", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1098": { "file": "electionimpl.hny", "line": "40", "column": "5", "endline": "40", "endcolumn": "11", "stmt": [40,5,40,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "186": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "8", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "608": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "49", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "7": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "31", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1100": { "file": "electionimpl.hny", "line": "40", "column": "25", "endline": "40", "endcolumn": "33", "stmt": [40,5,40,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "342": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "5", "endline": "8", "endcolumn": "12", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "620": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "16", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "866": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1160": { "file": "electionimpl.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "22", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1041": { "file": "electionimpl.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "12", "stmt": [25,5,25,18], "code": "    result = False" },
    "340": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "14", "endline": "8", "endcolumn": "16", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "127": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1369": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "19", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "881": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "16", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "180": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1433": { "file": "electiontest.hny", "line": "34", "column": "45", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1374": { "file": "electiontest.hny", "line": "25", "column": "40", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "860": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "22", "endline": "66", "endcolumn": "25", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "609": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1304": { "file": "electiontest.hny", "line": "9", "column": "19", "endline": "9", "endcolumn": "22", "stmt": [9,1,9,23], "code": "EXPECTED_VOTES = [3, 0]" },
    "1067": { "file": "electionimpl.hny", "line": "34", "column": "25", "endline": "34", "endcolumn": "33", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "224": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1146": { "file": "electionimpl.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "16", "stmt": [47,9,47,21], "code": "        result = True" },
    "882": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "17", "endline": "70", "endcolumn": "20", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "187": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "8", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "1293": { "file": "electionimpl.hny", "line": "83", "column": "14", "endline": "83", "endcolumn": "16", "stmt": [83,5,83,16], "code": "    result = idx" },
    "232": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "833": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "14", "endline": "57", "endcolumn": "44", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "195": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "908": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "200": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "38", "endline": "42", "endcolumn": "41", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "113": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "821": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "10", "endline": "57", "endcolumn": "10", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "815": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "19", "endline": "56", "endcolumn": "20", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "1170": { "file": "electionimpl.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "3", "stmt": [54,1,54,35], "code": "def get_votes(election, candidate):" },
    "120": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1267": { "file": "electionimpl.hny", "line": "79", "column": "14", "endline": "79", "endcolumn": "23", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "6": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "31", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "233": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1122": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "44", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "893": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "14", "endline": "73", "endcolumn": "15", "stmt": [73,5,73,15], "code": "    result = []" },
    "867": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1219": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "24", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "949": { "file": "electionimpl.hny", "line": "7", "column": "21", "endline": "7", "endcolumn": "24", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "935": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "775": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "19", "endline": "51", "endcolumn": "23", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "655": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "18", "endline": "17", "endcolumn": "19", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "464": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "17", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1189": { "file": "electionimpl.hny", "line": "62", "column": "15", "endline": "62", "endcolumn": "22", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "627": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "865": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "293": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "713": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "370": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "1217": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "12", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "1005": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "40", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "545": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "687": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "22", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "963": { "file": "electionimpl.hny", "line": "8", "column": "20", "endline": "8", "endcolumn": "30", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "368": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "211": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "513": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "23", "endline": "54", "endcolumn": "23", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "1093": { "file": "electionimpl.hny", "line": "39", "column": "15", "endline": "39", "endcolumn": "33", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "446": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "23", "endline": "36", "endcolumn": "24", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "85": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "17", "stmt": [19,9,19,19], "code": "        result += v" },
    "1319": { "file": "electiontest.hny", "line": "16", "column": "9", "endline": "16", "endcolumn": "29", "stmt": [16,9,16,29], "code": "        threads_executed += 1" },
    "135": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1209": { "file": "electionimpl.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "11", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "1017": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "44", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1243": { "file": "electionimpl.hny", "line": "73", "column": "35", "endline": "73", "endcolumn": "48", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "1172": { "file": "electionimpl.hny", "line": "56", "column": "5", "endline": "56", "endcolumn": "11", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1110": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "34", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "823": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1048": { "file": "electionimpl.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "42", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1426": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1102": { "file": "electionimpl.hny", "line": "40", "column": "35", "endline": "40", "endcolumn": "41", "stmt": [40,5,40,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "779": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "20", "stmt": [52,20,54,6], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1340": { "file": "electiontest.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "12", "stmt": [20,5,20,14], "code": "    complete()" },
    "478": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "181": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "234": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "883": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "17", "endline": "70", "endcolumn": "20", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1332": { "file": "electiontest.hny", "line": "19", "column": "22", "endline": "19", "endcolumn": "34", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "995": { "file": "electionimpl.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "42", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "341": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "14", "endline": "8", "endcolumn": "16", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "47": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1144": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "47", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "548": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "13", "endline": "63", "endcolumn": "21", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "510": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "13", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "269": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "18", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1466": { "file": "electiontest.hny", "line": "40", "column": "17", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "710": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "18", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "17": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1027": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "43", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "864": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1329": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "624": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "23", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "960": { "file": "electionimpl.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "774": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "686": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "3", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "1227": { "file": "electionimpl.hny", "line": "69", "column": "64", "endline": "69", "endcolumn": "77", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "1053": { "file": "electionimpl.hny", "line": "29", "column": "15", "endline": "29", "endcolumn": "22", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "546": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "544": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "139": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "77": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "346": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "237": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "51", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "808": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "13", "endline": "53", "endcolumn": "17", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "966": { "file": "electionimpl.hny", "line": "10", "column": "22", "endline": "10", "endcolumn": "23", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "708": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "10", "endline": "32", "endcolumn": "16", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "626": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "1502": { "file": "electiontest.hny", "line": "1", "column": "1", "endline": "44", "endcolumn": "23", "stmt": [1,1,44,23], "code": "from synch import Lock, acquire, release" },
    "294": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "22", "endline": "54", "endcolumn": "22", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1406": { "file": "electiontest.hny", "line": "31", "column": "9", "endline": "31", "endcolumn": "35", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1396": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1154": { "file": "electionimpl.hny", "line": "51", "column": "35", "endline": "51", "endcolumn": "41", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "479": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "24", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "460": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "16", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "22": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1484": { "file": "electiontest.hny", "line": "41", "column": "1", "endline": "41", "endcolumn": "25", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1231": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "41", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "297": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "22", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "296": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "24", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "994": { "file": "electionimpl.hny", "line": "17", "column": "35", "endline": "17", "endcolumn": "41", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "776": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "13", "endline": "51", "endcolumn": "17", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "359": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1162": { "file": "electionimpl.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "33", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1043": { "file": "electionimpl.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "22", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "967": { "file": "electionimpl.hny", "line": "10", "column": "26", "endline": "10", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "445": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "712": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "21", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "236": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "46", "endline": "44", "endcolumn": "46", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "569": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1476": { "file": "electiontest.hny", "line": "41", "column": "17", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "934": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "684": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "12", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "461": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "41", "column": "9", "endline": "41", "endcolumn": "11", "stmt": [41,1,41,21], "code": "builtin add \"bag$add\"" },
    "32": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "17", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "1253": { "file": "electionimpl.hny", "line": "74", "column": "35", "endline": "74", "endcolumn": "46", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "809": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "512": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "18", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "199": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "576": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "52", "endline": "69", "endcolumn": "63", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "122": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "904": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "27", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "831": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "29", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1106": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "1063": { "file": "electionimpl.hny", "line": "32", "column": "1", "endline": "32", "endcolumn": "32", "stmt": [32,1,32,32], "code": "def withdraw(election, citizen):" },
    "1456": { "file": "electiontest.hny", "line": "39", "column": "17", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "979": { "file": "electionimpl.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "3", "stmt": [14,1,14,39], "code": "def vote(election, candidate, citizen):" },
    "898": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "11", "stmt": [75,1,75,11], "code": "def get(q):" },
    "0": { "file": "electiontest.hny", "line": "1", "column": "1", "endline": "44", "endcolumn": "23", "stmt": [1,1,44,23], "code": "from synch import Lock, acquire, release" },
    "1047": { "file": "electionimpl.hny", "line": "28", "column": "35", "endline": "28", "endcolumn": "41", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "466": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "1196": { "file": "electionimpl.hny", "line": "62", "column": "5", "endline": "62", "endcolumn": "46", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "350": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "12", "endline": "10", "endcolumn": "22", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "15": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "137": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1306": { "file": "electiontest.hny", "line": "10", "column": "10", "endline": "10", "endcolumn": "10", "stmt": [10,1,10,10], "code": "WINNER = 0" },
    "1263": { "file": "electionimpl.hny", "line": "77", "column": "16", "endline": "77", "endcolumn": "17", "stmt": [77,5,77,17], "code": "    var high = -1" },
    "699": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "25", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "205": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "9", "endline": "42", "endcolumn": "27", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "838": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "3", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "910": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "28", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "715": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "14", "stmt": [35,5,35,15], "code": "    atomically:" },
    "817": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "34", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "471": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "8", "endline": "44", "endcolumn": "20", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "103": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "39": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "20", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "197": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "34", "endline": "42", "endcolumn": "34", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "218": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1091": { "file": "electionimpl.hny", "line": "39", "column": "15", "endline": "39", "endcolumn": "22", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "639": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "14", "stmt": [11,5,11,15], "code": "    atomically:" },
    "1431": { "file": "electiontest.hny", "line": "34", "column": "24", "endline": "34", "endcolumn": "40", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1011": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "28", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1120": { "file": "electionimpl.hny", "line": "44", "column": "30", "endline": "44", "endcolumn": "38", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "810": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "16", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "805": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "14", "endline": "53", "endcolumn": "15", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "562": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "31", "endline": "68", "endcolumn": "32", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "291": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "29": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "5", "endline": "3", "endcolumn": "12", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1349": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "19", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "182": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "12", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1376": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "82": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "1489": { "file": "electiontest.hny", "line": "42", "column": "25", "endline": "42", "endcolumn": "25", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "353": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "20", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1295": { "file": "electionimpl.hny", "line": "76", "column": "1", "endline": "76", "endcolumn": "21", "stmt": [76,1,76,21], "code": "def winner(election):" },
    "918": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "14", "endline": "78", "endcolumn": "22", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "891": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "3", "stmt": [72,1,72,12], "code": "def Queue():" },
    "1324": { "file": "electiontest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "15", "stmt": [14,1,14,15], "code": "def complete():" },
    "1247": { "file": "electionimpl.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "51", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "190": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "6", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "766": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "231": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "35", "endline": "44", "endcolumn": "38", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "458": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "14", "endline": "39", "endcolumn": "29", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "378": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "16", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "121": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "92": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "465": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "290": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "832": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "130": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "3", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "1085": { "file": "electionimpl.hny", "line": "36", "column": "15", "endline": "36", "endcolumn": "33", "stmt": [36,5,36,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1446": { "file": "electiontest.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "29", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "804": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1314": { "file": "electiontest.hny", "line": "12", "column": "5", "endline": "12", "endcolumn": "51", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "905": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "21", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "803": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "772": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "18", "endline": "50", "endcolumn": "33", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "770": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "30", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "682": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "22", "endline": "25", "endcolumn": "26", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "230": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "35", "endline": "44", "endcolumn": "38", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "892": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "12", "stmt": [72,1,72,12], "code": "def Queue():" },
    "549": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "18", "endline": "65", "endcolumn": "18", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "638": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "12", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "623": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "25", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "196": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "32", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "57": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "19", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1359": { "file": "electiontest.hny", "line": "24", "column": "23", "endline": "24", "endcolumn": "36", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "816": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "33", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "622": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "26", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "1057": { "file": "electionimpl.hny", "line": "29", "column": "35", "endline": "29", "endcolumn": "43", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "773": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "13", "endline": "50", "endcolumn": "16", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "698": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "26", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "1134": { "file": "electionimpl.hny", "line": "45", "column": "45", "endline": "45", "endcolumn": "49", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "219": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "761": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "477": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "683": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "27", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "136": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1330": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1289": { "file": "electionimpl.hny", "line": "79", "column": "23", "endline": "79", "endcolumn": "23", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "1038": { "file": "electionimpl.hny", "line": "24", "column": "9", "endline": "24", "endcolumn": "16", "stmt": [24,9,24,21], "code": "        result = True" },
    "459": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "12", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "802": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1150": { "file": "electionimpl.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "11", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "352": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "18", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1225": { "file": "electionimpl.hny", "line": "69", "column": "53", "endline": "69", "endcolumn": "62", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "912": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "18", "endline": "77", "endcolumn": "26", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "129": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "560": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "24", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "1500": { "file": "electiontest.hny", "line": "44", "column": "1", "endline": "44", "endcolumn": "16", "stmt": [44,1,44,16], "code": "spawn end_test()" },
    "718": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "17", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "688": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "131": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "5", "endline": "27", "endcolumn": "12", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1166": { "file": "electionimpl.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "44", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "578": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "66", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "574": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "99": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1233": { "file": "electionimpl.hny", "line": "70", "column": "15", "endline": "70", "endcolumn": "24", "stmt": [70,5,70,44], "code": "    election->candidates[candidate_from] = 0" },
    "760": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "40", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "448": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "18", "endline": "36", "endcolumn": "25", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "1182": { "file": "electionimpl.hny", "line": "59", "column": "24", "endline": "59", "endcolumn": "33", "stmt": [59,5,59,44], "code": "    result = election->candidates[candidate]" },
    "207": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "769": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "355": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "21", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1257": { "file": "electionimpl.hny", "line": "74", "column": "5", "endline": "74", "endcolumn": "49", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "191": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "19", "stmt": [40,9,40,19], "code": "        result = []" },
    "1366": { "file": "electiontest.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "1126": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "42", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "5": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1190": { "file": "electionimpl.hny", "line": "62", "column": "15", "endline": "62", "endcolumn": "22", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "771": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "202": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "43", "endline": "42", "endcolumn": "43", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "806": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "14", "endline": "53", "endcolumn": "15", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "75": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "1265": { "file": "electionimpl.hny", "line": "78", "column": "15", "endline": "78", "endcolumn": "16", "stmt": [78,5,78,16], "code": "    var idx = -1" },
    "1033": { "file": "electionimpl.hny", "line": "23", "column": "36", "endline": "23", "endcolumn": "45", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "917": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "10", "endline": "78", "endcolumn": "10", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "916": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "9", "endline": "77", "endcolumn": "16", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "125": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "203": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "38", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "467": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "563": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "26", "endline": "68", "endcolumn": "33", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "470": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "15", "endline": "44", "endcolumn": "20", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "1394": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1486": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1354": { "file": "electiontest.hny", "line": "23", "column": "39", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "1021": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "26", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "189": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "14", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "185": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "13", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "575": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "628": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "23", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "65": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "27", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "206": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1176": { "file": "electionimpl.hny", "line": "56", "column": "15", "endline": "56", "endcolumn": "33", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "184": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "3", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "969": { "file": "electionimpl.hny", "line": "10", "column": "21", "endline": "10", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "913": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "29", "endline": "77", "endcolumn": "29", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "192": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "19", "stmt": [40,9,40,19], "code": "        result = []" },
    "1399": { "file": "electiontest.hny", "line": "31", "column": "28", "endline": "31", "endcolumn": "28", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1344": { "file": "electiontest.hny", "line": "18", "column": "1", "endline": "18", "endcolumn": "45", "stmt": [18,1,18,45], "code": "def test_vote(e, candidate_idx, citizen_idx):" },
    "839": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "17", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "1297": { "file": "electiontest.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "18", "stmt": [4,1,4,20], "code": "threads_executed = 0" },
    "765": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "18", "endline": "50", "endcolumn": "24", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "577": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "689": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "349": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "17", "endline": "10", "endcolumn": "22", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "561": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "26", "endline": "68", "endcolumn": "29", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "132": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "12", "stmt": [26,1,26,12], "code": "def list(a):" },
    "55": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "12", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "1061": { "file": "electionimpl.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "39", "stmt": [14,1,14,39], "code": "def vote(election, candidate, citizen):" },
    "899": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "807": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "19", "endline": "53", "endcolumn": "22", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "1140": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "35", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "767": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "27", "endline": "50", "endcolumn": "27", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "1215": { "file": "electionimpl.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "49", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "474": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "16", "endline": "45", "endcolumn": "18", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "801": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "629": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "16", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "356": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1316": { "file": "electiontest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "3", "stmt": [14,1,14,15], "code": "def complete():" },
    "1275": { "file": "electionimpl.hny", "line": "80", "column": "28", "endline": "80", "endcolumn": "31", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "472": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "6", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "45": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "351": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "10", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "1071": { "file": "electionimpl.hny", "line": "34", "column": "5", "endline": "34", "endcolumn": "44", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "1326": { "file": "electiontest.hny", "line": "18", "column": "1", "endline": "18", "endcolumn": "45", "stmt": [18,1,18,45], "code": "def test_vote(e, candidate_idx, citizen_idx):" },
    "1001": { "file": "electionimpl.hny", "line": "20", "column": "27", "endline": "20", "endcolumn": "33", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "204": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1116": { "file": "electionimpl.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "6", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "800": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "124": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "968": { "file": "electionimpl.hny", "line": "10", "column": "26", "endline": "10", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "473": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "14", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "133": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,14], "code": "def values(d):" },
    "764": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "14", "endline": "50", "endcolumn": "14", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "89": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "3", "stmt": [22,1,22,11], "code": "def set(a):" },
    "1097": { "file": "electionimpl.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "46", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1205": { "file": "electionimpl.hny", "line": "66", "column": "35", "endline": "66", "endcolumn": "48", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "911": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "150": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "214": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "49", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1044": { "file": "electionimpl.hny", "line": "28", "column": "25", "endline": "28", "endcolumn": "33", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1191": { "file": "electionimpl.hny", "line": "62", "column": "25", "endline": "62", "endcolumn": "33", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "18": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1287": { "file": "electionimpl.hny", "line": "82", "column": "13", "endline": "82", "endcolumn": "17", "stmt": [82,13,82,19], "code": "            idx = i" },
    "1087": { "file": "electionimpl.hny", "line": "36", "column": "15", "endline": "36", "endcolumn": "42", "stmt": [36,5,36,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "441": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "18", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1395": { "file": "electiontest.hny", "line": "29", "column": "65", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "522": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "518": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "20", "endline": "55", "endcolumn": "22", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "100": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "790": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "69": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "12", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "431": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "12", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1096": { "file": "electionimpl.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "46", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "900": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "740": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "22", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "617": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "743": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "12", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "96": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1180": { "file": "electionimpl.hny", "line": "56", "column": "5", "endline": "56", "endcolumn": "46", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "950": { "file": "electionimpl.hny", "line": "7", "column": "25", "endline": "7", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1009": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "16", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "733": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "1143": { "file": "electionimpl.hny", "line": "46", "column": "49", "endline": "46", "endcolumn": "50", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "1296": { "file": "electiontest.hny", "line": "4", "column": "20", "endline": "4", "endcolumn": "20", "stmt": [4,1,4,20], "code": "threads_executed = 0" },
    "1248": { "file": "electionimpl.hny", "line": "74", "column": "5", "endline": "74", "endcolumn": "11", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1079": { "file": "electionimpl.hny", "line": "35", "column": "21", "endline": "35", "endcolumn": "57", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "730": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "18", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "1018": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "42", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "416": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "3", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "81": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "79": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "793": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "71", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "616": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "24", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "430": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "14", "endline": "31", "endcolumn": "26", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "217": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "719": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "16", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "25": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1028": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "16", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "957": { "file": "electionimpl.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "27", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "1384": { "file": "electiontest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "3", "stmt": [28,1,28,15], "code": "def end_test():" },
    "1458": { "file": "electiontest.hny", "line": "39", "column": "17", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "91": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "583": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "572": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "44", "endline": "68", "endcolumn": "57", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1258": { "file": "electionimpl.hny", "line": "64", "column": "1", "endline": "64", "endcolumn": "53", "stmt": [64,1,64,53], "code": "def transfer(election, candidate_from, candidate_to):" },
    "614": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "30", "endline": "70", "endcolumn": "53", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "582": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "69", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "169": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "17", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "732": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "907": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "28", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "491": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "49", "column": "1", "endline": "49", "endcolumn": "27", "stmt": [49,1,49,27], "code": "builtin remove \"bag$remove\"" },
    "1192": { "file": "electionimpl.hny", "line": "62", "column": "15", "endline": "62", "endcolumn": "33", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "523": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "3", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "517": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "20", "endline": "55", "endcolumn": "22", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "906": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "490": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "49", "column": "9", "endline": "49", "endcolumn": "14", "stmt": [49,1,49,27], "code": "builtin remove \"bag$remove\"" },
    "1054": { "file": "electionimpl.hny", "line": "29", "column": "25", "endline": "29", "endcolumn": "33", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "716": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "1284": { "file": "electionimpl.hny", "line": "81", "column": "13", "endline": "81", "endcolumn": "18", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "1080": { "file": "electionimpl.hny", "line": "35", "column": "21", "endline": "35", "endcolumn": "57", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "573": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "35", "endline": "68", "endcolumn": "42", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "956": { "file": "electionimpl.hny", "line": "8", "column": "9", "endline": "8", "endcolumn": "18", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "440": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "13", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1448": { "file": "electiontest.hny", "line": "37", "column": "34", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "1387": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "16", "stmt": [29,16,38,6], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "164": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1459": { "file": "electiontest.hny", "line": "39", "column": "21", "endline": "39", "endcolumn": "21", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "35": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "379": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "6", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "220": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "49": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "17", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1142": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "45", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "248": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "106": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1153": { "file": "electionimpl.hny", "line": "51", "column": "15", "endline": "51", "endcolumn": "33", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1095": { "file": "electionimpl.hny", "line": "39", "column": "15", "endline": "39", "endcolumn": "44", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "669": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "1078": { "file": "electionimpl.hny", "line": "35", "column": "48", "endline": "35", "endcolumn": "57", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "389": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "298": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "25", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "270": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "20", "endline": "49", "endcolumn": "23", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "216": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1187": { "file": "electionimpl.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "12", "stmt": [59,5,59,44], "code": "    result = election->candidates[candidate]" },
    "581": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "73", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "611": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "52", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "329": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "20", "endline": "5", "endcolumn": "20", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1069": { "file": "electionimpl.hny", "line": "34", "column": "35", "endline": "34", "endcolumn": "41", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "742": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "24", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "78": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "731": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "415": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "23", "stmt": [28,1,28,23], "code": "builtin bmin \"bag$bmin\"" },
    "152": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "964": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1299": { "file": "electiontest.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "27", "stmt": [5,1,5,29], "code": "number_of_spawned_threads = 4" },
    "792": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "69", "endline": "52", "endcolumn": "71", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "919": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "25", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "102": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1081": { "file": "electionimpl.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "57", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "951": { "file": "electionimpl.hny", "line": "7", "column": "21", "endline": "7", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1499": { "file": "electiontest.hny", "line": "44", "column": "1", "endline": "44", "endcolumn": "16", "stmt": [44,1,44,16], "code": "spawn end_test()" },
    "1338": { "file": "electiontest.hny", "line": "19", "column": "5", "endline": "19", "endcolumn": "48", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "714": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "21", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "643": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "9", "endline": "12", "endcolumn": "16", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "492": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "3", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "717": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "395": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "692": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "12", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "433": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "12", "stmt": [33,1,33,23], "code": "builtin bmax \"bag$bmax\"" },
    "901": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "571": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "633": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "442": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "345": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "642": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "18", "endline": "12", "endcolumn": "20", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "443": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "10", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "156": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,13], "code": "def items(d):" },
    "432": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "13", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "316": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "15", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "312": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "14", "endline": "2", "endcolumn": "16", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "68": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "5", "endline": "13", "endcolumn": "12", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "632": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "493": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "280": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "17", "endline": "53", "endcolumn": "17", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "693": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "22", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "238": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "46", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "521": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "978": { "file": "electionimpl.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def Election(n, m):" },
    "173": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "20", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "107": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1298": { "file": "electiontest.hny", "line": "5", "column": "29", "endline": "5", "endcolumn": "29", "stmt": [5,1,5,29], "code": "number_of_spawned_threads = 4" },
    "1008": { "file": "electionimpl.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "6", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "80": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "610": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "52", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "988": { "file": "electionimpl.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "46", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "580": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "69", "endline": "69", "endcolumn": "69", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "157": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def items(d):" },
    "123": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "151": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1259": { "file": "electionimpl.hny", "line": "76", "column": "1", "endline": "76", "endcolumn": "3", "stmt": [76,1,76,21], "code": "def winner(election):" },
    "1068": { "file": "electionimpl.hny", "line": "34", "column": "15", "endline": "34", "endcolumn": "33", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "668": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "902": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "22", "endline": "76", "endcolumn": "22", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "570": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "55", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "335": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "249": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "215": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1449": { "file": "electiontest.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "1193": { "file": "electionimpl.hny", "line": "62", "column": "35", "endline": "62", "endcolumn": "43", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "928": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "16", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "183": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def items(d):" },
    "520": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "9", "endline": "55", "endcolumn": "23", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "1055": { "file": "electionimpl.hny", "line": "29", "column": "15", "endline": "29", "endcolumn": "33", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "311": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "14", "endline": "2", "endcolumn": "16", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "239": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "213": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "45", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1285": { "file": "electionimpl.hny", "line": "82", "column": "19", "endline": "82", "endcolumn": "19", "stmt": [82,13,82,19], "code": "            idx = i" },
    "417": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "13", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "434": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "33", "column": "1", "endline": "33", "endcolumn": "23", "stmt": [33,1,33,23], "code": "builtin bmax \"bag$bmax\"" },
    "281": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "13", "endline": "53", "endcolumn": "18", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "394": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "3", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "347": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "313": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "5", "endline": "2", "endcolumn": "12", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "308": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "16", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "791": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "64", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1386": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "16", "stmt": [29,16,38,6], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "952": { "file": "electionimpl.hny", "line": "7", "column": "21", "endline": "7", "endcolumn": "27", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1029": { "file": "electionimpl.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "26", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "444": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "271": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "25", "endline": "49", "endcolumn": "25", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "34": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1249": { "file": "electionimpl.hny", "line": "74", "column": "15", "endline": "74", "endcolumn": "22", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "358": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "26", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "344": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "337": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "15", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "1019": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "16", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "741": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "24", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "953": { "file": "electionimpl.hny", "line": "7", "column": "30", "endline": "7", "endcolumn": "30", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "101": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "24": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "37", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1152": { "file": "electionimpl.hny", "line": "51", "column": "25", "endline": "51", "endcolumn": "33", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1094": { "file": "electionimpl.hny", "line": "39", "column": "35", "endline": "39", "endcolumn": "43", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "19": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "18", "endline": "3", "endcolumn": "18", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "334": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "221": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "90": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "11", "stmt": [22,1,22,11], "code": "def set(a):" },
    "903": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "21", "endline": "76", "endcolumn": "22", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "1186": { "file": "electionimpl.hny", "line": "59", "column": "14", "endline": "59", "endcolumn": "44", "stmt": [59,5,59,44], "code": "    result = election->candidates[candidate]" },
    "165": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "397": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "14", "endline": "24", "endcolumn": "14", "stmt": [24,5,24,14], "code": "    result = 0" },
    "310": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "12", "stmt": [1,1,1,12], "code": "def empty():" },
    "212": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "48": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "16", "endline": "9", "endcolumn": "16", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1045": { "file": "electionimpl.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "33", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "876": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "16", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "138": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1437": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "613": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "35", "endline": "70", "endcolumn": "53", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1269": { "file": "electionimpl.hny", "line": "79", "column": "5", "endline": "79", "endcolumn": "7", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "794": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "35", "endline": "52", "endcolumn": "37", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1282": { "file": "electionimpl.hny", "line": "81", "column": "20", "endline": "81", "endcolumn": "32", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "272": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "25", "endline": "49", "endcolumn": "25", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1082": { "file": "electionimpl.hny", "line": "36", "column": "5", "endline": "36", "endcolumn": "11", "stmt": [36,5,36,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "826": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1498": { "file": "electiontest.hny", "line": "44", "column": "15", "endline": "44", "endcolumn": "16", "stmt": [44,1,44,16], "code": "spawn end_test()" },
    "1339": { "file": "electiontest.hny", "line": "19", "column": "5", "endline": "19", "endcolumn": "48", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "982": { "file": "electionimpl.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "11", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1408": { "file": "electiontest.hny", "line": "32", "column": "19", "endline": "32", "endcolumn": "19", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "413": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "282": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "5", "endline": "53", "endcolumn": "11", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "1058": { "file": "electionimpl.hny", "line": "29", "column": "15", "endline": "29", "endcolumn": "44", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "734": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "14", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "322": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "166": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "148": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "27": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "886": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "25", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1278": { "file": "electionimpl.hny", "line": "81", "column": "20", "endline": "81", "endcolumn": "29", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "1049": { "file": "electionimpl.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "44", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "744": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "16", "stmt": [42,1,42,16], "code": "def Condition():" },
    "690": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "222": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "198": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "35", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "965": { "file": "electionimpl.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "19", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "1185": { "file": "electionimpl.hny", "line": "59", "column": "14", "endline": "59", "endcolumn": "44", "stmt": [59,5,59,44], "code": "    result = election->candidates[candidate]" },
    "728": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "21", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "685": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "11", "stmt": [24,1,24,11], "code": "def Lock():" },
    "382": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "23", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "84": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "1004": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "40", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "210": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "862": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "675": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "514": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "23", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "299": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1074": { "file": "electionimpl.hny", "line": "35", "column": "31", "endline": "35", "endcolumn": "38", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "372": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "39", "stmt": [15,1,15,39], "code": "builtin multiplicity \"bag$multiplicity\"" },
    "515": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "5", "endline": "54", "endcolumn": "6", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "551": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "23", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "95": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1208": { "file": "electionimpl.hny", "line": "66", "column": "5", "endline": "66", "endcolumn": "51", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "788": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "625": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "37": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "19", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1065": { "file": "electionimpl.hny", "line": "34", "column": "5", "endline": "34", "endcolumn": "11", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "778": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "20", "stmt": [52,20,54,6], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "737": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "3", "stmt": [42,1,42,16], "code": "def Condition():" },
    "827": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "29", "endline": "57", "endcolumn": "39", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "26": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "285": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "38", "endline": "54", "endcolumn": "38", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "223": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "49", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1279": { "file": "electionimpl.hny", "line": "81", "column": "20", "endline": "81", "endcolumn": "29", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "795": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "747": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "46", "column": "15", "endline": "46", "endcolumn": "15", "stmt": [46,5,46,15], "code": "    var cnt = 0" },
    "323": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1163": { "file": "electionimpl.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "33", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "877": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "501": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "6", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "414": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "28", "column": "9", "endline": "28", "endcolumn": "12", "stmt": [28,1,28,23], "code": "builtin bmin \"bag$bmin\"" },
    "273": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "20", "endline": "49", "endcolumn": "26", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "797": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "412": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "981": { "file": "electionimpl.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "11", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "373": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "3", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1381": { "file": "electiontest.hny", "line": "26", "column": "5", "endline": "26", "endcolumn": "14", "stmt": [26,5,26,14], "code": "    complete()" },
    "105": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "283": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1409": { "file": "electiontest.hny", "line": "32", "column": "19", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1075": { "file": "electionimpl.hny", "line": "35", "column": "21", "endline": "35", "endcolumn": "38", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "983": { "file": "electionimpl.hny", "line": "16", "column": "15", "endline": "16", "endcolumn": "22", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "971": { "file": "electionimpl.hny", "line": "11", "column": "9", "endline": "11", "endcolumn": "17", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "383": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "23", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "155": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "14", "stmt": [30,1,30,14], "code": "def values(d):" },
    "1469": { "file": "electiontest.hny", "line": "40", "column": "21", "endline": "40", "endcolumn": "21", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1103": { "file": "electionimpl.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "42", "stmt": [40,5,40,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "973": { "file": "electionimpl.hny", "line": "11", "column": "54", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "921": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "24", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "1283": { "file": "electionimpl.hny", "line": "81", "column": "20", "endline": "81", "endcolumn": "32", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "869": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "154": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "12", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "923": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "9", "endline": "78", "endcolumn": "12", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "640": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "14", "stmt": [11,5,11,15], "code": "    atomically:" },
    "550": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "23", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "516": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "13", "endline": "55", "endcolumn": "18", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "94": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1436": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "104": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1064": { "file": "electionimpl.hny", "line": "34", "column": "5", "endline": "34", "endcolumn": "11", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "631": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "17", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "630": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "17", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "1083": { "file": "electionimpl.hny", "line": "36", "column": "15", "endline": "36", "endcolumn": "22", "stmt": [36,5,36,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "500": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "8", "endline": "52", "endcolumn": "20", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "972": { "file": "electionimpl.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "51", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "380": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "19", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "225": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "735": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "5", "endline": "40", "endcolumn": "12", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "641": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "19", "endline": "12", "endcolumn": "20", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "59": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "21", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "868": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1173": { "file": "electionimpl.hny", "line": "56", "column": "5", "endline": "56", "endcolumn": "11", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "922": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "14", "endline": "78", "endcolumn": "26", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "691": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "14", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "275": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "5", "endline": "49", "endcolumn": "12", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1479": { "file": "electiontest.hny", "line": "41", "column": "21", "endline": "41", "endcolumn": "21", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1268": { "file": "electionimpl.hny", "line": "79", "column": "5", "endline": "79", "endcolumn": "7", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "1059": { "file": "electionimpl.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "46", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "745": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "3", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "1480": { "file": "electiontest.hny", "line": "41", "column": "17", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "502": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "14", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "970": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "696": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,16,33,6], "code": "    atomically when not !binsema:" },
    "1218": { "file": "electionimpl.hny", "line": "69", "column": "15", "endline": "69", "endcolumn": "24", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "820": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "17", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "284": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1184": { "file": "electionimpl.hny", "line": "59", "column": "35", "endline": "59", "endcolumn": "43", "stmt": [59,5,59,44], "code": "    result = election->candidates[candidate]" },
    "980": { "file": "electionimpl.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "39", "stmt": [14,1,14,39], "code": "def vote(election, candidate, citizen):" },
    "884": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "552": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "18", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "97": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "870": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "10", "endline": "67", "endcolumn": "13", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "86": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "1428": { "file": "electiontest.hny", "line": "34", "column": "39", "endline": "34", "endcolumn": "39", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1014": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "44", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "746": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "16", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "636": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "23", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "880": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "12", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "36": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "20", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "646": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "15", "endline": "13", "endcolumn": "18", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "469": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "8", "endline": "44", "endcolumn": "10", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "736": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "18", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "274": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "27", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1419": { "file": "electiontest.hny", "line": "33", "column": "54", "endline": "33", "endcolumn": "54", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "861": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "21", "endline": "66", "endcolumn": "25", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "796": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "887": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1435": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "22", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1468": { "file": "electiontest.hny", "line": "40", "column": "17", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "637": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "3", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "411": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "17", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1380": { "file": "electiontest.hny", "line": "26", "column": "13", "endline": "26", "endcolumn": "14", "stmt": [26,5,26,14], "code": "    complete()" },
    "1113": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "40", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "920": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "25", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "647": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "9", "endline": "13", "endcolumn": "13", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "519": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "13", "endline": "55", "endcolumn": "23", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "1228": { "file": "electionimpl.hny", "line": "69", "column": "43", "endline": "69", "endcolumn": "78", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "553": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "16", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "927": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "17", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "885": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1280": { "file": "electionimpl.hny", "line": "81", "column": "20", "endline": "81", "endcolumn": "29", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "87": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1418": { "file": "electiontest.hny", "line": "33", "column": "53", "endline": "33", "endcolumn": "57", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "977": { "file": "electionimpl.hny", "line": "5", "column": "5", "endline": "5", "endcolumn": "12", "stmt": [5,5,12,5], "code": "    result = {" },
    "875": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "863": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "21", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "825": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "26", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1478": { "file": "electiontest.hny", "line": "41", "column": "17", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "410": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "17", "stmt": [26,9,26,19], "code": "        result += c" },
    "503": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "16", "endline": "53", "endcolumn": "18", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1383": { "file": "electiontest.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "69", "stmt": [22,1,22,69], "code": "def test_withdraw(e, first_candidate, second_candidate, citizen_idx):" },
    "31": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "3", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "799": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1481": { "file": "electiontest.hny", "line": "41", "column": "24", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "21": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "19", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1099": { "file": "electionimpl.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "22", "stmt": [40,5,40,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "874": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "18", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "749": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "824": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "26", "endline": "57", "endcolumn": "26", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "739": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "22", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "1024": { "file": "electionimpl.hny", "line": "22", "column": "36", "endline": "22", "endcolumn": "41", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "468": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "12", "stmt": [43,5,43,15], "code": "    result = bg" },
    "1290": { "file": "electionimpl.hny", "line": "83", "column": "14", "endline": "83", "endcolumn": "16", "stmt": [83,5,83,16], "code": "    result = idx" },
    "386": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "17", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "926": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "3", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "644": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "10", "endline": "13", "endcolumn": "11", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "485": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "18", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "727": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "15", "stmt": [35,5,35,15], "code": "    atomically:" },
    "1368": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "19", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "393": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "23", "stmt": [22,1,22,23], "code": "builtin size \"bag$size\"" },
    "1425": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1101": { "file": "electionimpl.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "33", "stmt": [40,5,40,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "1060": { "file": "electionimpl.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "46", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "597": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "41", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "326": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "662": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "14", "endline": "19", "endcolumn": "14", "stmt": [19,13,19,20], "code": "            !p = new" },
    "159": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "787": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "58", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "250": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "20", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1434": { "file": "electiontest.hny", "line": "34", "column": "24", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1357": { "file": "electiontest.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "50", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "986": { "file": "electionimpl.hny", "line": "16", "column": "35", "endline": "16", "endcolumn": "43", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "16": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1305": { "file": "electiontest.hny", "line": "9", "column": "1", "endline": "9", "endcolumn": "16", "stmt": [9,1,9,23], "code": "EXPECTED_VOTES = [3, 0]" },
    "1264": { "file": "electionimpl.hny", "line": "77", "column": "5", "endline": "77", "endcolumn": "17", "stmt": [77,5,77,17], "code": "    var high = -1" },
    "537": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "17", "endline": "62", "endcolumn": "24", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "1477": { "file": "electiontest.hny", "line": "41", "column": "18", "endline": "41", "endcolumn": "18", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "276": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "14", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "529": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "6", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "499": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "20", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "1501": { "file": "electiontest.hny", "line": "1", "column": "1", "endline": "44", "endcolumn": "23", "stmt": [1,1,44,23], "code": "from synch import Lock, acquire, release" },
    "1123": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "44", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "1016": { "file": "electionimpl.hny", "line": "21", "column": "44", "endline": "21", "endcolumn": "44", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1407": { "file": "electiontest.hny", "line": "32", "column": "19", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1242": { "file": "electionimpl.hny", "line": "73", "column": "15", "endline": "73", "endcolumn": "33", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "176": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "658": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "18", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1281": { "file": "electionimpl.hny", "line": "81", "column": "31", "endline": "81", "endcolumn": "31", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "784": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "55", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "589": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "319": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "663": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "14", "endline": "19", "endcolumn": "14", "stmt": [19,13,19,20], "code": "            !p = new" },
    "425": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "245": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1042": { "file": "electionimpl.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "11", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "987": { "file": "electionimpl.hny", "line": "16", "column": "15", "endline": "16", "endcolumn": "44", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "144": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "671": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "3", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "497": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "12", "stmt": [51,5,51,15], "code": "    result = bg" },
    "277": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "3", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "1375": { "file": "electiontest.hny", "line": "25", "column": "40", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "365": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "21", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "439": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1378": { "file": "electiontest.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "51", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "1415": { "file": "electiontest.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "11", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "251": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "26", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "390": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "9", "endline": "20", "endcolumn": "16", "stmt": [20,9,20,18], "code": "        result = 0" },
    "1490": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "437": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1382": { "file": "electiontest.hny", "line": "26", "column": "5", "endline": "26", "endcolumn": "14", "stmt": [26,5,26,14], "code": "    complete()" },
    "1070": { "file": "electionimpl.hny", "line": "34", "column": "15", "endline": "34", "endcolumn": "42", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "486": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "19", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "381": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "19", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "670": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "21", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "242": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "958": { "file": "electionimpl.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "24", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "364": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "20", "endline": "13", "endcolumn": "20", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "330": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "64": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "31", "endline": "13", "endcolumn": "31", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "426": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "332": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "44": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "12", "stmt": [8,1,8,12], "code": "def head(s):" },
    "872": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "1052": { "file": "electionimpl.hny", "line": "29", "column": "15", "endline": "29", "endcolumn": "22", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "145": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "939": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "21", "endline": "81", "endcolumn": "41", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "843": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "21", "endline": "60", "endcolumn": "29", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "177": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1467": { "file": "electiontest.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "18", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "161": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "659": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "9", "endline": "17", "endcolumn": "16", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "498": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "8", "endline": "52", "endcolumn": "10", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "392": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "12", "stmt": [22,1,22,23], "code": "builtin size \"bag$size\"" },
    "999": { "file": "electionimpl.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "25", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "162": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "871": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "10", "endline": "67", "endcolumn": "13", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "170": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "17", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1139": { "file": "electionimpl.hny", "line": "46", "column": "28", "endline": "46", "endcolumn": "34", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "333": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "74": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "12", "stmt": [17,5,17,14], "code": "    result = 0" },
    "321": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "243": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "496": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "859": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "16", "stmt": [66,16,68,6], "code": "    atomically when !sema > 0:" },
    "320": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "391": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "26", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1365": { "file": "electiontest.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "37", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "595": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "39", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "785": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "677": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "22", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "605": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "35", "endline": "70", "endcolumn": "46", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "945": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "367": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "23", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "436": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "33": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1417": { "file": "electiontest.hny", "line": "33", "column": "34", "endline": "33", "endcolumn": "51", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1252": { "file": "electionimpl.hny", "line": "74", "column": "15", "endline": "74", "endcolumn": "33", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1121": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "39", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "535": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "17", "endline": "62", "endcolumn": "20", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "488": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "21", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "538": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "9", "endline": "62", "endcolumn": "15", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "244": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "66": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1195": { "file": "electionimpl.hny", "line": "62", "column": "15", "endline": "62", "endcolumn": "44", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1351": { "file": "electiontest.hny", "line": "23", "column": "22", "endline": "23", "endcolumn": "36", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "331": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "167": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "76": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "14": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1266": { "file": "electionimpl.hny", "line": "78", "column": "5", "endline": "78", "endcolumn": "16", "stmt": [78,5,78,16], "code": "    var idx = -1" },
    "1026": { "file": "electionimpl.hny", "line": "22", "column": "45", "endline": "22", "endcolumn": "48", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "729": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "3", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "160": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1226": { "file": "electionimpl.hny", "line": "69", "column": "43", "endline": "69", "endcolumn": "62", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "598": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1161": { "file": "electionimpl.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "22", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "118": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1483": { "file": "electiontest.hny", "line": "41", "column": "1", "endline": "41", "endcolumn": "25", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1391": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1155": { "file": "electionimpl.hny", "line": "51", "column": "35", "endline": "51", "endcolumn": "41", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "873": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "23": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1440": { "file": "electiontest.hny", "line": "36", "column": "26", "endline": "36", "endcolumn": "40", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "725": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "24", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "1145": { "file": "electionimpl.hny", "line": "47", "column": "18", "endline": "47", "endcolumn": "21", "stmt": [47,9,47,21], "code": "        result = True" },
    "1092": { "file": "electionimpl.hny", "line": "39", "column": "25", "endline": "39", "endcolumn": "33", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "676": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "5", "endline": "22", "endcolumn": "12", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "724": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "10", "endline": "37", "endcolumn": "16", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "596": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "149": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1432": { "file": "electiontest.hny", "line": "34", "column": "45", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "534": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "14", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "612": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1171": { "file": "electionimpl.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "35", "stmt": [54,1,54,35], "code": "def get_votes(election, candidate):" },
    "1111": { "file": "electionimpl.hny", "line": "43", "column": "35", "endline": "43", "endcolumn": "40", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "1488": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "674": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "758": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "37", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "428": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "23", "endline": "31", "endcolumn": "24", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1292": { "file": "electionimpl.hny", "line": "83", "column": "14", "endline": "83", "endcolumn": "16", "stmt": [83,5,83,16], "code": "    result = idx" },
    "726": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "9", "endline": "37", "endcolumn": "18", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "594": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1216": { "file": "electionimpl.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "49", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "1006": { "file": "electionimpl.hny", "line": "20", "column": "45", "endline": "20", "endcolumn": "49", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "858": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "16", "stmt": [66,16,68,6], "code": "    atomically when !sema > 0:" },
    "489": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "17", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1066": { "file": "electionimpl.hny", "line": "34", "column": "15", "endline": "34", "endcolumn": "22", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "396": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "14", "endline": "24", "endcolumn": "14", "stmt": [24,5,24,14], "code": "    result = 0" },
    "58": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "789": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "61", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "786": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "58", "endline": "52", "endcolumn": "58", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1325": { "file": "electiontest.hny", "line": "18", "column": "1", "endline": "18", "endcolumn": "3", "stmt": [18,1,18,45], "code": "def test_vote(e, candidate_idx, citizen_idx):" },
    "1206": { "file": "electionimpl.hny", "line": "66", "column": "15", "endline": "66", "endcolumn": "49", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "309": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "3", "stmt": [1,1,1,12], "code": "def empty():" },
    "1084": { "file": "electionimpl.hny", "line": "36", "column": "25", "endline": "36", "endcolumn": "33", "stmt": [36,5,36,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "435": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "429": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "18", "endline": "31", "endcolumn": "25", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1188": { "file": "electionimpl.hny", "line": "62", "column": "5", "endline": "62", "endcolumn": "11", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1276": { "file": "electionimpl.hny", "line": "80", "column": "12", "endline": "80", "endcolumn": "31", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "247": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "246": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "51", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "46": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1341": { "file": "electiontest.hny", "line": "20", "column": "13", "endline": "20", "endcolumn": "14", "stmt": [20,5,20,14], "code": "    complete()" },
    "944": { "file": "electionimpl.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def Election(n, m):" },
    "536": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "22", "endline": "62", "endcolumn": "23", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "1315": { "file": "electiontest.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "3", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "1076": { "file": "electionimpl.hny", "line": "35", "column": "40", "endline": "35", "endcolumn": "46", "stmt": [35,5,35,57], "code": "    var candidate = election->citizens[citizen].voted_for" },
    "1427": { "file": "electiontest.hny", "line": "34", "column": "24", "endline": "34", "endcolumn": "37", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "495": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "989": { "file": "electionimpl.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "46", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1056": { "file": "electionimpl.hny", "line": "29", "column": "35", "endline": "29", "endcolumn": "43", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "848": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "17", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "314": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "12", "stmt": [1,1,1,12], "code": "def empty():" },
    "409": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "1447": { "file": "electiontest.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "29", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "783": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "526": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "8", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "666": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "13", "endline": "19", "endcolumn": "16", "stmt": [19,13,19,20], "code": "            !p = new" },
    "1317": { "file": "electiontest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "15", "stmt": [14,1,14,15], "code": "def complete():" },
    "1272": { "file": "electionimpl.hny", "line": "80", "column": "23", "endline": "80", "endcolumn": "23", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "841": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "17", "endline": "60", "endcolumn": "17", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "649": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "12", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "1072": { "file": "electionimpl.hny", "line": "34", "column": "5", "endline": "34", "endcolumn": "44", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "494": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "1288": { "file": "electionimpl.hny", "line": "79", "column": "23", "endline": "79", "endcolumn": "23", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "1039": { "file": "electionimpl.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "18", "stmt": [25,5,25,18], "code": "    result = False" },
    "1333": { "file": "electiontest.hny", "line": "19", "column": "22", "endline": "19", "endcolumn": "34", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1117": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "16", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "1020": { "file": "electionimpl.hny", "line": "22", "column": "19", "endline": "22", "endcolumn": "26", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "147": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1328": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "586": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1361": { "file": "electiontest.hny", "line": "24", "column": "23", "endline": "24", "endcolumn": "36", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "855": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "19", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "300": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "336": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "5", "endline": "5", "endcolumn": "12", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "303": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "93": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1183": { "file": "electionimpl.hny", "line": "59", "column": "14", "endline": "59", "endcolumn": "33", "stmt": [59,5,59,44], "code": "    result = election->candidates[candidate]" },
    "929": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "17", "endline": "81", "endcolumn": "17", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1256": { "file": "electionimpl.hny", "line": "74", "column": "5", "endline": "74", "endcolumn": "49", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1002": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "34", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "140": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "241": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "172": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "20", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "954": { "file": "electionimpl.hny", "line": "7", "column": "20", "endline": "7", "endcolumn": "30", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "481": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "22", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "153": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "782": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "26", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "525": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "8", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "240": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1246": { "file": "electionimpl.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "51", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "1202": { "file": "electionimpl.hny", "line": "66", "column": "15", "endline": "66", "endcolumn": "22", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "317": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1127": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "16", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "1397": { "file": "electiontest.hny", "line": "31", "column": "9", "endline": "31", "endcolumn": "25", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1485": { "file": "electiontest.hny", "line": "42", "column": "7", "endline": "42", "endcolumn": "19", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1355": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "408": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "19", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "1262": { "file": "electionimpl.hny", "line": "77", "column": "16", "endline": "77", "endcolumn": "17", "stmt": [77,5,77,17], "code": "    var high = -1" },
    "1230": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "78", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "388": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "315": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "1165": { "file": "electionimpl.hny", "line": "52", "column": "35", "endline": "52", "endcolumn": "43", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "853": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "780": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "31", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "722": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "171": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1327": { "file": "electiontest.hny", "line": "19", "column": "5", "endline": "19", "endcolumn": "17", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "842": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "17", "endline": "60", "endcolumn": "17", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "615": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "21", "endline": "69", "endcolumn": "28", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1046": { "file": "electionimpl.hny", "line": "28", "column": "35", "endline": "28", "endcolumn": "41", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "539": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "16", "endline": "63", "endcolumn": "16", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "28": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1371": { "file": "electiontest.hny", "line": "25", "column": "22", "endline": "25", "endcolumn": "37", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "1151": { "file": "electionimpl.hny", "line": "51", "column": "15", "endline": "51", "endcolumn": "22", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "955": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1141": { "file": "electionimpl.hny", "line": "46", "column": "36", "endline": "46", "endcolumn": "45", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "720": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "14", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "672": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "22", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "168": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1294": { "file": "electionimpl.hny", "line": "83", "column": "5", "endline": "83", "endcolumn": "12", "stmt": [83,5,83,16], "code": "    result = idx" },
    "1214": { "file": "electionimpl.hny", "line": "67", "column": "15", "endline": "67", "endcolumn": "47", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "854": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "5", "endline": "63", "endcolumn": "12", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "599": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1175": { "file": "electionimpl.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "33", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "83": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "1224": { "file": "electionimpl.hny", "line": "69", "column": "43", "endline": "69", "endcolumn": "50", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "487": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "23", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "1345": { "file": "electiontest.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "3", "stmt": [22,1,22,69], "code": "def test_withdraw(e, first_candidate, second_candidate, citizen_idx):" },
    "1105": { "file": "electionimpl.hny", "line": "40", "column": "5", "endline": "40", "endcolumn": "44", "stmt": [40,5,40,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "1457": { "file": "electiontest.hny", "line": "39", "column": "18", "endline": "39", "endcolumn": "18", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1318": { "file": "electiontest.hny", "line": "15", "column": "5", "endline": "15", "endcolumn": "14", "stmt": [15,5,15,15], "code": "    atomically:" },
    "1430": { "file": "electiontest.hny", "line": "34", "column": "24", "endline": "34", "endcolumn": "40", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1010": { "file": "electionimpl.hny", "line": "21", "column": "19", "endline": "21", "endcolumn": "28", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1197": { "file": "electionimpl.hny", "line": "62", "column": "5", "endline": "62", "endcolumn": "46", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "723": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "10", "endline": "37", "endcolumn": "16", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "673": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "648": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "15", "stmt": [11,5,11,15], "code": "    atomically:" },
    "146": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1301": { "file": "electiontest.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,18], "code": "NUM_CANDIDATES = 2" },
    "1062": { "file": "electionimpl.hny", "line": "32", "column": "1", "endline": "32", "endcolumn": "3", "stmt": [32,1,32,32], "code": "def withdraw(election, citizen):" },
    "427": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "23", "endline": "31", "endcolumn": "24", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "328": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "305": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "88": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1012": { "file": "electionimpl.hny", "line": "21", "column": "30", "endline": "21", "endcolumn": "38", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1000": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "25", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "141": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "588": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "524": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "24", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "1377": { "file": "electiontest.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "51", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "852": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "302": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "38": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "19", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "660": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "18", "column": "12", "endline": "18", "endcolumn": "17", "stmt": [18,9,18,18], "code": "        if result:" },
    "257": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "42", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1090": { "file": "electionimpl.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "11", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1204": { "file": "electionimpl.hny", "line": "66", "column": "15", "endline": "66", "endcolumn": "33", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "1244": { "file": "electionimpl.hny", "line": "73", "column": "35", "endline": "73", "endcolumn": "48", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "1308": { "file": "electiontest.hny", "line": "12", "column": "5", "endline": "12", "endcolumn": "21", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "584": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "52", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1177": { "file": "electionimpl.hny", "line": "56", "column": "35", "endline": "56", "endcolumn": "43", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "438": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1398": { "file": "electiontest.hny", "line": "31", "column": "27", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1286": { "file": "electionimpl.hny", "line": "82", "column": "19", "endline": "82", "endcolumn": "19", "stmt": [82,13,82,19], "code": "            idx = i" },
    "480": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "721": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "339": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "252": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "32", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1115": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "48", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "175": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1147": { "file": "electionimpl.hny", "line": "48", "column": "14", "endline": "48", "endcolumn": "18", "stmt": [48,5,48,18], "code": "    result = False" },
    "585": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "253": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "32", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1212": { "file": "electionimpl.hny", "line": "67", "column": "15", "endline": "67", "endcolumn": "33", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "678": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "3", "stmt": [24,1,24,11], "code": "def Lock():" },
    "1086": { "file": "electionimpl.hny", "line": "36", "column": "35", "endline": "36", "endcolumn": "41", "stmt": [36,5,36,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "420": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "856": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "3", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "781": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "30", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "664": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "18", "endline": "19", "endcolumn": "20", "stmt": [19,13,19,20], "code": "            !p = new" },
    "256": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "42", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1274": { "file": "electionimpl.hny", "line": "80", "column": "12", "endline": "80", "endcolumn": "24", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "179": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "54": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "3", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "1347": { "file": "electiontest.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "17", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "1107": { "file": "electionimpl.hny", "line": "43", "column": "18", "endline": "43", "endcolumn": "25", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "1181": { "file": "electionimpl.hny", "line": "59", "column": "14", "endline": "59", "endcolumn": "21", "stmt": [59,5,59,44], "code": "    result = election->candidates[candidate]" },
    "587": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1331": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1254": { "file": "electionimpl.hny", "line": "74", "column": "35", "endline": "74", "endcolumn": "46", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "484": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "18", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "851": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "679": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "11", "stmt": [24,1,24,11], "code": "def Lock():" },
    "98": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "174": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1022": { "file": "electionimpl.hny", "line": "22", "column": "28", "endline": "22", "endcolumn": "34", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "661": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "18", "column": "9", "endline": "18", "endcolumn": "10", "stmt": [18,9,18,18], "code": "        if result:" },
    "142": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1307": { "file": "electiontest.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "8", "stmt": [10,1,10,10], "code": "WINNER = 0" },
    "849": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "3", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "1358": { "file": "electiontest.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "21", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "527": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "13", "endline": "59", "endcolumn": "13", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "1050": { "file": "electionimpl.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "44", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "424": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "10", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "421": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "12", "endline": "30", "endcolumn": "13", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "667": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "399": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "16", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1135": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "43", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "1222": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "78", "stmt": [69,5,69,78], "code": "    election->candidates[candidate_to] += election->candidates[candidate_from]" },
    "857": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "12", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "482": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "21", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "301": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "43", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "255": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "43", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1167": { "file": "electionimpl.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "46", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1040": { "file": "electionimpl.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "18", "stmt": [25,5,25,18], "code": "    result = False" },
    "1348": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "1157": { "file": "electionimpl.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "44", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "254": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "33", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "423": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "12", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "422": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "18", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "1385": { "file": "electiontest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "15", "stmt": [28,1,28,15], "code": "def end_test():" },
    "1367": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "528": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "13", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "306": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "850": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "19", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "1232": { "file": "electionimpl.hny", "line": "70", "column": "5", "endline": "70", "endcolumn": "12", "stmt": [70,5,70,44], "code": "    election->candidates[candidate_from] = 0" },
    "483": { "file": "/Users/maxhorowitz/opt/miniconda3/lib/python3.9/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "14", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "1497": { "file": "electiontest.hny", "line": "44", "column": "7", "endline": "44", "endcolumn": "14", "stmt": [44,1,44,16], "code": "spawn end_test()" }
  }
}

;
var boxSize = 10;
var currentTime = 0;
var totalTime = 0;
var microsteps = [];
var megasteps = []
var threads = [];
var curMegaStep = 0;
var mestable = document.getElementById("mestable");
var threadtable = document.getElementById("threadtable");
var coderow = document.getElementById("coderow");
var hvmrow = document.getElementById("hvmrow");
var container = document.getElementById('table-scroll');
var currOffset = 0;
var currCloc = null;

function drawTimeLine(mes) {
  var c = mes.canvas.getContext("2d");
  c.beginPath();
  c.clearRect(0, 0, mes.canvas.width, mes.canvas.height);
  var t = mes.startTime;
  var yboxes = Math.floor((mes.nsteps + 29) / 30);
  var nsteps = mes.nsteps;
  for (var y = 0; y < yboxes; y++) {
    var xboxes = nsteps > 30 ? 30 : nsteps;
    for (var x = 0; x < xboxes; x++) {
      c.fillStyle = t < currentTime ? "orange" : "white";
      c.fillRect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.rect(x * boxSize, y * boxSize, boxSize, boxSize);
      c.stroke();
      t += 1;
    }
    nsteps -= xboxes;
  }
}

function currentMegaStep() {
  if (currentTime == totalTime) {
    return microsteps[currentTime - 1].mesidx;
  }
  return microsteps[currentTime].mesidx;
}

function json_string_list(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "[ " + result + " ]";
}

function json_string_set(obj) {
  var result = "";
  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    result += json_string(obj[i]);
  }
  return "{ " + result + " }";
}

function json_string_dict(obj) {
  if (obj.length == 0) {
    return "{:}"
  }

  var islist = true;
  for (var i = 0; i < obj.length; i++) {
    if (obj[i].key.type != "int" || obj[i].key.value != i.toString()) {
      islist = false;
      break;
    }
  }

  var result = "";
  if (islist) {
    for (var i = 0; i < obj.length; i++) {
      if (i != 0) {
        result += ", ";
      }
      result += json_string(obj[i].value);
    }
    if (obj.length == 1) {
      result += ",";
    }
    return "[" + result + "]";
  }

  for (var i = 0; i < obj.length; i++) {
    if (result != "") {
      result += ", ";
    }
    var kv = obj[i];
    var k = json_string(kv.key);
    var v = json_string(kv.value);
    result += k + ": " + v;
  }
  return "{ " + result + " }";
}

function json_string_address(obj) {
  if (obj.length == 0) {
    return "None";
  }
  var result = "?" + obj[0].value;
  for (var i = 1; i < obj.length; i++) {
    result += "[" + json_string(obj[i]) + "]";
  }
  return result;
}

function json_string_context(obj) {
  var pc = json_string(obj.pc);
  return "CTX(" + pc + ")";
}

function json_string(obj) {
  switch (obj.type) {
  case "bool": case "int":
    return obj.value;
    break;
  case "atom":
    return '"' + obj.value + '"';
  case "set":
    return json_string_set(obj.value);
  case "list":
    return json_string_list(obj.value);
  case "dict":
    return json_string_dict(obj.value);
  case "pc":
    return "PC(" + obj.value + ")"
  case "address":
    return json_string_address(obj.value);
  case "context":
    return json_string_context(obj.value);
  default:
    return JSON.stringify(obj);
  }
}

function stringify_vars(obj) {
  var result = "";
  for (var k in obj) {
    if (k == "result" && obj[k].type == "address" && obj[k].value.length == 0) {
      continue;
    }
    if (result != "") {
      result += ", ";
    }
    result += k + ": " + json_string(obj[k]);
  }
  return result;
}

function convert_var(obj) {
  if (obj.type != "dict") {
    return json_string(obj);
  }
  if (obj.value.length == 0) {
    return "";
  }
  var result = {};
  for (var i = 0; i < obj.value.length; i++) {
    var kv = obj.value[i];
    var k = json_string(kv.key);      // TODO.  convert_var???
    result[k] = convert_var(kv.value);
  }
  return result;
}

function convert_vars(obj) {
  var result = {};
  for (var k in obj) {
    result[k] = convert_var(obj[k]);
  }
  return result;
}

function stackTrace(tid, trace, failure) {
  var table = threads[tid].tracetable;
  table.innerHTML = "";
  if (trace.length == 0) {
    var row = table.insertRow();
    var mcell = row.insertCell();
    mcell.innerHTML = threads[tid].name;
  }
  for (var i = 0; i < trace.length; i++) {
    var row = table.insertRow();

    var mcell = row.insertCell();
    mcell.innerHTML = trace[i].method;
    switch (trace[i].calltype) {
    case "process":
        mcell.style.color = "blue";
        break;
    case "normal":
        mcell.style.color = "black";
        break;
    case "interrupt":
        mcell.style.color = "orange";
        break;
    default:
        mcell.style.color = "red";
    }

    var vcell = row.insertCell();
    var vtext = document.createTextNode(stringify_vars(trace[i].vars));
    vcell.appendChild(vtext);
  }
  if (failure != null) {
    var row = table.insertRow();
    var fcell = row.insertCell();
    fcell.innerHTML = failure;
    fcell.colSpan = 2;
    fcell.style.color = "red";
  }
}

function addToLog(step, entry) {
  var table = megasteps[step].log;
  var row = table.insertRow();
  var mcell = row.insertCell();
  mcell.innerHTML = entry;
}

function handleClick(e, mesIdx) {
  var x = Math.floor(e.offsetX / boxSize);
  var y = Math.floor(e.offsetY / boxSize);
  currentTime = megasteps[mesIdx].startTime + y*30 + x + 1;
  run_microsteps()
}

var noloc = { file: "", line: "", code: "" };

function getCode(pc) {
  var locs = state.locations;
  while (pc >= 0) {
    s = "" + pc;
    if (locs.hasOwnProperty(s)) {
      return locs[s];
    }
    pc--;
  }
  return noloc;
}

function handleKeyPress(e) {
  switch (e.key) {
    case '0':
      currentTime = 0;
      run_microsteps();
      break;
    case 'ArrowLeft':
      if (currentTime > 0) {
        currentTime -= 1;
      }
      run_microsteps();
      break;
    case 'ArrowRight':
      if (currentTime < totalTime) {
        currentTime += 1;
      }
      run_microsteps();
      break;
    case 'ArrowUp':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      if (currentTime == mes.startTime && mesidx > 0) {
          mes = megasteps[mesidx - 1];
      }
      currentTime = mes.startTime;
      run_microsteps();
      break;
    case 'ArrowDown':
      var mesidx = currentMegaStep();
      var mes = megasteps[mesidx];
      currentTime = mes.startTime + mes.nsteps;
      if (currentTime > totalTime) {
        currentTime = totalTime;
      }
      run_microsteps();
      break;
    case 'Enter':
      if (currentTime < totalTime) {
        var cloc = getCode(microsteps[currentTime].pc);
        while (++currentTime < totalTime) {
          var nloc = getCode(microsteps[currentTime].pc);
          if (nloc.file != cloc.file || nloc.line != cloc.line || nloc.code != cloc.code) {
            break;
          }
        }
        run_microsteps();
      }
      break;
    default:
      // alert("unknown key " + e.code);
  }
}

function init_microstep(masidx, misidx) {
  var mas = state.macrosteps[masidx];
  var mis = mas.microsteps[misidx];
  var t = microsteps.length;
  if (t > 0 && microsteps[t - 1].tid != mas.tid) {
    curMegaStep++;
    megasteps[curMegaStep].startTime = t;
  }
  var mes = megasteps[curMegaStep];
  mes.nsteps++;
  microsteps[t] = {
    mesidx: curMegaStep,
    masidx: masidx,
    misidx: misidx,
    tid: parseInt(mas.tid),
    pc: parseInt(mis.pc),
    invfails: misidx == mas.microsteps.length - 1 ? mas.invfails : [],
    contexts: mas.contexts,
    hvm: mis.code,
    explain: mis.explain
  };
  if (misidx == 0) {
    ctx = mas.context;
    previous = { mode: ctx.mode, };
    if (ctx.hasOwnProperty("atomic")) {
      previous.atomic = ctx["atomic"];
    }
    else {
      previous.atomic = 0;
    }
    if (ctx.hasOwnProperty("readonly")) {
      previous.readonly = ctx["readonly"];
    }
    else {
      previous.readonly = 0;
    }
    if (ctx.hasOwnProperty("interruptlevel")) {
      previous.interruptlevel = ctx["interruptlevel"];
    }
    else {
      previous.interruptlevel = 0;
    }
    if (ctx.hasOwnProperty("trace")) {
      previous.trace = ctx.trace;
    }
    else {
      previous.trace = [];
    }
    if (ctx.hasOwnProperty("fp")) {
      previous.fp = ctx.fp;
    }
    else {
      previous.fp = 0;
    }
    if (ctx.hasOwnProperty("stack")) {
      previous.stack = ctx.stack.map(x => json_string(x));
    }
    else {
      previous.stack = [];
    }
    if (mas.hasOwnProperty("shared")) {
      previous.shared = convert_vars(mas.shared);
    }
    else {
      previous.shared = {};
    }
  }
  else {
    previous = microsteps[t-1];
  }

  if (mis.hasOwnProperty("npc")) {
    microsteps[t].npc = mis.npc;
  }
  else {
    microsteps[t].npc = mis.pc;
  }

  microsteps[t].code = getCode(microsteps[t].npc);

  microsteps[t].cloc = document.getElementById('C' + microsteps[t].npc);
  var npc = microsteps[t].npc - 4;
  if (npc < 0) {
    npc = 0;
  }
  microsteps[t].offset = document.getElementById('P' + npc);

  if (mis.hasOwnProperty("mode")) {
    microsteps[t].mode = mis.mode;
  }
  else {
    microsteps[t].mode = previous.mode;
  }

  if (mis.hasOwnProperty("atomic")) {
    microsteps[t].atomic = mis["atomic"];
  }
  else {
    microsteps[t].atomic = previous.atomic;
  }

  if (mis.hasOwnProperty("readonly")) {
    microsteps[t].readonly = mis["readonly"];
  }
  else {
    microsteps[t].readonly = previous.readonly;
  }

  if (mis.hasOwnProperty("interruptlevel")) {
    microsteps[t].interruptlevel = mis["interruptlevel"];
  }
  else {
    microsteps[t].interruptlevel = previous.interruptlevel;
  }

  if (mis.hasOwnProperty("choose")) {
    microsteps[t].choose = "chose " + json_string(mis["choose"]);
  }
  else {
    microsteps[t].choose = null;
  }
  if (mis.hasOwnProperty("print")) {
    microsteps[t].print = json_string(mis["print"]);
  }
  else {
    microsteps[t].print = null;
  }

  if (mis.hasOwnProperty("failure")) {
    microsteps[t].failure = mis.failure;
    microsteps[t].cloc = null;
  }
  else {
    microsteps[t].failure = null;
  }

  if (mis.hasOwnProperty("trace")) {
    microsteps[t].trace = mis.trace;
  }
  else {
    microsteps[t].trace = previous.trace;
  }

  // Update local variables
  var trl = microsteps[t].trace.length; 
  if (trl > 0 && mis.hasOwnProperty("local")) {
    // deep copy first
    microsteps[t].trace = JSON.parse(JSON.stringify(microsteps[t].trace))
    microsteps[t].trace[trl - 1].vars = mis.local;
  }

  if (mis.hasOwnProperty("shared")) {
    microsteps[t].shared = convert_vars(mis.shared);
  }
  else {
    microsteps[t].shared = previous.shared;
  }

  if (mis.hasOwnProperty("fp")) {
    microsteps[t].fp = mis.fp;
  }
  else {
    microsteps[t].fp = previous.fp;
  }
  if (mis.hasOwnProperty("pop")) {
    var n = parseInt(mis.pop);
    microsteps[t].stack = previous.stack.slice(0,
                              previous.stack.length - n);
  }
  else {
    microsteps[t].stack = previous.stack;
  }
  if (mis.hasOwnProperty("push")) {
    var vals = mis.push.map(x => json_string(x));
    microsteps[t].stack = microsteps[t].stack.concat(vals);
  }
}

function init_macrostep(i) {
  var mas = state.macrosteps[i];
  for (var j = 0; j < mas.microsteps.length; j++) {
    init_microstep(i, j);
  }
  for (var ctx = 0; ctx < mas.contexts.length; ctx++) {
    var tid = parseInt(mas.contexts[ctx].tid);
    threads[tid].name = mas.contexts[ctx].name;
  }
}

function dict_convert(d) {
  if (typeof d === "string") {
    return d;
  }
  result = "";
  for (var k in d) {
    if (result != "") {
      result += ", ";
    }
    result += dict_convert(k) + ":" + dict_convert(d[k]);;
  }
  return "{" + result + "}";
}

function get_shared(shared, path) {
  if (!shared.hasOwnProperty(path[0])) {
    return "";
  }
  if (path.length == 1) {
    return dict_convert(shared[path[0]]);
  }
  return get_shared(shared[path[0]], path.slice(1));
}

function get_status(ctx) {
  var status = ctx.mode;
  if (status != "terminated") {
    if (ctx.atomic > 0) {
      status += " atomic";
    }
    if (ctx.readonly > 0) {
      status += " read-only";
    }
    if (ctx.interruptlevel > 0) {
      status += " interrupts-disabled";
    }
  }
  return status;
}

function escapeHTML(s) {
  return s
     .replace(/&/g, "&amp;")
     .replace(/</g, "&lt;")
     .replace(/>/g, "&gt;")
     .replace(/"/g, "&quot;")
     .replace(/'/g, "&#039;");
}

function run_microstep(t) {
  var mis = microsteps[t];
  var mesrow = mestable.rows[mis.mesidx];
  mesrow.cells[3].innerHTML = mis.npc;

  for (var i = 0; i < vardir.length; i++) {
    mesrow.cells[i + 4].innerHTML = get_shared(mis.shared, vardir[i])
  }

  if (mis.failure != null) {
    stackTrace(mis.tid, mis.trace, mis.failure);
  }
  else if (mis.print != null) {
    stackTrace(mis.tid, mis.trace, "print " + mis.print);
    addToLog(mis.mesidx, mis.print)
  }
  else {
    stackTrace(mis.tid, mis.trace, mis.choose);
  }

  for (var ctx = 0; ctx < mis.contexts.length; ctx++) {
    var tid = parseInt(mis.contexts[ctx].tid);
    threads[tid].name = mis.contexts[ctx].name;
    threadtable.rows[tid].cells[1].innerHTML = get_status(mis.contexts[ctx]);
    threadtable.rows[tid].cells[3].innerHTML = mis.contexts[ctx].stack.map(x => json_string(x));
  }
  var mes = megasteps[mis.mesidx];
  if (t != mes.startTime + mes.nsteps - 1) {
    threadtable.rows[mis.tid].cells[1].innerHTML = get_status(mis);
  }
  threadtable.rows[mis.tid].cells[3].innerHTML = mis.stack.slice(mis.fp);

  if (mis.invfails.length > 0) {
    var inv = mis.invfails[0];
    code = getCode(inv.pc);
    coderow.style.color = "red";
    coderow.innerHTML = code.file + ":" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code) + " (" + inv.reason + ")";
    mis.cloc = null;
  }
  else {
    coderow.style.color = "blue";
    if (t+1 < microsteps.length) {
      var nmis = microsteps[t+1];
      code = getCode(nmis.pc);
      var l1 = parseInt(code.line);
      var l2 = parseInt(code.endline);
      if (l1 == l2 && l1 == code.stmt[0] && l2 == code.stmt[2]) {
        var c1 = parseInt(code.column) - 1;
        var c2 = parseInt(code.endcolumn);
        var s1 = code.code.slice(0, c1);
        var s2 = code.code.slice(c1, c2);
        var s3 = code.code.slice(c2);
        coderow.innerHTML = code.file + ":" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(s1) + "<span style='color:green'>" + escapeHTML(s2) + "</span>" + escapeHTML(s3);
      }
      else {
        coderow.innerHTML = code.file + ":" + code.line + "&nbsp;&nbsp;&nbsp;" + escapeHTML(code.code);
      }
    }
  }

  if (t+1 < microsteps.length) {
    var nmis = microsteps[t+1];
    hvmrow.innerHTML = "T" + nmis.tid + "/" + nmis.pc + ": " + nmis.hvm + " (" + nmis.explain + ")"
    currCloc = document.getElementById('C' + nmis.pc)
    currOffset = document.getElementById('P' + nmis.pc);
  }
  else {
    currCloc = null;
    currOffset = mis.offset;
  }
}

function run_microsteps() {
  coderow.innerHTML = "";
  hvmrow.innerHTML = "";
  if (currCloc != null) {
    currCloc.style.color = "black";
  }
  currCloc = document.getElementById('C0');
  currOffset = document.getElementById('P0');
  for (var i = 0; i < nmegasteps; i++) {
    mestable.rows[i].cells[3].innerHTML = "";
    for (var j = 0; j < vardir.length; j++) {
      mestable.rows[i].cells[j + 4].innerHTML = "";
    }
    megasteps[i].log.innerHTML = "";
  }
  for (var tid = 0; tid < nthreads; tid++) {
    threadtable.rows[tid].cells[1].innerHTML = "init";
    stackTrace(tid, [], null);
    threadtable.rows[tid].cells[3].innerHTML = threads[tid].stack;
  }

  var mis = microsteps[0];
  var mesrow = mestable.rows[mis.mesidx];
  mesrow.cells[3].innerHTML = 0;
  hvmrow.innerHTML = "T" + mis.tid + "/" + mis.pc + ": " + mis.hvm + " (" + mis.explain + ")"

  for (var t = 0; t < currentTime; t++) {
    run_microstep(t);
  }
  for (var i = 0; i < nmegasteps; i++) {
    drawTimeLine(megasteps[i]);
  }
  container.scrollTop = currOffset.offsetTop;

  if (currCloc != null) {
    currCloc.style.color = "red";
  }

  var curmes = currentTime < totalTime ? microsteps[currentTime].mesidx : -1;
  for (var mes = 0; mes < nmegasteps; mes++) {
    var row = document.getElementById("mes" + mes)
    if (mes == curmes) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }

  var curtid = currentTime < totalTime ? microsteps[currentTime].tid : -1;
  for (var tid = 0; tid < nthreads; tid++) {
    var row = document.getElementById("thread" + tid)
    if (tid == curtid) {
      row.style = 'background-color: #A5FF33;';
    }
    else {
      row.style = 'background-color: white;';
    }
  }
}

// Initialization starts here

for (var tid = 0; tid < nthreads; tid++) {
  threads[tid] = {
    name: "T" + tid,
    status: "normal",
    stack: [],
    stacktrace: [],
    tracetable: document.getElementById("threadinfo" + tid)
  };
}
threads[0].stack = [ "()" ]
for (let i = 0; i < nmegasteps; i++) {
  var canvas = document.getElementById("timeline" + i);
  megasteps[i] = {
    canvas: canvas,
    startTime: 0,
    nsteps: 0,
    contexts: [],
    log: document.getElementById("log" + i)
  };
  canvas.addEventListener('mousedown', function(e){handleClick(e, i)});
}
for (var j = 0; j < state.macrosteps.length; j++) {
  init_macrostep(j);
}

currentTime = totalTime = microsteps.length;
run_microsteps();
document.addEventListener('keydown', handleKeyPress);

</script>
</body>
</html>
