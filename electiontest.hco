{
  "issue": "Safety violation",
  "macrosteps": [
    {
      "id": "1",
      "len": "0",
      "shared": { },
      "tid": "0",
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "60000080e499",
        "fp": "1",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
          {
          "pc": "0",
          "xpc": "0",
          "method": "__init__()",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "atomic": "1",
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "method \"__init__\" with argument () set to []",
          "shared": { },
          "npc": "1",
          "fp": "1",
          "trace": [
            {
            "pc": "1",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "1",
          "pc": "0"
        },
        {
          "code": "Jump 52",
          "explain": "jump over method definition: set program counter to 52",
          "npc": "52",
          "push": [ ],
          "pc": "1"
        },
        {
          "code": "Push PC(55)",
          "explain": "push constant PC(55)",
          "npc": "53",
          "push": [ { "type": "pc", "value": "55" } ],
          "pc": "52"
        },
        {
          "code": "Builtin(list$tail)",
          "explain": "pop pc (PC(55)) and bind to built-in method list$tail",
          "npc": "54",
          "pop": "1",
          "push": [ ],
          "pc": "53"
        },
        {
          "code": "Jump 371",
          "explain": "jump over method definition: set program counter to 371",
          "npc": "371",
          "push": [ ],
          "pc": "54"
        },
        {
          "code": "Push PC(374)",
          "explain": "push constant PC(374)",
          "npc": "372",
          "push": [ { "type": "pc", "value": "374" } ],
          "pc": "371"
        },
        {
          "code": "Builtin(bag$multiplicity)",
          "explain": "pop pc (PC(374)) and bind to built-in method bag$multiplicity",
          "npc": "373",
          "pop": "1",
          "push": [ ],
          "pc": "372"
        },
        {
          "code": "Jump 392",
          "explain": "jump over method definition: set program counter to 392",
          "npc": "392",
          "push": [ ],
          "pc": "373"
        },
        {
          "code": "Push PC(395)",
          "explain": "push constant PC(395)",
          "npc": "393",
          "push": [ { "type": "pc", "value": "395" } ],
          "pc": "392"
        },
        {
          "code": "Builtin(bag$size)",
          "explain": "pop pc (PC(395)) and bind to built-in method bag$size",
          "npc": "394",
          "pop": "1",
          "push": [ ],
          "pc": "393"
        },
        {
          "code": "Jump 414",
          "explain": "jump over method definition: set program counter to 414",
          "npc": "414",
          "push": [ ],
          "pc": "394"
        },
        {
          "code": "Push PC(417)",
          "explain": "push constant PC(417)",
          "npc": "415",
          "push": [ { "type": "pc", "value": "417" } ],
          "pc": "414"
        },
        {
          "code": "Builtin(bag$bmin)",
          "explain": "pop pc (PC(417)) and bind to built-in method bag$bmin",
          "npc": "416",
          "pop": "1",
          "push": [ ],
          "pc": "415"
        },
        {
          "code": "Jump 433",
          "explain": "jump over method definition: set program counter to 433",
          "npc": "433",
          "push": [ ],
          "pc": "416"
        },
        {
          "code": "Push PC(436)",
          "explain": "push constant PC(436)",
          "npc": "434",
          "push": [ { "type": "pc", "value": "436" } ],
          "pc": "433"
        },
        {
          "code": "Builtin(bag$bmax)",
          "explain": "pop pc (PC(436)) and bind to built-in method bag$bmax",
          "npc": "435",
          "pop": "1",
          "push": [ ],
          "pc": "434"
        },
        {
          "code": "Jump 461",
          "explain": "jump over method definition: set program counter to 461",
          "npc": "461",
          "push": [ ],
          "pc": "435"
        },
        {
          "code": "Push PC(464)",
          "explain": "push constant PC(464)",
          "npc": "462",
          "push": [ { "type": "pc", "value": "464" } ],
          "pc": "461"
        },
        {
          "code": "Builtin(bag$add)",
          "explain": "pop pc (PC(464)) and bind to built-in method bag$add",
          "npc": "463",
          "pop": "1",
          "push": [ ],
          "pc": "462"
        },
        {
          "code": "Jump 490",
          "explain": "jump over method definition: set program counter to 490",
          "npc": "490",
          "push": [ ],
          "pc": "463"
        },
        {
          "code": "Push PC(493)",
          "explain": "push constant PC(493)",
          "npc": "491",
          "push": [ { "type": "pc", "value": "493" } ],
          "pc": "490"
        },
        {
          "code": "Builtin(bag$remove)",
          "explain": "pop pc (PC(493)) and bind to built-in method bag$remove",
          "npc": "492",
          "pop": "1",
          "push": [ ],
          "pc": "491"
        },
        {
          "code": "Jump 1283",
          "explain": "jump over method definition: set program counter to 1283",
          "npc": "1283",
          "push": [ ],
          "pc": "492"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1284",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1283"
        },
        {
          "code": "Store threads_executed",
          "explain": "pop value (0) and store into variable threads_executed",
          "shared": { "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1285",
          "pop": "1",
          "push": [ ],
          "pc": "1284"
        },
        {
          "code": "Push 4",
          "explain": "push constant 4",
          "npc": "1286",
          "push": [ { "type": "int", "value": "4" } ],
          "pc": "1285"
        },
        {
          "code": "Store number_of_spawned_threads",
          "explain": "pop value (4) and store into variable number_of_spawned_threads",
          "shared": { "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1287",
          "pop": "1",
          "push": [ ],
          "pc": "1286"
        },
        {
          "code": "Push 2",
          "explain": "push constant 2",
          "npc": "1288",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1287"
        },
        {
          "code": "Store NUM_CANDIDATES",
          "explain": "pop value (2) and store into variable NUM_CANDIDATES",
          "shared": { "NUM_CANDIDATES": { "type": "int", "value": "2" }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1289",
          "pop": "1",
          "push": [ ],
          "pc": "1288"
        },
        {
          "code": "Push 3",
          "explain": "push constant 3",
          "npc": "1290",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1289"
        },
        {
          "code": "Store NUM_CITIZENS",
          "explain": "pop value (3) and store into variable NUM_CITIZENS",
          "shared": { "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1291",
          "pop": "1",
          "push": [ ],
          "pc": "1290"
        },
        {
          "code": "Push [3, 0]",
          "explain": "push constant [3, 0]",
          "npc": "1292",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1291"
        },
        {
          "code": "Store EXPECTED_VOTES",
          "explain": "pop value ([3, 0]) and store into variable EXPECTED_VOTES",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1293",
          "pop": "1",
          "push": [ ],
          "pc": "1292"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1294",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1293"
        },
        {
          "code": "Store WINNER",
          "explain": "pop value (0) and store into variable WINNER",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1295",
          "pop": "1",
          "push": [ ],
          "pc": "1294"
        },
        {
          "code": "Push PC(944)",
          "explain": "push program counter constant 944 (\"Election\")",
          "npc": "1296",
          "push": [ { "type": "pc", "value": "944" } ],
          "pc": "1295"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1297",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1296"
        },
        {
          "code": "Load NUM_CANDIDATES",
          "explain": "push value (2) of variable NUM_CANDIDATES",
          "npc": "1298",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1297"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "npc": "1299",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "1298"
        },
        {
          "code": "Load NUM_CITIZENS",
          "explain": "push value (3) of variable NUM_CITIZENS",
          "npc": "1300",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "1299"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [2]); insert first value into the second; push result ([2, 3])",
          "npc": "1301",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "1300"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([2, 3]) and a program counter value (944: \"Election\") and call the method",
          "npc": "944",
          "fp": "3",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "944",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "20834" }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "1301"
        },
        {
          "code": "Frame Election(n, m)",
          "explain": "method \"Election\" with argument (n, m) set to [2, 3]",
          "npc": "945",
          "local": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "944"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "946",
          "local": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "945"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "947",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "946"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "948",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "947"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "949",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "948"
        },
        {
          "code": "Push PC(679)",
          "explain": "push program counter constant 679 (\"Lock\")",
          "npc": "950",
          "push": [ { "type": "pc", "value": "679" } ],
          "pc": "949"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "951",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "950"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (679: \"Lock\") and call the method",
          "npc": "679",
          "fp": "8",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "952",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "679",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 7
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15234" }, { "type": "list", "value": [] } ],
          "pc": "951"
        },
        {
          "code": "Frame Lock()",
          "explain": "method \"Lock\" with argument () set to []",
          "npc": "680",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "m" }, "value": { "type": "int", "value": "3" } }, { "key": { "type": "atom", "value": "n" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "679"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "681",
          "local": { },
          "push": [ ],
          "pc": "680"
        },
        {
          "code": "Push PC(672)",
          "explain": "push program counter constant 672 (\"BinSema\")",
          "npc": "682",
          "push": [ { "type": "pc", "value": "672" } ],
          "pc": "681"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "683",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "682"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (False) and a program counter value (672: \"BinSema\") and call the method",
          "npc": "672",
          "fp": "10",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "952",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 7
            },
            {
            "pc": "672",
            "xpc": "672",
            "method": "BinSema(False)",
            "calltype": "normal",
            "vars": { },
            "sp": 9
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "10946" }, { "type": "bool", "value": "False" } ],
          "pc": "683"
        },
        {
          "code": "Frame BinSema(acquired)",
          "explain": "method \"BinSema\" with argument acquired set to False",
          "npc": "673",
          "local": { "acquired": { "type": "bool", "value": "False" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "672"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "674",
          "local": { "acquired": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "673"
        },
        {
          "code": "LoadVar acquired",
          "explain": "push value (False) of variable \"acquired\"",
          "npc": "675",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "674"
        },
        {
          "code": "DelVar acquired",
          "explain": "delete method variable acquired",
          "npc": "676",
          "local": { },
          "push": [ ],
          "pc": "675"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "677",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "676"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "684",
          "fp": "8",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "952",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 7
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "677"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "685",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "684"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "952",
          "fp": "3",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "952",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "local": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "685"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, []); insert first value into the second; push result ([False])",
          "npc": "953",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "952"
        },
        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "npc": "954",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "953"
        },
        {
          "code": "2-ary *",
          "explain": "pop 2 values (2, [False]); create multiple copies of list; push result ([False, False])",
          "npc": "955",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ],
          "pc": "954"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([False, False], \"locks_can\", {:}); add key/value pair to dictionary; push result ({ \"locks_can\": [False, False] })",
          "npc": "956",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "955"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "957",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "956"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "958",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "957"
        },
        {
          "code": "Push PC(679)",
          "explain": "push program counter constant 679 (\"Lock\")",
          "npc": "959",
          "push": [ { "type": "pc", "value": "679" } ],
          "pc": "958"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "960",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "959"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([]) and a program counter value (679: \"Lock\") and call the method",
          "npc": "679",
          "fp": "8",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "679",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 7
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15378" }, { "type": "list", "value": [] } ],
          "pc": "960"
        },
        {
          "code": "Frame Lock()",
          "explain": "method \"Lock\" with argument () set to []",
          "npc": "680",
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "m" }, "value": { "type": "int", "value": "3" } }, { "key": { "type": "atom", "value": "n" }, "value": { "type": "int", "value": "2" } } ] } ],
          "pc": "679"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "681",
          "local": { },
          "push": [ ],
          "pc": "680"
        },
        {
          "code": "Push PC(672)",
          "explain": "push program counter constant 672 (\"BinSema\")",
          "npc": "682",
          "push": [ { "type": "pc", "value": "672" } ],
          "pc": "681"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "683",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "682"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (False) and a program counter value (672: \"BinSema\") and call the method",
          "npc": "672",
          "fp": "10",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 7
            },
            {
            "pc": "672",
            "xpc": "672",
            "method": "BinSema(False)",
            "calltype": "normal",
            "vars": { },
            "sp": 9
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "10946" }, { "type": "bool", "value": "False" } ],
          "pc": "683"
        },
        {
          "code": "Frame BinSema(acquired)",
          "explain": "method \"BinSema\" with argument acquired set to False",
          "npc": "673",
          "local": { "acquired": { "type": "bool", "value": "False" }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "672"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "674",
          "local": { "acquired": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "673"
        },
        {
          "code": "LoadVar acquired",
          "explain": "push value (False) of variable \"acquired\"",
          "npc": "675",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "674"
        },
        {
          "code": "DelVar acquired",
          "explain": "delete method variable acquired",
          "npc": "676",
          "local": { },
          "push": [ ],
          "pc": "675"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "677",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "676"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "684",
          "fp": "8",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            },
            {
            "pc": "684",
            "xpc": "679",
            "method": "Lock()",
            "calltype": "normal",
            "vars": { },
            "sp": 7
            }
          ],
          "local": { },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "677"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "685",
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "684"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "961",
          "fp": "3",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            },
            {
            "pc": "961",
            "xpc": "944",
            "method": "Election(2, 3)",
            "calltype": "normal",
            "vars": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
            "sp": 2
            }
          ],
          "local": { "m": { "type": "int", "value": "3" }, "n": { "type": "int", "value": "2" } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "685"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (False, []); insert first value into the second; push result ([False])",
          "npc": "962",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" } ] } ],
          "pc": "961"
        },
        {
          "code": "LoadVar m",
          "explain": "push value (3) of variable \"m\"",
          "npc": "963",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "962"
        },
        {
          "code": "2-ary *",
          "explain": "pop 2 values (3, [False]); create multiple copies of list; push result ([False, False, False])",
          "npc": "964",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } ],
          "pc": "963"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([False, False, False], \"locks_cit\", { \"locks_can\": [False, False] }); add key/value pair to dictionary; push result ({ \"locks_can\": [False, False], \"locks_cit\": [False, False, False] })",
          "npc": "965",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "964"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "966",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "965"
        },
        {
          "code": "Push [0,]",
          "explain": "push constant [0,]",
          "npc": "967",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "966"
        },
        {
          "code": "LoadVar n",
          "explain": "push value (2) of variable \"n\"",
          "npc": "968",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "967"
        },
        {
          "code": "DelVar n",
          "explain": "delete method variable n",
          "npc": "969",
          "local": { "m": { "type": "int", "value": "3" } },
          "push": [ ],
          "pc": "968"
        },
        {
          "code": "2-ary *",
          "explain": "pop 2 values (2, [0]); create multiple copies of list; push result ([0, 0])",
          "npc": "970",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "969"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([0, 0], \"candidates\", { \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }); add key/value pair to dictionary; push result ({ \"candidates\": [0, 0], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] })",
          "npc": "971",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "970"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "972",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "971"
        },
        {
          "code": "Push [{ \"voted\":False, \"voted_for\":-1 },]",
          "explain": "push constant [{ \"voted\":False, \"voted_for\":-1 },]",
          "npc": "973",
          "push": [ { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } ],
          "pc": "972"
        },
        {
          "code": "LoadVar m",
          "explain": "push value (3) of variable \"m\"",
          "npc": "974",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "973"
        },
        {
          "code": "DelVar m",
          "explain": "delete method variable m",
          "npc": "975",
          "local": { },
          "push": [ ],
          "pc": "974"
        },
        {
          "code": "2-ary *",
          "explain": "pop 2 values (3, [{ \"voted\": False, \"voted_for\": -1 }]); create multiple copies of list; push result ([{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }])",
          "npc": "976",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } ],
          "pc": "975"
        },
        {
          "code": "3-ary DictAdd",
          "explain": "pop 3 values ([{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"citizens\", { \"candidates\": [0, 0], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }); add key/value pair to dictionary; push result ({ \"candidates\": [0, 0], \"citizens\": [{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] })",
          "npc": "977",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "976"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value ({ \"candidates\": [0, 0], \"citizens\": [{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }) and store locally in variable \"result\"",
          "npc": "978",
          "local": { "result": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "977"
        },
        {
          "code": "Return",
          "explain": "push result ({ \"candidates\": [0, 0], \"citizens\": [{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }) and restore method variables",
          "npc": "1302",
          "fp": "1",
          "trace": [
            {
            "pc": "1302",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { "result": { "type": "address", "value": [] } },
            "sp": 0
            }
          ],
          "local": { "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] } ],
          "pc": "978"
        },
        {
          "code": "Store e",
          "explain": "pop value ({ \"candidates\": [0, 0], \"citizens\": [{ \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }, { \"voted\": False, \"voted_for\": -1 }], \"locks_can\": [False, False], \"locks_cit\": [False, False, False] }) and store into variable e",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1303",
          "pop": "1",
          "push": [ ],
          "pc": "1302"
        },
        {
          "code": "Jump 1442",
          "explain": "jump over method definition: set program counter to 1442",
          "npc": "1442",
          "push": [ ],
          "pc": "1303"
        },
        {
          "code": "Push PC(1313)",
          "explain": "push program counter constant 1313 (\"test_vote\")",
          "npc": "1443",
          "push": [ { "type": "pc", "value": "1313" } ],
          "pc": "1442"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1444",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1443"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1445",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1444"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1446",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1445"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1447",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1446"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e]); insert first value into the second; push result ([?e, 0])",
          "npc": "1448",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1447"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1449",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1448"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e, 0]); insert first value into the second; push result ([?e, 0, 0])",
          "npc": "1450",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1449"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1451",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1450"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([?e, 0, 0]), and program counter (1313: \"test_vote\"), and spawn thread",
          "npc": "1452",
          "pop": "3",
          "push": [ ],
          "contexts": "2",
          "pc": "1451"
        },
        {
          "code": "Push PC(1313)",
          "explain": "push program counter constant 1313 (\"test_vote\")",
          "npc": "1453",
          "push": [ { "type": "pc", "value": "1313" } ],
          "pc": "1452"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1454",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1453"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1455",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1454"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1456",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1455"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1457",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1456"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1458",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1457"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1459",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1458"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e, 1]); insert first value into the second; push result ([?e, 1, 1])",
          "npc": "1460",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1459"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1461",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1460"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([?e, 1, 1]), and program counter (1313: \"test_vote\"), and spawn thread",
          "npc": "1462",
          "pop": "3",
          "push": [ ],
          "contexts": "3",
          "pc": "1461"
        },
        {
          "code": "Push PC(1313)",
          "explain": "push program counter constant 1313 (\"test_vote\")",
          "npc": "1463",
          "push": [ { "type": "pc", "value": "1313" } ],
          "pc": "1462"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1464",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1463"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1465",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1464"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1466",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1465"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1467",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1466"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e]); insert first value into the second; push result ([?e, 1])",
          "npc": "1468",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" } ] } ],
          "pc": "1467"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1469",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1468"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e, 1]); insert first value into the second; push result ([?e, 1, 1])",
          "npc": "1470",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1469"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1471",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1470"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([?e, 1, 1]), and program counter (1313: \"test_vote\"), and spawn thread",
          "npc": "1472",
          "pop": "3",
          "push": [ ],
          "contexts": "3",
          "pc": "1471"
        },
        {
          "code": "Push PC(1333)",
          "explain": "push program counter constant 1333 (\"test_withdraw\")",
          "npc": "1473",
          "push": [ { "type": "pc", "value": "1333" } ],
          "pc": "1472"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1474",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1473"
        },
        {
          "code": "Push ?e",
          "explain": "push constant ?e",
          "npc": "1475",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1474"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1476",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1475"
        },
        {
          "code": "Push 0",
          "explain": "push constant 0",
          "npc": "1477",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1476"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e]); insert first value into the second; push result ([?e, 0])",
          "npc": "1478",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1477"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1479",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1478"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [?e, 0]); insert first value into the second; push result ([?e, 0, 1])",
          "npc": "1480",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "1479"
        },
        {
          "code": "Push 2",
          "explain": "push constant 2",
          "npc": "1481",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1480"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [?e, 0, 1]); insert first value into the second; push result ([?e, 0, 1, 2])",
          "npc": "1482",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1481"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1483",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1482"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([?e, 0, 1, 2]), and program counter (1333: \"test_withdraw\"), and spawn thread",
          "npc": "1484",
          "pop": "3",
          "push": [ ],
          "contexts": "4",
          "pc": "1483"
        },
        {
          "code": "Push PC(1372)",
          "explain": "push program counter constant 1372 (\"end_test\")",
          "npc": "1485",
          "push": [ { "type": "pc", "value": "1372" } ],
          "pc": "1484"
        },
        {
          "code": "Push ()",
          "explain": "push constant ()",
          "npc": "1486",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1485"
        },
        {
          "code": "Push {:}",
          "explain": "push constant {:}",
          "npc": "1487",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1486"
        },
        {
          "code": "Spawn",
          "explain": "pop thread-local state ({:}), argument ([]), and program counter (1372: \"end_test\"), and spawn thread",
          "npc": "1488",
          "pop": "3",
          "push": [ ],
          "contexts": "5",
          "pc": "1487"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1488",
          "local": { },
          "mode": "terminated",
          "pop": "1",
          "push": [ ],
          "pc": "1488"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb00999": "1",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f818bb00999",
          "fp": "1",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1333",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }],
          "trace": [
            {
            "pc": "1333",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "3",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f818bb00999",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "1333",
        "sp": "1",
        "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }],
        "trace": [
          {
          "pc": "1333",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame test_withdraw(e, first_candidate, second_candidate, citizen_idx)",
          "explain": "method \"test_withdraw\" with argument (e, first_candidate, second_candidate, citizen_idx) set to [?e, 0, 1, 2]",
          "npc": "1334",
          "fp": "1",
          "trace": [
            {
            "pc": "1334",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "first_candidate": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            }
          ],
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "first_candidate": { "type": "int", "value": "0" }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "contexts": "4",
          "pc": "1333"
        },
        {
          "code": "Push PC(980)",
          "explain": "push program counter constant 980 (\"vote\")",
          "npc": "1335",
          "push": [ { "type": "pc", "value": "980" } ],
          "pc": "1334"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1336",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1335"
        },
        {
          "code": "LoadVar e",
          "explain": "push value (?e) of variable \"e\"",
          "npc": "1337",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1336"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1338",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1337"
        },
        {
          "code": "LoadVar first_candidate",
          "explain": "push value (0) of variable \"first_candidate\"",
          "npc": "1339",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1338"
        },
        {
          "code": "DelVar first_candidate",
          "explain": "delete method variable first_candidate",
          "npc": "1340",
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "1339"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [?e]); insert first value into the second; push result ([?e, 0])",
          "npc": "1341",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" } ] } ],
          "pc": "1340"
        },
        {
          "code": "LoadVar citizen_idx",
          "explain": "push value (2) of variable \"citizen_idx\"",
          "npc": "1342",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1341"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [?e, 0]); insert first value into the second; push result ([?e, 0, 2])",
          "npc": "1343",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1342"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 0, 2]) and a program counter value (980: \"vote\") and call the method",
          "npc": "980",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "980",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21506" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1343"
        },
        {
          "code": "Frame vote(election, candidate, citizen)",
          "explain": "method \"vote\" with argument (election, candidate, citizen) set to [?e, 0, 2]",
          "npc": "981",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "980"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "982",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "981"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "983",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "982"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "984",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "983"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "985",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "984"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "986",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "985"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "987",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "986"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "988",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "987"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15826" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "988"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f818b900af9": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f818b900af9",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "12",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f818b900af9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "15826" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "989",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "989",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "990",
          "pop": "1",
          "push": [ ],
          "pc": "989"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "991",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "990"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "992",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "991"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "993",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "992"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "994",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "993"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "995",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "994"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "996",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "995"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "15954" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "996"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f8188600569": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f8188600569",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "17",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f8188600569",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "15954" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "997",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "997",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "998",
          "pop": "1",
          "push": [ ],
          "pc": "997"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "999",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "998"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1000",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "999"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1001",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1000"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1002",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1001"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1003",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1002"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1004",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1003"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted\"])",
          "npc": "1005",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1004"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1",
          "7f818bb026c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f818bb026c9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1005",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1005",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "63",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f818bb026c9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "1005",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }],
        "trace": [
          {
          "pc": "1005",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][2][\"voted\"]) and push value (False)",
          "npc": "1006",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1006",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "contexts": "4",
          "pc": "1005"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1007",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1006"
        },
        {
          "code": "2-ary ==",
          "explain": "pop 2 values (False, False); check if both values are the same; push result (True)",
          "npc": "1008",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1007"
        },
        {
          "code": "JumpCond False 1039",
          "explain": "pop value (True), compare to False, and jump to 1039 if the same",
          "npc": "1009",
          "pop": "1",
          "push": [ ],
          "pc": "1008"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1010",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1009"
        },
        {
          "code": "Push \"candidates\"",
          "explain": "push constant \"candidates\"",
          "npc": "1011",
          "push": [ { "type": "atom", "value": "candidates" } ],
          "pc": "1010"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"candidates\") and an address (?e) and push the combined address (?e[\"candidates\"])",
          "npc": "1012",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" } ] } ],
          "pc": "1011"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1013",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1012"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"candidates\"]) and push the combined address (?e[\"candidates\"][0])",
          "npc": "1014",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1013"
        },
        {
          "code": "Dup",
          "explain": "push a copy of the top value on the stack",
          "npc": "1015",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1014"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f818b9013a9": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f818b9013a9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1015",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1015",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "74",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f818b9013a9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "1015",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }],
        "trace": [
          {
          "pc": "1015",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"candidates\"][0]) and push value (0)",
          "npc": "1016",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1016",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "contexts": "4",
          "pc": "1015"
        },
        {
          "code": "Push 1",
          "explain": "push constant 1",
          "npc": "1017",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1016"
        },
        {
          "code": "2-ary +",
          "explain": "pop 2 values (1, 0); add the integers; push result (1)",
          "npc": "1018",
          "pop": "2",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "1017"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f81885053d9": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f81885053d9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1018",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1018",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "169",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f81885053d9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "1018",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "candidates" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" }],
        "trace": [
          {
          "pc": "1018",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (1) and address (?e[\"candidates\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1019",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1019",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1018"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1020",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1019"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1021",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1020"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1022",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1021"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1023",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1022"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1024",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1023"
        },
        {
          "code": "Push \"voted\"",
          "explain": "push constant \"voted\"",
          "npc": "1025",
          "push": [ { "type": "atom", "value": "voted" } ],
          "pc": "1024"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted\"])",
          "npc": "1026",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] } ],
          "pc": "1025"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1027",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1026"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f8188602269": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f8188602269",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1027",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1027",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "192",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f8188602269",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "1027",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted" } ] }, { "type": "bool", "value": "True" }],
        "trace": [
          {
          "pc": "1027",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"citizens\"][2][\"voted\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1028",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1028",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1027"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1029",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1028"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1030",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1029"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1031",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1030"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1032",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1031"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1033",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1032"
        },
        {
          "code": "Push \"voted_for\"",
          "explain": "push constant \"voted_for\"",
          "npc": "1034",
          "push": [ { "type": "atom", "value": "voted_for" } ],
          "pc": "1033"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted_for\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted_for\"])",
          "npc": "1035",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] } ],
          "pc": "1034"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1036",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1035"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f8188709aa9": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f8188709aa9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1036",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "0" }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1036",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "337",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f8188709aa9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "1036",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }, { "type": "int", "value": "0" }],
        "trace": [
          {
          "pc": "1036",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store",
          "explain": "pop value (0) and address (?e[\"citizens\"][2][\"voted_for\"]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "1037",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1037",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ ],
          "contexts": "4",
          "pc": "1036"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "1038",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "1037"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (True) and store locally in variable \"result\"",
          "npc": "1039",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "True" } },
          "pop": "1",
          "push": [ ],
          "pc": "1038"
        },
        {
          "code": "DelVar result",
          "explain": "delete method variable result",
          "npc": "1040",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } },
          "push": [ ],
          "pc": "1039"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "1041",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1040"
        },
        {
          "code": "StoreVar result",
          "explain": "pop value (False) and store locally in variable \"result\"",
          "npc": "1042",
          "local": { "candidate": { "type": "int", "value": "0" }, "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "1",
          "push": [ ],
          "pc": "1041"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1043",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1042"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1044",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1043"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1045",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1044"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1046",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1045"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1047",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1046"
        },
        {
          "code": "DelVar citizen",
          "explain": "delete method variable citizen",
          "npc": "1048",
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1047"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "1049",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1048"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16802" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1049"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f81885086c9": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f81885086c9",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "376",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f81885086c9",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "16802" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidate" }, "value": { "type": "int", "value": "0" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1050",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1050",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "candidate": { "type": "int", "value": "0" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1051",
          "pop": "1",
          "push": [ ],
          "pc": "1050"
        },
        {
          "code": "Push PC(714)",
          "explain": "push program counter constant 714 (\"release\")",
          "npc": "1052",
          "push": [ { "type": "pc", "value": "714" } ],
          "pc": "1051"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1053",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1052"
        },
        {
          "code": "DelVar election",
          "explain": "delete method variable election",
          "npc": "1054",
          "local": { "candidate": { "type": "int", "value": "0" }, "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1053"
        },
        {
          "code": "Push \"locks_can\"",
          "explain": "push constant \"locks_can\"",
          "npc": "1055",
          "push": [ { "type": "atom", "value": "locks_can" } ],
          "pc": "1054"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_can\") and an address (?e) and push the combined address (?e[\"locks_can\"])",
          "npc": "1056",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" } ] } ],
          "pc": "1055"
        },
        {
          "code": "LoadVar candidate",
          "explain": "push value (0) of variable \"candidate\"",
          "npc": "1057",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "1056"
        },
        {
          "code": "DelVar candidate",
          "explain": "delete method variable candidate",
          "npc": "1058",
          "local": { "result": { "type": "bool", "value": "False" } },
          "push": [ ],
          "pc": "1057"
        },
        {
          "code": "Address",
          "explain": "pop a key (0) and an address (?e[\"locks_can\"]) and push the combined address (?e[\"locks_can\"][0])",
          "npc": "1059",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1058"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_can\"][0]) and a program counter value (714: \"release\") and call the method",
          "npc": "714",
          "fp": "5",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "714",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "16962" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "1059"
        },
        {
          "code": "Frame release(binsema)",
          "explain": "method \"release\" with argument binsema set to ?e[\"locks_can\"][0]",
          "npc": "715",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] } ],
          "pc": "714"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f818ba0df69": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f818ba0df69",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "715",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "715",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "569",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f818ba0df69",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "715",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21506" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "16962" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "result" }, "value": { "type": "bool", "value": "False" } } ] }],
        "trace": [
          {
          "pc": "715",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "716",
          "fp": "5",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            },
            {
            "pc": "716",
            "xpc": "714",
            "method": "release(?e[\"locks_can\"][0])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "715"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "717",
          "readonly": "1",
          "push": [ ],
          "pc": "716"
        },
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "npc": "718",
          "atomic": "2",
          "push": [ ],
          "pc": "717"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "719",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "718"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_can\"][0]) and push value (True)",
          "npc": "720",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "719"
        },
        {
          "code": "Assert",
          "explain": "pop a value (True); do not raise exception",
          "npc": "721",
          "pop": "1",
          "push": [ ],
          "pc": "720"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 2 to 1: remains atomic",
          "npc": "722",
          "atomic": "1",
          "push": [ ],
          "pc": "721"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "723",
          "readonly": "0",
          "push": [ ],
          "pc": "722"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_can\"][0]) of variable \"binsema\"",
          "npc": "724",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_can" }, { "type": "int", "value": "0" } ] } ],
          "pc": "723"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "725",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "724"
        },
        {
          "code": "Push False",
          "explain": "push constant False",
          "npc": "726",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "725"
        },
        {
          "code": "Store",
          "explain": "pop value (False) and address (?e[\"locks_can\"][0]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "727",
          "pop": "2",
          "push": [ ],
          "pc": "726"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "728",
          "atomic": "0",
          "push": [ ],
          "pc": "727"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1060",
          "fp": "3",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1060",
            "xpc": "980",
            "method": "vote(?e, 0, 2)",
            "calltype": "normal",
            "vars": { "result": { "type": "bool", "value": "False" } },
            "sp": 2
            }
          ],
          "local": { "result": { "type": "bool", "value": "False" } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "728"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1061",
          "pop": "1",
          "push": [ ],
          "pc": "1060"
        },
        {
          "code": "Return",
          "explain": "push result (False) and restore method variables",
          "npc": "1344",
          "fp": "1",
          "trace": [
            {
            "pc": "1344",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            }
          ],
          "local": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "1061"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (False)",
          "npc": "1345",
          "pop": "1",
          "push": [ ],
          "pc": "1344"
        },
        {
          "code": "Push PC(1063)",
          "explain": "push program counter constant 1063 (\"withdraw\")",
          "npc": "1346",
          "push": [ { "type": "pc", "value": "1063" } ],
          "pc": "1345"
        },
        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "npc": "1347",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1346"
        },
        {
          "code": "LoadVar e",
          "explain": "push value (?e) of variable \"e\"",
          "npc": "1348",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1347"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (?e, []); insert first value into the second; push result ([?e])",
          "npc": "1349",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ] } ],
          "pc": "1348"
        },
        {
          "code": "LoadVar citizen_idx",
          "explain": "push value (2) of variable \"citizen_idx\"",
          "npc": "1350",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1349"
        },
        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [?e]); insert first value into the second; push result ([?e, 2])",
          "npc": "1351",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "2" } ] } ],
          "pc": "1350"
        },
        {
          "code": "Apply",
          "explain": "pop an argument ([?e, 2]) and a program counter value (1063: \"withdraw\") and call the method",
          "npc": "1063",
          "fp": "3",
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1063",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 2
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "21634" }, { "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "2" } ] } ],
          "pc": "1351"
        },
        {
          "code": "Frame withdraw(election, citizen)",
          "explain": "method \"withdraw\" with argument (election, citizen) set to [?e, 2]",
          "npc": "1064",
          "local": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] } ],
          "pc": "1063"
        },
        {
          "code": "Push PC(695)",
          "explain": "push program counter constant 695 (\"acquire\")",
          "npc": "1065",
          "push": [ { "type": "pc", "value": "695" } ],
          "pc": "1064"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1066",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1065"
        },
        {
          "code": "Push \"locks_cit\"",
          "explain": "push constant \"locks_cit\"",
          "npc": "1067",
          "push": [ { "type": "atom", "value": "locks_cit" } ],
          "pc": "1066"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"locks_cit\") and an address (?e) and push the combined address (?e[\"locks_cit\"])",
          "npc": "1068",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" } ] } ],
          "pc": "1067"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1069",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1068"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"locks_cit\"]) and push the combined address (?e[\"locks_cit\"][2])",
          "npc": "1070",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1069"
        },
        {
          "code": "Apply",
          "explain": "pop an argument (?e[\"locks_cit\"][2]) and a program counter value (695: \"acquire\") and call the method",
          "npc": "695",
          "fp": "5",
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1071",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            },
            {
            "pc": "695",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "pop": "2",
          "push": [ { "type": "int", "value": "17138" }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1070"
        },
        {
          "code": "Frame acquire(binsema)",
          "explain": "method \"acquire\" with argument binsema set to ?e[\"locks_cit\"][2]",
          "npc": "696",
          "local": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "1",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] } ],
          "pc": "695"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f818b908469": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f818b908469",
          "fp": "5",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "696",
          "sp": "5",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1071",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            },
            {
            "pc": "696",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "740",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f818b908469",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "696",
        "sp": "5",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21634" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "17138" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "election" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } } ] }],
        "trace": [
          {
          "pc": "696",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 0 to 1: becomes atomic",
          "npc": "697",
          "fp": "5",
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1071",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            },
            {
            "pc": "697",
            "xpc": "695",
            "method": "acquire(?e[\"locks_cit\"][2])",
            "calltype": "normal",
            "vars": { "binsema": { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 4
            }
          ],
          "atomic": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "696"
        },
        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "npc": "698",
          "readonly": "1",
          "push": [ ],
          "pc": "697"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "699",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "698"
        },
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"locks_cit\"][2]) and push value (False)",
          "npc": "700",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "699"
        },
        {
          "code": "1-ary not",
          "explain": "pop a value (False); logical not; push result (True)",
          "npc": "701",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "700"
        },
        {
          "code": "JumpCond False 703",
          "explain": "pop value (True), compare to False, and jump to 703 if the same",
          "npc": "702",
          "pop": "1",
          "push": [ ],
          "pc": "701"
        },
        {
          "code": "Jump 706",
          "explain": "set program counter to 706",
          "npc": "706",
          "push": [ ],
          "pc": "702"
        },
        {
          "code": "ReadonlyDec",
          "explain": "decrement readonly counter from 1 to 0: no longer readonly",
          "npc": "707",
          "readonly": "0",
          "push": [ ],
          "pc": "706"
        },
        {
          "code": "LoadVar binsema",
          "explain": "push value (?e[\"locks_cit\"][2]) of variable \"binsema\"",
          "npc": "708",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "locks_cit" }, { "type": "int", "value": "2" } ] } ],
          "pc": "707"
        },
        {
          "code": "DelVar binsema",
          "explain": "delete method variable binsema",
          "npc": "709",
          "local": { "result": { "type": "address", "value": [] } },
          "push": [ ],
          "pc": "708"
        },
        {
          "code": "Push True",
          "explain": "push constant True",
          "npc": "710",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "709"
        },
        {
          "code": "Store",
          "explain": "pop value (True) and address (?e[\"locks_cit\"][2]) and store",
          "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
          "npc": "711",
          "pop": "2",
          "push": [ ],
          "pc": "710"
        },
        {
          "code": "AtomicDec",
          "explain": "decrement atomic counter from 1 to 0: no longer atomic",
          "npc": "712",
          "atomic": "0",
          "push": [ ],
          "pc": "711"
        },
        {
          "code": "Return",
          "explain": "push result (None) and restore method variables",
          "npc": "1071",
          "fp": "3",
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1071",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "local": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "pop": "2",
          "push": [ { "type": "address", "value": [] } ],
          "pc": "712"
        },
        {
          "code": "Pop",
          "explain": "pop and discard value (None)",
          "npc": "1072",
          "pop": "1",
          "push": [ ],
          "pc": "1071"
        },
        {
          "code": "LoadVar election",
          "explain": "push value (?e) of variable \"election\"",
          "npc": "1073",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } ],
          "pc": "1072"
        },
        {
          "code": "Push \"citizens\"",
          "explain": "push constant \"citizens\"",
          "npc": "1074",
          "push": [ { "type": "atom", "value": "citizens" } ],
          "pc": "1073"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"citizens\") and an address (?e) and push the combined address (?e[\"citizens\"])",
          "npc": "1075",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" } ] } ],
          "pc": "1074"
        },
        {
          "code": "LoadVar citizen",
          "explain": "push value (2) of variable \"citizen\"",
          "npc": "1076",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "1075"
        },
        {
          "code": "Address",
          "explain": "pop a key (2) and an address (?e[\"citizens\"]) and push the combined address (?e[\"citizens\"][2])",
          "npc": "1077",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" } ] } ],
          "pc": "1076"
        },
        {
          "code": "Push \"voted_for\"",
          "explain": "push constant \"voted_for\"",
          "npc": "1078",
          "push": [ { "type": "atom", "value": "voted_for" } ],
          "pc": "1077"
        },
        {
          "code": "Address",
          "explain": "pop a key (\"voted_for\") and an address (?e[\"citizens\"][2]) and push the combined address (?e[\"citizens\"][2][\"voted_for\"])",
          "npc": "1079",
          "pop": "2",
          "push": [ { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] } ],
          "pc": "1078"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1",
          "7f818bc00139": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f818bc00139",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1079",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }],
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1079",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "741",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f818bc00139",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "1079",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21634" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "address", "value": [{ "type": "atom", "value": "e" }, { "type": "atom", "value": "citizens" }, { "type": "int", "value": "2" }, { "type": "atom", "value": "voted_for" } ] }],
        "trace": [
          {
          "pc": "1079",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Load",
          "explain": "pop address of variable (?e[\"citizens\"][2][\"voted_for\"]) and push value (0)",
          "npc": "1080",
          "fp": "3",
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1080",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "pop": "1",
          "push": [ { "type": "int", "value": "0" } ],
          "contexts": "4",
          "pc": "1079"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f8188611c59": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f8188611c59",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1080",
          "sp": "4",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "0" }],
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1080",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    },
    {
      "id": "1012",
      "len": "1",
      "shared": { "EXPECTED_VOTES": { "type": "list", "value": [{ "type": "int", "value": "3" }, { "type": "int", "value": "0" } ] }, "NUM_CANDIDATES": { "type": "int", "value": "2" }, "NUM_CITIZENS": { "type": "int", "value": "3" }, "WINNER": { "type": "int", "value": "0" }, "e": { "type": "dict", "value": [{ "key": { "type": "atom", "value": "candidates" }, "value": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } }, { "key": { "type": "atom", "value": "citizens" }, "value": { "type": "list", "value": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "False" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "-1" } } ] }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "voted" }, "value": { "type": "bool", "value": "True" } }, { "key": { "type": "atom", "value": "voted_for" }, "value": { "type": "int", "value": "0" } } ] } ] } }, { "key": { "type": "atom", "value": "locks_can" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] } }, { "key": { "type": "atom", "value": "locks_cit" }, "value": { "type": "list", "value": [{ "type": "bool", "value": "False" }, { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] } } ] }, "number_of_spawned_threads": { "type": "int", "value": "4" }, "threads_executed": { "type": "int", "value": "0" } },
      "tid": "4",
      "name": "test_withdraw(?e, 0, 1, 2)",
      "context": {
        "tid": "4",
        "hvalue": "7f8188611c59",
        "fp": "1",
        "name": "test_withdraw(?e, 0, 1, 2)",
        "entry": "1333",
        "pc": "1080",
        "sp": "4",
        "stack": [{ "type": "dict", "value": [] }, { "type": "int", "value": "21634" }, { "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }, { "type": "int", "value": "0" }],
        "trace": [
          {
          "pc": "1080",
          "xpc": "1333",
          "method": "test_withdraw(?e, 0, 1, 2)",
          "calltype": "process",
          "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
          "sp": 0
          }
        ],
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Store election$candidate",
          "explain": "pop value (0) and store into variable election$candidate",
          "npc": "1080",
          "fp": "3",
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1080",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "failure": "Store: declare a local variable ?election$candidate (or set during initialization)",
          "mode": "failed",
          "pop": "1",
          "push": [ ],
          "contexts": "4",
          "pc": "1080"
        }
      ],
      "invfails": [
      ],
      "ctxbag": {
          "7f818b927fc9": "1",
          "7f818bb00869": "1",
          "7f818bb008f9": "2",
          "7f818bb009c9": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7f818bb009f9",
          "fp": "1",
          "name": "__init__()",
          "entry": "0",
          "pc": "1488",
          "sp": "0",
          "stack": [],
          "trace": [
            {
            "pc": "1488",
            "xpc": "0",
            "method": "__init__()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "atomic": "1",
          "mode": "terminated"
        },
        {
          "tid": "1",
          "hvalue": "7f818bb00869",
          "fp": "1",
          "name": "test_vote(?e, 0, 0)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 0, 0)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "2",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "3",
          "hvalue": "7f818bb008f9",
          "fp": "1",
          "name": "test_vote(?e, 1, 1)",
          "entry": "1313",
          "pc": "1313",
          "sp": "1",
          "stack": [{ "type": "list", "value": [{ "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, { "type": "int", "value": "1" }, { "type": "int", "value": "1" } ] }],
          "trace": [
            {
            "pc": "1313",
            "xpc": "1313",
            "method": "test_vote(?e, 1, 1)",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        },
        {
          "tid": "4",
          "hvalue": "7f818b927fc9",
          "fp": "3",
          "name": "test_withdraw(?e, 0, 1, 2)",
          "entry": "1333",
          "pc": "1080",
          "sp": "3",
          "stack": [{ "type": "dict", "value": [{ "key": { "type": "atom", "value": "citizen_idx" }, "value": { "type": "int", "value": "2" } }, { "key": { "type": "atom", "value": "e" }, "value": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] } }, { "key": { "type": "atom", "value": "result" }, "value": { "type": "address", "value": [] } }, { "key": { "type": "atom", "value": "second_candidate" }, "value": { "type": "int", "value": "1" } } ] }],
          "trace": [
            {
            "pc": "1352",
            "xpc": "1333",
            "method": "test_withdraw(?e, 0, 1, 2)",
            "calltype": "process",
            "vars": { "citizen_idx": { "type": "int", "value": "2" }, "e": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] }, "second_candidate": { "type": "int", "value": "1" } },
            "sp": 0
            },
            {
            "pc": "1080",
            "xpc": "1063",
            "method": "withdraw(?e, 2)",
            "calltype": "normal",
            "vars": { "citizen": { "type": "int", "value": "2" }, "election": { "type": "address", "value": [{ "type": "atom", "value": "e" } ] }, "result": { "type": "address", "value": [] } },
            "sp": 2
            }
          ],
          "failure": "Store: declare a local variable ?election$candidate (or set during initialization)",
          "this": { "type": "dict", "value": [] },
          "mode": "failed"
        },
        {
          "tid": "5",
          "hvalue": "7f818bb009c9",
          "fp": "1",
          "name": "end_test()",
          "entry": "1372",
          "pc": "1372",
          "sp": "1",
          "stack": [{ "type": "list", "value": [] }],
          "trace": [
            {
            "pc": "1372",
            "xpc": "1372",
            "method": "end_test()",
            "calltype": "process",
            "vars": { },
            "sp": 0
            }
          ],
          "mode": "runnable"
        }
      ]
    }
  ],
  "code": [
    "Frame __init__()",
    "Jump 52",
    "Frame subseq(s, b, e)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu3",
    "LoadVar b",
    "DelVar b",
    "LoadVar e",
    "DelVar e",
    "Push 1",
    "2-ary -",
    "2-ary ..",
    "Push 0",
    "Cut(x)",
    "JumpCond False 25",
    "LoadVar $accu3",
    "DelVar $accu3",
    "LoadVar s",
    "LoadVar x",
    "DelVar x",
    "Apply",
    "2-ary ListAdd",
    "StoreVar $accu3",
    "Jump 14",
    "DelVar s",
    "DelVar x",
    "LoadVar $accu3",
    "DelVar $accu3",
    "StoreVar result",
    "Return",
    "Jump 52",
    "Frame append(s, e)",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push ()",
    "LoadVar e",
    "DelVar e",
    "2-ary ListAdd",
    "2-ary +",
    "StoreVar result",
    "Return",
    "Jump 52",
    "Frame head(s)",
    "DelVar result",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Apply",
    "StoreVar result",
    "Return",
    "Push PC(55)",
    "Builtin(list$tail)",
    "Jump 371",
    "Frame tail(s)",
    "DelVar result",
    "Push PC(2)",
    "Push ()",
    "LoadVar s",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "LoadVar s",
    "DelVar s",
    "1-ary len",
    "2-ary ListAdd",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sum(a)",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 87",
    "LoadVar result",
    "DelVar result",
    "LoadVar v",
    "DelVar v",
    "2-ary +",
    "StoreVar result",
    "Jump 78",
    "DelVar v",
    "Return",
    "Jump 371",
    "Frame set(a)",
    "DelVar result",
    "Push {}",
    "StoreVar $accu71",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 106",
    "LoadVar $accu71",
    "DelVar $accu71",
    "LoadVar v",
    "DelVar v",
    "2-ary SetAdd",
    "StoreVar $accu71",
    "Jump 97",
    "DelVar v",
    "LoadVar $accu71",
    "DelVar $accu71",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame list(a)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu87",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 128",
    "LoadVar $accu87",
    "DelVar $accu87",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu87",
    "Jump 119",
    "DelVar v",
    "LoadVar $accu87",
    "DelVar $accu87",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame values(d)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu103",
    "LoadVar d",
    "DelVar d",
    "Push 0",
    "Cut(_, v)",
    "DelVar _",
    "JumpCond False 151",
    "LoadVar $accu103",
    "DelVar $accu103",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu103",
    "Jump 141",
    "DelVar v",
    "LoadVar $accu103",
    "DelVar $accu103",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame items(d)",
    "DelVar result",
    "Push ()",
    "StoreVar $accu119",
    "LoadVar d",
    "DelVar d",
    "Push 0",
    "Cut(k, v)",
    "JumpCond False 178",
    "LoadVar $accu119",
    "DelVar $accu119",
    "Push ()",
    "LoadVar k",
    "DelVar k",
    "2-ary ListAdd",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "2-ary ListAdd",
    "StoreVar $accu119",
    "Jump 164",
    "DelVar k",
    "DelVar v",
    "LoadVar $accu119",
    "DelVar $accu119",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame qsort(a)",
    "DelVar result",
    "LoadVar a",
    "Push ()",
    "2-ary ==",
    "JumpCond False 195",
    "DelVar a",
    "Push ()",
    "StoreVar result",
    "Jump 265",
    "Push ()",
    "Push PC(44)",
    "LoadVar a",
    "Apply",
    "2-ary ListAdd",
    "Push PC(55)",
    "LoadVar a",
    "DelVar a",
    "Apply",
    "2-ary ListAdd",
    "StoreVar (pivot, rest)",
    "Push ()",
    "StoreVar $accu156",
    "LoadVar rest",
    "Push 0",
    "DelVar v",
    "Cut(v)",
    "JumpCond False 224",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary <",
    "JumpCond False 210",
    "LoadVar $accu156",
    "DelVar $accu156",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu156",
    "Jump 210",
    "DelVar v",
    "LoadVar $accu156",
    "DelVar $accu156",
    "StoreVar lower",
    "Push ()",
    "StoreVar $accu173",
    "LoadVar rest",
    "DelVar rest",
    "Push 0",
    "DelVar v",
    "Cut(v)",
    "JumpCond False 247",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary >=",
    "JumpCond False 233",
    "LoadVar $accu173",
    "DelVar $accu173",
    "LoadVar v",
    "DelVar v",
    "2-ary ListAdd",
    "StoreVar $accu173",
    "Jump 233",
    "DelVar v",
    "LoadVar $accu173",
    "DelVar $accu173",
    "StoreVar higher",
    "Push PC(185)",
    "LoadVar lower",
    "DelVar lower",
    "Apply",
    "Push ()",
    "LoadVar pivot",
    "DelVar pivot",
    "2-ary ListAdd",
    "Push PC(185)",
    "LoadVar higher",
    "DelVar higher",
    "Apply",
    "3-ary +",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame sorted(d)",
    "DelVar result",
    "Push PC(185)",
    "Push PC(112)",
    "LoadVar d",
    "DelVar d",
    "Apply",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame reversed(d)",
    "DelVar result",
    "LoadVar d",
    "1-ary len",
    "StoreVar n",
    "Push ()",
    "StoreVar $accu216",
    "Push 1",
    "LoadVar n",
    "2-ary ..",
    "Push 0",
    "Cut(i)",
    "JumpCond False 302",
    "LoadVar $accu216",
    "DelVar $accu216",
    "LoadVar d",
    "LoadVar n",
    "LoadVar i",
    "DelVar i",
    "2-ary -",
    "Apply",
    "2-ary ListAdd",
    "StoreVar $accu216",
    "Jump 289",
    "DelVar d",
    "DelVar i",
    "DelVar n",
    "LoadVar $accu216",
    "DelVar $accu216",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame empty()",
    "DelVar result",
    "Push {:}",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame fromSet(s)",
    "DelVar result",
    "Push {:}",
    "StoreVar $accu243",
    "LoadVar s",
    "DelVar s",
    "Push 0",
    "Cut(elt)",
    "JumpCond False 333",
    "LoadVar $accu243",
    "DelVar $accu243",
    "LoadVar elt",
    "DelVar elt",
    "Push 1",
    "3-ary DictAdd",
    "StoreVar $accu243",
    "Jump 323",
    "DelVar elt",
    "LoadVar $accu243",
    "DelVar $accu243",
    "StoreVar result",
    "Return",
    "Jump 371",
    "Frame fromList(a)",
    "DelVar result",
    "Push {:}",
    "StoreVar result",
    "LoadVar a",
    "DelVar a",
    "Push 0",
    "Cut(v)",
    "JumpCond False 369",
    "LoadVar v",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 362",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 346",
    "Push ?result",
    "LoadVar v",
    "DelVar v",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Jump 346",
    "DelVar v",
    "Return",
    "Push PC(374)",
    "Builtin(bag$multiplicity)",
    "Jump 392",
    "Frame multiplicity(bg, elt)",
    "DelVar result",
    "LoadVar elt",
    "LoadVar bg",
    "2-ary in",
    "JumpCond False 387",
    "LoadVar bg",
    "DelVar bg",
    "LoadVar elt",
    "DelVar elt",
    "Apply",
    "StoreVar result",
    "Jump 391",
    "DelVar bg",
    "DelVar elt",
    "Push 0",
    "StoreVar result",
    "Return",
    "Push PC(395)",
    "Builtin(bag$size)",
    "Jump 414",
    "Frame size(bg)",
    "DelVar result",
    "Push 0",
    "StoreVar result",
    "LoadVar bg",
    "DelVar bg",
    "Push 0",
    "Cut(_, c)",
    "DelVar _",
    "JumpCond False 412",
    "LoadVar result",
    "DelVar result",
    "LoadVar c",
    "DelVar c",
    "2-ary +",
    "StoreVar result",
    "Jump 402",
    "DelVar c",
    "Return",
    "Push PC(417)",
    "Builtin(bag$bmin)",
    "Jump 433",
    "Frame bmin(bg)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar bg",
    "Push {:}",
    "2-ary !=",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary min",
    "StoreVar result",
    "Return",
    "Push PC(436)",
    "Builtin(bag$bmax)",
    "Jump 461",
    "Frame bmax(bg)",
    "DelVar result",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar bg",
    "Push {:}",
    "2-ary !=",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "1-ary max",
    "StoreVar result",
    "Return",
    "Jump 461",
    "Frame bchoose(bg)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "1-ary keys",
    "Choose",
    "StoreVar result",
    "Return",
    "Push PC(464)",
    "Builtin(bag$add)",
    "Jump 490",
    "Frame add(bg, elt)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 483",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary +",
    "StoreVar [result]",
    "Jump 489",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "Push 1",
    "StoreVar [result]",
    "Return",
    "Push PC(493)",
    "Builtin(bag$remove)",
    "Jump 1283",
    "Frame remove(bg, elt)",
    "DelVar result",
    "LoadVar bg",
    "DelVar bg",
    "StoreVar result",
    "LoadVar elt",
    "LoadVar result",
    "2-ary in",
    "JumpCond False 510",
    "Push ?result",
    "LoadVar elt",
    "Address",
    "Dup",
    "LoadVar [result]",
    "Push 1",
    "2-ary -",
    "StoreVar [result]",
    "LoadVar result",
    "LoadVar elt",
    "Apply",
    "Push 0",
    "2-ary <=",
    "JumpCond False 521",
    "Push ?result",
    "LoadVar elt",
    "DelVar elt",
    "Address",
    "DelVar [result]",
    "DelVar elt",
    "Return",
    "Jump 1283",
    "Frame combinations(bg, k)",
    "DelVar result",
    "LoadVar k",
    "Push 0",
    "2-ary ==",
    "JumpCond False 535",
    "DelVar bg",
    "DelVar k",
    "Push { {:} }",
    "StoreVar result",
    "Jump 616",
    "Push PC(395)",
    "LoadVar bg",
    "Apply",
    "StoreVar n",
    "LoadVar k",
    "LoadVar n",
    "2-ary >",
    "JumpCond False 549",
    "DelVar bg",
    "DelVar k",
    "DelVar n",
    "Push {}",
    "StoreVar result",
    "Jump 616",
    "LoadVar k",
    "LoadVar n",
    "DelVar n",
    "2-ary ==",
    "JumpCond False 561",
    "DelVar k",
    "Push {}",
    "LoadVar bg",
    "DelVar bg",
    "2-ary SetAdd",
    "StoreVar result",
    "Jump 616",
    "Push PC(417)",
    "LoadVar bg",
    "Apply",
    "StoreVar hd",
    "Push PC(493)",
    "Push ()",
    "LoadVar bg",
    "DelVar bg",
    "2-ary ListAdd",
    "LoadVar hd",
    "2-ary ListAdd",
    "Apply",
    "StoreVar tl",
    "Push {}",
    "StoreVar $accu454",
    "Push PC(524)",
    "Push ()",
    "LoadVar tl",
    "2-ary ListAdd",
    "LoadVar k",
    "Push 1",
    "2-ary -",
    "2-ary ListAdd",
    "Apply",
    "Push 0",
    "Cut(x)",
    "JumpCond False 601",
    "LoadVar $accu454",
    "DelVar $accu454",
    "Push PC(464)",
    "Push ()",
    "LoadVar x",
    "DelVar x",
    "2-ary ListAdd",
    "LoadVar hd",
    "2-ary ListAdd",
    "Apply",
    "2-ary SetAdd",
    "StoreVar $accu454",
    "Jump 586",
    "DelVar hd",
    "DelVar x",
    "LoadVar $accu454",
    "DelVar $accu454",
    "Push PC(524)",
    "Push ()",
    "LoadVar tl",
    "DelVar tl",
    "2-ary ListAdd",
    "LoadVar k",
    "DelVar k",
    "2-ary ListAdd",
    "Apply",
    "2-ary |",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame atomic_load(p)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "DelVar p",
    "Load",
    "StoreVar result",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame atomic_store(p, v)",
    "AtomicInc(lazy)",
    "LoadVar p",
    "DelVar p",
    "LoadVar v",
    "DelVar v",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame tas(lk)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar lk",
    "Load",
    "StoreVar result",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame cas(p, old, new)",
    "DelVar result",
    "AtomicInc(lazy)",
    "LoadVar p",
    "Load",
    "LoadVar old",
    "DelVar old",
    "2-ary ==",
    "StoreVar result",
    "LoadVar result",
    "JumpCond False 667",
    "LoadVar p",
    "DelVar p",
    "LoadVar new",
    "DelVar new",
    "Store",
    "DelVar new",
    "DelVar p",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame BinSema(acquired)",
    "DelVar result",
    "LoadVar acquired",
    "DelVar acquired",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame Lock()",
    "DelVar result",
    "Push PC(672)",
    "Push False",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame acquired(binsema)",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame acquire(binsema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar binsema",
    "Load",
    "1-ary not",
    "JumpCond False 703",
    "Jump 706",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 696",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame release(binsema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar binsema",
    "Load",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar binsema",
    "DelVar binsema",
    "Push False",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame held(binsema)",
    "DelVar result",
    "LoadVar binsema",
    "DelVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame Condition()",
    "DelVar result",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame wait(c, lk)",
    "Push 0",
    "StoreVar cnt",
    "DelVar cnt",
    "Push ()",
    "Save",
    "Continue",
    "StoreVar ((), ctx)",
    "AtomicInc(lazy)",
    "Push PC(374)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "StoreVar cnt",
    "LoadVar c",
    "Push PC(464)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "LoadVar lk",
    "Push False",
    "Store",
    "AtomicDec",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar lk",
    "Load",
    "1-ary not",
    "JumpCond False 795",
    "Push PC(374)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "LoadVar ctx",
    "2-ary ListAdd",
    "Apply",
    "LoadVar cnt",
    "2-ary <=",
    "Jump 796",
    "Push False",
    "JumpCond False 801",
    "DelVar c",
    "DelVar cnt",
    "DelVar ctx",
    "Jump 804",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 778",
    "ReadonlyDec",
    "LoadVar lk",
    "DelVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame notify(c)",
    "AtomicInc(lazy)",
    "LoadVar c",
    "Load",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "2-ary !=",
    "JumpCond False 835",
    "LoadVar c",
    "Push PC(493)",
    "Push ()",
    "LoadVar c",
    "Load",
    "2-ary ListAdd",
    "Push PC(453)",
    "LoadVar c",
    "DelVar c",
    "Load",
    "Apply",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "DelVar c",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame notifyAll(c)",
    "AtomicInc(lazy)",
    "LoadVar c",
    "DelVar c",
    "Push PC(310)",
    "Push ()",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame Semaphore(cnt)",
    "DelVar result",
    "LoadVar cnt",
    "DelVar cnt",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame P(sema)",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar sema",
    "Load",
    "Push 0",
    "2-ary >",
    "JumpCond False 866",
    "Jump 869",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 858",
    "ReadonlyDec",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame V(sema)",
    "AtomicInc(lazy)",
    "LoadVar sema",
    "DelVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame Queue()",
    "DelVar result",
    "Push ()",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame get(q)",
    "DelVar result",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "LoadVar q",
    "Load",
    "Push ()",
    "2-ary !=",
    "JumpCond False 908",
    "Jump 911",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 899",
    "ReadonlyDec",
    "Push PC(44)",
    "LoadVar q",
    "Load",
    "Apply",
    "StoreVar result",
    "LoadVar q",
    "Push PC(55)",
    "LoadVar q",
    "DelVar q",
    "Load",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame put(q, item)",
    "AtomicInc(lazy)",
    "LoadVar q",
    "Push PC(32)",
    "Push ()",
    "LoadVar q",
    "DelVar q",
    "Load",
    "2-ary ListAdd",
    "LoadVar item",
    "DelVar item",
    "2-ary ListAdd",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 1283",
    "Frame Election(n, m)",
    "DelVar result",
    "Push {:}",
    "Push \"locks_can\"",
    "Push ()",
    "Push PC(679)",
    "Push ()",
    "Apply",
    "2-ary ListAdd",
    "LoadVar n",
    "2-ary *",
    "3-ary DictAdd",
    "Push \"locks_cit\"",
    "Push ()",
    "Push PC(679)",
    "Push ()",
    "Apply",
    "2-ary ListAdd",
    "LoadVar m",
    "2-ary *",
    "3-ary DictAdd",
    "Push \"candidates\"",
    "Push [0,]",
    "LoadVar n",
    "DelVar n",
    "2-ary *",
    "3-ary DictAdd",
    "Push \"citizens\"",
    "Push [{ \"voted\":False, \"voted_for\":-1 },]",
    "LoadVar m",
    "DelVar m",
    "2-ary *",
    "3-ary DictAdd",
    "StoreVar result",
    "Return",
    "Jump 1283",
    "Frame vote(election, candidate, citizen)",
    "DelVar result",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Apply",
    "Pop",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted\"",
    "Address",
    "Load",
    "Push False",
    "2-ary ==",
    "JumpCond False 1039",
    "LoadVar election",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted\"",
    "Address",
    "Push True",
    "Store",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted_for\"",
    "Address",
    "LoadVar candidate",
    "Store",
    "Push True",
    "StoreVar result",
    "DelVar result",
    "Push False",
    "StoreVar result",
    "Push PC(714)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "DelVar citizen",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "LoadVar election",
    "DelVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "DelVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1283",
    "Frame withdraw(election, citizen)",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Apply",
    "Pop",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted_for\"",
    "Address",
    "Load",
    "Store election$candidate",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "Load election$candidate",
    "Address",
    "Apply",
    "Pop",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted\"",
    "Address",
    "Load",
    "Push True",
    "2-ary ==",
    "JumpCond False 1133",
    "LoadVar election",
    "Push \"candidates\"",
    "Address",
    "Load election$candidate",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted\"",
    "Address",
    "Push False",
    "Store",
    "LoadVar election",
    "Push \"citizens\"",
    "Address",
    "LoadVar citizen",
    "Address",
    "Push \"voted_for\"",
    "Address",
    "Push -1",
    "Store",
    "Push ?election$return",
    "Push True",
    "Address",
    "Load",
    "Pop",
    "Push ?election$return",
    "Push False",
    "Address",
    "Load",
    "Pop",
    "Push PC(714)",
    "LoadVar election",
    "Push \"locks_cit\"",
    "Address",
    "LoadVar citizen",
    "DelVar citizen",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "LoadVar election",
    "DelVar election",
    "Push \"locks_can\"",
    "Address",
    "Load election$candidate",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1283",
    "Frame get_votes(election, candidate)",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Push ?election$return",
    "Load election$elections",
    "Address",
    "Load",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate",
    "Address",
    "Load",
    "Pop",
    "Push PC(714)",
    "LoadVar election",
    "DelVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate",
    "DelVar candidate",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1283",
    "Frame transfer(election, candidate_from, candidate_to)",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate_from",
    "Address",
    "Apply",
    "Pop",
    "Push PC(695)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate_to",
    "Address",
    "Apply",
    "Pop",
    "Load election$elections",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate_to",
    "Address",
    "Dup",
    "Load",
    "Load election$elections",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate_from",
    "Address",
    "Load",
    "2-ary +",
    "Store",
    "Load election$elections",
    "Push \"candidates\"",
    "Address",
    "LoadVar candidate_from",
    "Address",
    "Push 0",
    "Store",
    "Push PC(714)",
    "LoadVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate_from",
    "DelVar candidate_from",
    "Address",
    "Apply",
    "Pop",
    "Push PC(714)",
    "LoadVar election",
    "DelVar election",
    "Push \"locks_can\"",
    "Address",
    "LoadVar candidate_to",
    "DelVar candidate_to",
    "Address",
    "Apply",
    "Pop",
    "Return",
    "Jump 1283",
    "Frame winner(election)",
    "DelVar election",
    "Push -1",
    "Store election$high",
    "Push -1",
    "Store election$idx",
    "Load election$candidates",
    "Push 0",
    "Cut(i)",
    "JumpCond False 1276",
    "Push ?election$candidates",
    "LoadVar i",
    "Address",
    "Load",
    "Load election$high",
    "2-ary >",
    "JumpCond False 1274",
    "Push ?election$candidates",
    "LoadVar i",
    "Address",
    "Load",
    "Store election$high",
    "LoadVar i",
    "DelVar i",
    "Store election$idx",
    "DelVar i",
    "Jump 1257",
    "DelVar i",
    "Push ?election$return",
    "Load election$idx",
    "Address",
    "Load",
    "Pop",
    "Return",
    "Push 0",
    "Store threads_executed",
    "Push 4",
    "Store number_of_spawned_threads",
    "Push 2",
    "Store NUM_CANDIDATES",
    "Push 3",
    "Store NUM_CITIZENS",
    "Push [3, 0]",
    "Store EXPECTED_VOTES",
    "Push 0",
    "Store WINNER",
    "Push PC(944)",
    "Push ()",
    "Load NUM_CANDIDATES",
    "2-ary ListAdd",
    "Load NUM_CITIZENS",
    "2-ary ListAdd",
    "Apply",
    "Store e",
    "Jump 1442",
    "Frame complete()",
    "AtomicInc(lazy)",
    "Load threads_executed",
    "Push 1",
    "2-ary +",
    "Store threads_executed",
    "AtomicDec",
    "Return",
    "Jump 1442",
    "Frame test_vote(e, candidate_idx, citizen_idx)",
    "Push PC(980)",
    "Push ()",
    "LoadVar e",
    "DelVar e",
    "2-ary ListAdd",
    "LoadVar candidate_idx",
    "DelVar candidate_idx",
    "2-ary ListAdd",
    "LoadVar citizen_idx",
    "DelVar citizen_idx",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push PC(1304)",
    "Push ()",
    "Apply",
    "Pop",
    "Return",
    "Jump 1442",
    "Frame test_withdraw(e, first_candidate, second_candidate, citizen_idx)",
    "Push PC(980)",
    "Push ()",
    "LoadVar e",
    "2-ary ListAdd",
    "LoadVar first_candidate",
    "DelVar first_candidate",
    "2-ary ListAdd",
    "LoadVar citizen_idx",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push PC(1063)",
    "Push ()",
    "LoadVar e",
    "2-ary ListAdd",
    "LoadVar citizen_idx",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push PC(980)",
    "Push ()",
    "LoadVar e",
    "DelVar e",
    "2-ary ListAdd",
    "LoadVar second_candidate",
    "DelVar second_candidate",
    "2-ary ListAdd",
    "LoadVar citizen_idx",
    "DelVar citizen_idx",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push PC(1304)",
    "Push ()",
    "Apply",
    "Pop",
    "Return",
    "Jump 1442",
    "Frame end_test()",
    "AtomicInc(lazy)",
    "ReadonlyInc",
    "Load threads_executed",
    "Load number_of_spawned_threads",
    "2-ary ==",
    "JumpCond False 1380",
    "Jump 1383",
    "ReadonlyDec",
    "AtomicDec",
    "Jump 1373",
    "ReadonlyDec",
    "Push PC(1189)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push 0",
    "2-ary ListAdd",
    "Apply",
    "Pop",
    "Push {}",
    "Push 0",
    "2-ary SetAdd",
    "Load NUM_CANDIDATES",
    "Push 1",
    "2-ary -",
    "2-ary SetAdd",
    "Push 0",
    "Cut(i)",
    "JumpCond False 1426",
    "Push PC(1158)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "LoadVar i",
    "2-ary ListAdd",
    "Apply",
    "StoreVar received_votes",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "Push ?EXPECTED_VOTES",
    "LoadVar i",
    "DelVar i",
    "Address",
    "Load",
    "LoadVar received_votes",
    "DelVar received_votes",
    "2-ary ==",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "Jump 1402",
    "DelVar i",
    "Push PC(1249)",
    "Push ?e",
    "Apply",
    "StoreVar winner_idx",
    "ReadonlyInc",
    "AtomicInc(lazy)",
    "LoadVar winner_idx",
    "DelVar winner_idx",
    "Load WINNER",
    "2-ary ==",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "AtomicDec",
    "Return",
    "Push PC(1313)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 0",
    "2-ary ListAdd",
    "Push 0",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Push PC(1313)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Push PC(1313)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Push PC(1333)",
    "Push ()",
    "Push ?e",
    "2-ary ListAdd",
    "Push 0",
    "2-ary ListAdd",
    "Push 1",
    "2-ary ListAdd",
    "Push 2",
    "2-ary ListAdd",
    "Push {:}",
    "Spawn",
    "Push PC(1372)",
    "Push ()",
    "Push {:}",
    "Spawn",
    "Return",
    "DelVar result"
  ],
  "explain": [
    "start of method __init__",
    "jump over method definition: set program counter to 52",
    "start of method subseq",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu3",
    "push the value of b",
    "delete method variable b",
    "push the value of e",
    "delete method variable e",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ..",
    "push constant 0",
    "get next element and assign to x; push False or True depending on success",
    "check if loop is done: pop a value and jump to 25 if the value is False",
    "load accumulator: push the value of $accu3",
    "delete method variable $accu3",
    "push the value of s",
    "push the value of x",
    "delete method variable x",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu3",
    "set program counter to 14",
    "delete method variable s",
    "delete method variable x",
    "load final accumulator result: push the value of $accu3",
    "delete method variable $accu3",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 52",
    "start of method append",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "building a tuple: push constant ()",
    "push the value of e",
    "delete method variable e",
    "pop 2 values and push the result of applying ListAdd",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 52",
    "start of method head",
    "delete method variable result",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(55)",
    "top of stack is a built-in operation called list$tail",
    "jump over method definition: set program counter to 371",
    "start of method tail",
    "delete method variable result",
    "push constant PC(2)",
    "building a tuple: push constant ()",
    "push the value of s",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of s",
    "delete method variable s",
    "pop 1 value and push the result of applying len",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method sum",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 87 if the value is False",
    "push the value of result",
    "delete method variable result",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 78",
    "delete method variable v",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method set",
    "delete method variable result",
    "initialize accumulator for set comprehension: push constant {}",
    "initialize accumulator for set comprehension: pop a value and store in $accu71",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 106 if the value is False",
    "load accumulator: push the value of $accu71",
    "delete method variable $accu71",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying SetAdd",
    "update accumulator: pop a value and store in $accu71",
    "set program counter to 97",
    "delete method variable v",
    "load final accumulator result: push the value of $accu71",
    "delete method variable $accu71",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method list",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu87",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 128 if the value is False",
    "load accumulator: push the value of $accu87",
    "delete method variable $accu87",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu87",
    "set program counter to 119",
    "delete method variable v",
    "load final accumulator result: push the value of $accu87",
    "delete method variable $accu87",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method values",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu103",
    "push the value of d",
    "delete method variable d",
    "push constant 0",
    "get next element and assign to _:v; push False or True depending on success",
    "delete method variable _",
    "check if loop is done: pop a value and jump to 151 if the value is False",
    "load accumulator: push the value of $accu103",
    "delete method variable $accu103",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu103",
    "set program counter to 141",
    "delete method variable v",
    "load final accumulator result: push the value of $accu103",
    "delete method variable $accu103",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method items",
    "delete method variable result",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu119",
    "push the value of d",
    "delete method variable d",
    "push constant 0",
    "get next element and assign to k:v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 178 if the value is False",
    "load accumulator: push the value of $accu119",
    "delete method variable $accu119",
    "building a tuple: push constant ()",
    "push the value of k",
    "delete method variable k",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu119",
    "set program counter to 164",
    "delete method variable k",
    "delete method variable v",
    "load final accumulator result: push the value of $accu119",
    "delete method variable $accu119",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method qsort",
    "delete method variable result",
    "push the value of a",
    "push constant ()",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 195 if the value is False",
    "delete method variable a",
    "push constant ()",
    "pop a value and store in result",
    "set program counter to 265",
    "building a tuple: push constant ()",
    "push constant PC(44)",
    "push the value of a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(55)",
    "push the value of a",
    "delete method variable a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a value and store in (pivot, rest)",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu156",
    "push the value of rest",
    "push constant 0",
    "delete method variable v",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 224 if the value is False",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 210 if the value is False",
    "load accumulator: push the value of $accu156",
    "delete method variable $accu156",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu156",
    "set program counter to 210",
    "delete method variable v",
    "load final accumulator result: push the value of $accu156",
    "delete method variable $accu156",
    "pop a value and store in lower",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu173",
    "push the value of rest",
    "delete method variable rest",
    "push constant 0",
    "delete method variable v",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 247 if the value is False",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying >=",
    "pop a value and jump to 233 if the value is False",
    "load accumulator: push the value of $accu173",
    "delete method variable $accu173",
    "push the value of v",
    "delete method variable v",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu173",
    "set program counter to 233",
    "delete method variable v",
    "load final accumulator result: push the value of $accu173",
    "delete method variable $accu173",
    "pop a value and store in higher",
    "push constant PC(185)",
    "push the value of lower",
    "delete method variable lower",
    "pop a pc or dictionary f and an index i and push f(i)",
    "building a tuple: push constant ()",
    "push the value of pivot",
    "delete method variable pivot",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(185)",
    "push the value of higher",
    "delete method variable higher",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method sorted",
    "delete method variable result",
    "push constant PC(185)",
    "push constant PC(112)",
    "push the value of d",
    "delete method variable d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method reversed",
    "delete method variable result",
    "push the value of d",
    "pop 1 value and push the result of applying len",
    "pop a value and store in n",
    "initialize accumulator for list comprehension: push constant ()",
    "initialize accumulator for list comprehension: pop a value and store in $accu216",
    "push constant 1",
    "push the value of n",
    "pop 2 values and push the result of applying ..",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 302 if the value is False",
    "load accumulator: push the value of $accu216",
    "delete method variable $accu216",
    "push the value of d",
    "push the value of n",
    "push the value of i",
    "delete method variable i",
    "pop 2 values and push the result of applying -",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "update accumulator: pop a value and store in $accu216",
    "set program counter to 289",
    "delete method variable d",
    "delete method variable i",
    "delete method variable n",
    "load final accumulator result: push the value of $accu216",
    "delete method variable $accu216",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method empty",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method fromSet",
    "delete method variable result",
    "initialize accumulator for dict comprehension: push constant {:}",
    "initialize accumulator for dict comprehension: pop a value and store in $accu243",
    "push the value of s",
    "delete method variable s",
    "push constant 0",
    "get next element and assign to elt; push False or True depending on success",
    "check if loop is done: pop a value and jump to 333 if the value is False",
    "load accumulator: push the value of $accu243",
    "delete method variable $accu243",
    "push the value of elt",
    "delete method variable elt",
    "push constant 1",
    "pop 3 values and push the result of applying DictAdd",
    "update accumulator: pop a value and store in $accu243",
    "set program counter to 323",
    "delete method variable elt",
    "load final accumulator result: push the value of $accu243",
    "delete method variable $accu243",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 371",
    "start of method fromList",
    "delete method variable result",
    "push constant {:}",
    "pop a value and store in result",
    "push the value of a",
    "delete method variable a",
    "push constant 0",
    "get next element and assign to v; push False or True depending on success",
    "check if loop is done: pop a value and jump to 369 if the value is False",
    "push the value of v",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 362 if the value is False",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 346",
    "push constant ?result",
    "push the value of v",
    "delete method variable v",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 346",
    "delete method variable v",
    "restore caller method state and push result",
    "push constant PC(374)",
    "top of stack is a built-in operation called bag$multiplicity",
    "jump over method definition: set program counter to 392",
    "start of method multiplicity",
    "delete method variable result",
    "push the value of elt",
    "push the value of bg",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 387 if the value is False",
    "push the value of bg",
    "delete method variable bg",
    "push the value of elt",
    "delete method variable elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "set program counter to 391",
    "delete method variable bg",
    "delete method variable elt",
    "push constant 0",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(395)",
    "top of stack is a built-in operation called bag$size",
    "jump over method definition: set program counter to 414",
    "start of method size",
    "delete method variable result",
    "push constant 0",
    "pop a value and store in result",
    "push the value of bg",
    "delete method variable bg",
    "push constant 0",
    "get next element and assign to _:c; push False or True depending on success",
    "delete method variable _",
    "check if loop is done: pop a value and jump to 412 if the value is False",
    "push the value of result",
    "delete method variable result",
    "push the value of c",
    "delete method variable c",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 402",
    "delete method variable c",
    "restore caller method state and push result",
    "push constant PC(417)",
    "top of stack is a built-in operation called bag$bmin",
    "jump over method definition: set program counter to 433",
    "start of method bmin",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bg",
    "push constant {:}",
    "pop 2 values and push the result of applying !=",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying min",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(436)",
    "top of stack is a built-in operation called bag$bmax",
    "jump over method definition: set program counter to 461",
    "start of method bmax",
    "delete method variable result",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of bg",
    "push constant {:}",
    "pop 2 values and push the result of applying !=",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop 1 value and push the result of applying max",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 461",
    "start of method bchoose",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop 1 value and push the result of applying keys",
    "pop a set value and push one of its elements",
    "pop a value and store in result",
    "restore caller method state and push result",
    "push constant PC(464)",
    "top of stack is a built-in operation called bag$add",
    "jump over method definition: set program counter to 490",
    "start of method add",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 483 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 489",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "restore caller method state and push result",
    "push constant PC(493)",
    "top of stack is a built-in operation called bag$remove",
    "jump over method definition: set program counter to 1283",
    "start of method remove",
    "delete method variable result",
    "push the value of bg",
    "delete method variable bg",
    "pop a value and store in result",
    "push the value of elt",
    "push the value of result",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 510 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and the address of a method variable and store the value at that address",
    "push the value of result",
    "push the value of elt",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying <=",
    "pop a value and jump to 521 if the value is False",
    "push constant ?result",
    "push the value of elt",
    "delete method variable elt",
    "combine the top two values on the stack into an address and push the result",
    "pop an address of a method variable and delete that variable",
    "delete method variable elt",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method combinations",
    "delete method variable result",
    "push the value of k",
    "push constant 0",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 535 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "push constant { {:} }",
    "pop a value and store in result",
    "set program counter to 616",
    "push constant PC(395)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in n",
    "push the value of k",
    "push the value of n",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 549 if the value is False",
    "delete method variable bg",
    "delete method variable k",
    "delete method variable n",
    "push constant {}",
    "pop a value and store in result",
    "set program counter to 616",
    "push the value of k",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 561 if the value is False",
    "delete method variable k",
    "push constant {}",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying SetAdd",
    "pop a value and store in result",
    "set program counter to 616",
    "push constant PC(417)",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in hd",
    "push constant PC(493)",
    "building a tuple: push constant ()",
    "push the value of bg",
    "delete method variable bg",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of hd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in tl",
    "initialize accumulator for set comprehension: push constant {}",
    "initialize accumulator for set comprehension: pop a value and store in $accu454",
    "push constant PC(524)",
    "building a tuple: push constant ()",
    "push the value of tl",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of k",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "get next element and assign to x; push False or True depending on success",
    "check if loop is done: pop a value and jump to 601 if the value is False",
    "load accumulator: push the value of $accu454",
    "delete method variable $accu454",
    "push constant PC(464)",
    "building a tuple: push constant ()",
    "push the value of x",
    "delete method variable x",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of hd",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying SetAdd",
    "update accumulator: pop a value and store in $accu454",
    "set program counter to 586",
    "delete method variable hd",
    "delete method variable x",
    "load final accumulator result: push the value of $accu454",
    "delete method variable $accu454",
    "push constant PC(524)",
    "building a tuple: push constant ()",
    "push the value of tl",
    "delete method variable tl",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of k",
    "delete method variable k",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying |",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method atomic_load",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "delete method variable p",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method atomic_store",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "delete method variable p",
    "push the value of v",
    "delete method variable v",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method tas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method cas",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of p",
    "pop an address and push the value at the address",
    "push the value of old",
    "delete method variable old",
    "pop 2 values and push the result of applying ==",
    "pop a value and store in result",
    "push the value of result",
    "pop a value and jump to 667 if the value is False",
    "push the value of p",
    "delete method variable p",
    "push the value of new",
    "delete method variable new",
    "pop a value and an address and store the value at the address",
    "delete method variable new",
    "delete method variable p",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method BinSema",
    "delete method variable result",
    "push the value of acquired",
    "delete method variable acquired",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method Lock",
    "delete method variable result",
    "push constant PC(672)",
    "push constant False",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method acquired",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method acquire",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 703 if the value is False",
    "set program counter to 706",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 696",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method release",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of binsema",
    "delete method variable binsema",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method held",
    "delete method variable result",
    "push the value of binsema",
    "delete method variable binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method Condition",
    "delete method variable result",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method wait",
    "push constant 0",
    "pop a value and store in cnt",
    "delete method variable cnt",
    "push constant ()",
    "pop a value and save context",
    "a no-op, must follow a Stop operation",
    "pop a value and store in ((), ctx)",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant PC(374)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in cnt",
    "push the value of c",
    "push constant PC(464)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "push the value of lk",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 795 if the value is False",
    "push constant PC(374)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of ctx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of cnt",
    "pop 2 values and push the result of applying <=",
    "set program counter to 796",
    "push constant False",
    "pop a value and jump to 801 if the value is False",
    "delete method variable c",
    "delete method variable cnt",
    "delete method variable ctx",
    "set program counter to 804",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 778",
    "decrement readonly counter of context",
    "push the value of lk",
    "delete method variable lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method notify",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 835 if the value is False",
    "push the value of c",
    "push constant PC(493)",
    "building a tuple: push constant ()",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push constant PC(453)",
    "push the value of c",
    "delete method variable c",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "delete method variable c",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method notifyAll",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of c",
    "delete method variable c",
    "push constant PC(310)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method Semaphore",
    "delete method variable result",
    "push the value of cnt",
    "delete method variable cnt",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method P",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of sema",
    "pop an address and push the value at the address",
    "push constant 0",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 866 if the value is False",
    "set program counter to 869",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 858",
    "decrement readonly counter of context",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method V",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of sema",
    "delete method variable sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method Queue",
    "delete method variable result",
    "push constant ()",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method get",
    "delete method variable result",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push the value of q",
    "pop an address and push the value at the address",
    "push constant ()",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 908 if the value is False",
    "set program counter to 911",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 899",
    "decrement readonly counter of context",
    "push constant PC(44)",
    "push the value of q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "push the value of q",
    "push constant PC(55)",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method put",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of q",
    "push constant PC(32)",
    "building a tuple: push constant ()",
    "push the value of q",
    "delete method variable q",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of item",
    "delete method variable item",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method Election",
    "delete method variable result",
    "push constant {:}",
    "push constant \"locks_can\"",
    "building a tuple: push constant ()",
    "push constant PC(679)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of n",
    "pop 2 values and push the result of applying *",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"locks_cit\"",
    "building a tuple: push constant ()",
    "push constant PC(679)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of m",
    "pop 2 values and push the result of applying *",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"candidates\"",
    "push constant [0,]",
    "push the value of n",
    "delete method variable n",
    "pop 2 values and push the result of applying *",
    "pop 3 values and push the result of applying DictAdd",
    "push constant \"citizens\"",
    "push constant [{ \"voted\":False, \"voted_for\":-1 },]",
    "push the value of m",
    "delete method variable m",
    "pop 2 values and push the result of applying *",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and store in result",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method vote",
    "delete method variable result",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push constant False",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1039 if the value is False",
    "push the value of election",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted_for\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "pop a value and an address and store the value at the address",
    "push constant True",
    "pop a value and store in result",
    "delete method variable result",
    "push constant False",
    "pop a value and store in result",
    "push constant PC(714)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "delete method variable citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of election",
    "delete method variable election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "delete method variable candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method withdraw",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted_for\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store it in shared variable candidate",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push value of shared variable candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted\"",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push constant True",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1133 if the value is False",
    "push the value of election",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push value of shared variable candidate",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "push the value of election",
    "push constant \"citizens\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "combine the top two values on the stack into an address and push the result",
    "push constant \"voted_for\"",
    "combine the top two values on the stack into an address and push the result",
    "push constant -1",
    "pop a value and an address and store the value at the address",
    "push constant ?election$return",
    "push constant True",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "discard the top value on the stack",
    "push constant ?election$return",
    "push constant False",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of election",
    "push constant \"locks_cit\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of citizen",
    "delete method variable citizen",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of election",
    "delete method variable election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push value of shared variable candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method get_votes",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant ?election$return",
    "push value of shared variable elections",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of election",
    "delete method variable election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate",
    "delete method variable candidate",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method transfer",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_from",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(695)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_to",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push value of shared variable elections",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_to",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push value of shared variable elections",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_from",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "push value of shared variable elections",
    "push constant \"candidates\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_from",
    "combine the top two values on the stack into an address and push the result",
    "push constant 0",
    "pop a value and an address and store the value at the address",
    "push constant PC(714)",
    "push the value of election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_from",
    "delete method variable candidate_from",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(714)",
    "push the value of election",
    "delete method variable election",
    "push constant \"locks_can\"",
    "combine the top two values on the stack into an address and push the result",
    "push the value of candidate_to",
    "delete method variable candidate_to",
    "combine the top two values on the stack into an address and push the result",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1283",
    "start of method winner",
    "delete method variable election",
    "push constant -1",
    "pop a value and store it in shared variable high",
    "push constant -1",
    "pop a value and store it in shared variable idx",
    "push value of shared variable candidates",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 1276 if the value is False",
    "push constant ?election$candidates",
    "push the value of i",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push value of shared variable high",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 1274 if the value is False",
    "push constant ?election$candidates",
    "push the value of i",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "pop a value and store it in shared variable high",
    "push the value of i",
    "delete method variable i",
    "pop a value and store it in shared variable idx",
    "delete method variable i",
    "set program counter to 1257",
    "delete method variable i",
    "push constant ?election$return",
    "push value of shared variable idx",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "push constant 0",
    "pop a value and store it in shared variable threads_executed",
    "push constant 4",
    "pop a value and store it in shared variable number_of_spawned_threads",
    "push constant 2",
    "pop a value and store it in shared variable NUM_CANDIDATES",
    "push constant 3",
    "pop a value and store it in shared variable NUM_CITIZENS",
    "push constant [3, 0]",
    "pop a value and store it in shared variable EXPECTED_VOTES",
    "push constant 0",
    "pop a value and store it in shared variable WINNER",
    "push constant PC(944)",
    "building a tuple: push constant ()",
    "push value of shared variable NUM_CANDIDATES",
    "pop 2 values and push the result of applying ListAdd",
    "push value of shared variable NUM_CITIZENS",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable e",
    "jump over method definition: set program counter to 1442",
    "start of method complete",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push value of shared variable threads_executed",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and store it in shared variable threads_executed",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1442",
    "start of method test_vote",
    "push constant PC(980)",
    "building a tuple: push constant ()",
    "push the value of e",
    "delete method variable e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of candidate_idx",
    "delete method variable candidate_idx",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of citizen_idx",
    "delete method variable citizen_idx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1304)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1442",
    "start of method test_withdraw",
    "push constant PC(980)",
    "building a tuple: push constant ()",
    "push the value of e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of first_candidate",
    "delete method variable first_candidate",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of citizen_idx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1063)",
    "building a tuple: push constant ()",
    "push the value of e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of citizen_idx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(980)",
    "building a tuple: push constant ()",
    "push the value of e",
    "delete method variable e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of second_candidate",
    "delete method variable second_candidate",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of citizen_idx",
    "delete method variable citizen_idx",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant PC(1304)",
    "push constant ()",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "jump over method definition: set program counter to 1442",
    "start of method end_test",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "push value of shared variable threads_executed",
    "push value of shared variable number_of_spawned_threads",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 1380 if the value is False",
    "set program counter to 1383",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "set program counter to 1373",
    "decrement readonly counter of context",
    "push constant PC(1189)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 0",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant {}",
    "push constant 0",
    "pop 2 values and push the result of applying SetAdd",
    "push value of shared variable NUM_CANDIDATES",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying SetAdd",
    "push constant 0",
    "get next element and assign to i; push False or True depending on success",
    "check if loop is done: pop a value and jump to 1426 if the value is False",
    "push constant PC(1158)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push the value of i",
    "pop 2 values and push the result of applying ListAdd",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in received_votes",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push constant ?EXPECTED_VOTES",
    "push the value of i",
    "delete method variable i",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and push the value at the address",
    "push the value of received_votes",
    "delete method variable received_votes",
    "pop 2 values and push the result of applying ==",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "set program counter to 1402",
    "delete method variable i",
    "push constant PC(1249)",
    "push constant ?e",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in winner_idx",
    "increment readonly counter of context; thread cannot mutate shared variables if > 0",
    "increment atomic counter of context; thread runs uninterrupted if larger than 0",
    "push the value of winner_idx",
    "delete method variable winner_idx",
    "push value of shared variable WINNER",
    "pop 2 values and push the result of applying ==",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "push constant PC(1313)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 0",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 0",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "push constant PC(1313)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "push constant PC(1313)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "push constant PC(1333)",
    "building a tuple: push constant ()",
    "push constant ?e",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 0",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 1",
    "pop 2 values and push the result of applying ListAdd",
    "push constant 2",
    "pop 2 values and push the result of applying ListAdd",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "push constant PC(1372)",
    "push constant ()",
    "push constant {:}",
    "pop thread-local state, argument, and pc and spawn a new thread",
    "restore caller method state and push result",
    "delete method variable result"
  ],
  "locations": {
    "1444": { "file": "electiontest.hny", "line": "39", "column": "18", "endline": "39", "endcolumn": "18", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "398": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "12", "stmt": [24,5,24,14], "code": "    result = 0" },
    "1114": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "35", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "813": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "16", "stmt": [56,16,58,6], "code": "    atomically if !c != bag.empty():" },
    "115": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1321": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "209": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "193": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "9", "endline": "40", "endcolumn": "16", "stmt": [40,9,40,19], "code": "        result = []" },
    "1410": { "file": "electiontest.hny", "line": "33", "column": "34", "endline": "33", "endcolumn": "58", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "895": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "12", "stmt": [73,5,73,15], "code": "    result = []" },
    "72": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "14", "endline": "17", "endcolumn": "14", "stmt": [17,5,17,14], "code": "    result = 0" },
    "1032": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "35", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "829": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "42", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "143": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1453": { "file": "electiontest.hny", "line": "40", "column": "17", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "307": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "9", "endline": "54", "endcolumn": "16", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "263": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "60", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1389": { "file": "electiontest.hny", "line": "31", "column": "27", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "845": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "21", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "590": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1401": { "file": "electiontest.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "11", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "43": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "3", "stmt": [8,1,8,12], "code": "def head(s):" },
    "1159": { "file": "electionimpl.hny", "line": "56", "column": "5", "endline": "56", "endcolumn": "11", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1148": { "file": "electionimpl.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "22", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1487": { "file": "electiontest.hny", "line": "44", "column": "1", "endline": "44", "endcolumn": "16", "stmt": [44,1,44,16], "code": "spawn end_test()" },
    "879": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "3", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "835": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "36", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "50": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "12", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "993": { "file": "electionimpl.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "33", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "540": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "20", "endline": "63", "endcolumn": "20", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "665": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "18", "endline": "19", "endcolumn": "20", "stmt": [19,13,19,20], "code": "            !p = new" },
    "259": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "48", "endline": "45", "endcolumn": "52", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "705": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "32", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "1136": { "file": "electionimpl.hny", "line": "48", "column": "5", "endline": "48", "endcolumn": "16", "stmt": [48,5,48,16], "code": "    return False" },
    "889": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "943": { "file": "electionimpl.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "stmt": [4,1,4,19], "code": "def Election(n, m):" },
    "530": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "188": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "13", "endline": "39", "endcolumn": "14", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "1462": { "file": "electiontest.hny", "line": "41", "column": "7", "endline": "41", "endcolumn": "15", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "942": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "17", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "454": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "357": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1373": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "16", "stmt": [29,16,38,6], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "755": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "19", "endline": "49", "endcolumn": "34", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "650": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "3", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "1336": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "19", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "1303": { "file": "electiontest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "3", "stmt": [14,1,14,15], "code": "def complete():" },
    "932": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "34", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "354": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "20", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "338": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "1471": { "file": "electiontest.hny", "line": "41", "column": "1", "endline": "41", "endcolumn": "25", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1310": { "file": "electiontest.hny", "line": "15", "column": "5", "endline": "15", "endcolumn": "15", "stmt": [15,5,15,15], "code": "    atomically:" },
    "933": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "34", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "600": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "74", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1125": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "45", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "878": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "12", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "418": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "348": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "12", "endline": "10", "endcolumn": "12", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "304": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "992": { "file": "electionimpl.hny", "line": "17", "column": "25", "endline": "17", "endcolumn": "33", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "1362": { "file": "electiontest.hny", "line": "25", "column": "40", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "888": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "23", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "404": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1158": { "file": "electionimpl.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "35", "stmt": [54,1,54,35], "code": "def get_votes(election, candidate):" },
    "1261": { "file": "electionimpl.hny", "line": "80", "column": "12", "endline": "80", "endcolumn": "24", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "1235": { "file": "electionimpl.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "51", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "62": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "419": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "1124": { "file": "electionimpl.hny", "line": "46", "column": "36", "endline": "46", "endcolumn": "45", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "914": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "28", "endline": "77", "endcolumn": "29", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "828": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "42", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "42": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "17", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "754": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "48", "column": "9", "endline": "48", "endcolumn": "18", "stmt": [48,9,48,19], "code": "        atomically:" },
    "1372": { "file": "electiontest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "15", "stmt": [28,1,28,15], "code": "def end_test():" },
    "403": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1420": { "file": "electiontest.hny", "line": "34", "column": "45", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1031": { "file": "electionimpl.hny", "line": "23", "column": "28", "endline": "23", "endcolumn": "34", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "128": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "114": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1472": { "file": "electiontest.hny", "line": "42", "column": "7", "endline": "42", "endcolumn": "19", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1311": { "file": "electiontest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "15", "stmt": [14,1,14,15], "code": "def complete():" },
    "453": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "16", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "1201": { "file": "electionimpl.hny", "line": "67", "column": "15", "endline": "67", "endcolumn": "33", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "566": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "178": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1320": { "file": "electiontest.hny", "line": "19", "column": "22", "endline": "19", "endcolumn": "34", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "931": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1023": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "35", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "591": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "564": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "17", "endline": "68", "endcolumn": "24", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "704": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "915": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "18", "endline": "77", "endcolumn": "30", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "1213": { "file": "electionimpl.hny", "line": "69", "column": "44", "endline": "69", "endcolumn": "52", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "768": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "27", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "707": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "10", "endline": "32", "endcolumn": "16", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "208": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "34", "endline": "43", "endcolumn": "37", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1337": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "1223": { "file": "electionimpl.hny", "line": "70", "column": "5", "endline": "70", "endcolumn": "25", "stmt": [70,5,70,45], "code": "    elections->candidates[candidate_from] = 0" },
    "565": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "44", "endline": "68", "endcolumn": "49", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "531": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "1302": { "file": "electiontest.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "3", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "1454": { "file": "electiontest.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "18", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "757": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "37", "endline": "49", "endcolumn": "37", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1388": { "file": "electiontest.hny", "line": "31", "column": "31", "endline": "31", "endcolumn": "31", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1271": { "file": "electionimpl.hny", "line": "82", "column": "19", "endline": "82", "endcolumn": "19", "stmt": [82,13,82,19], "code": "            idx = i" },
    "258": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "43", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1013": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "39", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "541": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "16", "endline": "63", "endcolumn": "20", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "1402": { "file": "electiontest.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "11", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "452": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "3", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "1370": { "file": "electiontest.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "69", "stmt": [22,1,22,69], "code": "def test_withdraw(e, first_candidate, second_candidate, citizen_idx):" },
    "847": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "1470": { "file": "electiontest.hny", "line": "41", "column": "1", "endline": "41", "endcolumn": "25", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1137": { "file": "electionimpl.hny", "line": "48", "column": "5", "endline": "48", "endcolumn": "16", "stmt": [48,5,48,16], "code": "    return False" },
    "897": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "3", "stmt": [75,1,75,11], "code": "def get(q):" },
    "1220": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "42", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "509": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "22", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1174": { "file": "electionimpl.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "43", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "811": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "3", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "559": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "17", "endline": "66", "endcolumn": "24", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "2": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "20", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "1363": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "837": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "14", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "1461": { "file": "electiontest.hny", "line": "40", "column": "1", "endline": "40", "endcolumn": "25", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1003": { "file": "electionimpl.hny", "line": "20", "column": "35", "endline": "20", "endcolumn": "40", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "1455": { "file": "electiontest.hny", "line": "40", "column": "17", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "834": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "9", "endline": "57", "endcolumn": "12", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1203": { "file": "electionimpl.hny", "line": "67", "column": "15", "endline": "67", "endcolumn": "47", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "1234": { "file": "electionimpl.hny", "line": "73", "column": "15", "endline": "73", "endcolumn": "49", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "51": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "12", "stmt": [8,1,8,12], "code": "def head(s):" },
    "1273": { "file": "electionimpl.hny", "line": "82", "column": "13", "endline": "82", "endcolumn": "17", "stmt": [82,13,82,19], "code": "            idx = i" },
    "3": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1104": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "39", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "894": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "14", "endline": "73", "endcolumn": "15", "stmt": [73,5,73,15], "code": "    result = []" },
    "12": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1073": { "file": "electionimpl.hny", "line": "35", "column": "27", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "1211": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "80", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "1030": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "26", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "567": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "52", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1260": { "file": "electionimpl.hny", "line": "80", "column": "23", "endline": "80", "endcolumn": "23", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "844": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "30", "endline": "60", "endcolumn": "31", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "1210": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "39", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "830": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "41", "endline": "57", "endcolumn": "42", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "568": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "52", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1300": { "file": "electiontest.hny", "line": "12", "column": "23", "endline": "12", "endcolumn": "50", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "56": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "19", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1400": { "file": "electiontest.hny", "line": "32", "column": "19", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1360": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "896": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "12", "stmt": [72,1,72,12], "code": "def Queue():" },
    "840": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "16", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "890": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "12", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "1334": { "file": "electiontest.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "17", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "1270": { "file": "electionimpl.hny", "line": "81", "column": "13", "endline": "81", "endcolumn": "18", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "1411": { "file": "electiontest.hny", "line": "33", "column": "13", "endline": "33", "endcolumn": "32", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1313": { "file": "electiontest.hny", "line": "18", "column": "1", "endline": "18", "endcolumn": "45", "stmt": [18,1,18,45], "code": "def test_vote(e, candidate_idx, citizen_idx):" },
    "1421": { "file": "electiontest.hny", "line": "34", "column": "24", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1130": { "file": "electionimpl.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "19", "stmt": [47,9,47,19], "code": "        return True" },
    "1198": { "file": "electionimpl.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "11", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "1200": { "file": "electionimpl.hny", "line": "67", "column": "25", "endline": "67", "endcolumn": "33", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "1460": { "file": "electiontest.hny", "line": "40", "column": "1", "endline": "40", "endcolumn": "25", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1323": { "file": "electiontest.hny", "line": "19", "column": "37", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1237": { "file": "electionimpl.hny", "line": "74", "column": "5", "endline": "74", "endcolumn": "11", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "846": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "16", "endline": "60", "endcolumn": "19", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "812": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "55", "column": "1", "endline": "55", "endcolumn": "14", "stmt": [55,1,55,14], "code": "def notify(c):" },
    "1445": { "file": "electiontest.hny", "line": "39", "column": "17", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1164": { "file": "electionimpl.hny", "line": "56", "column": "15", "endline": "56", "endcolumn": "44", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "836": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "36", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "1343": { "file": "electiontest.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "50", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "709": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "20", "endline": "32", "endcolumn": "23", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "450": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "5", "endline": "36", "endcolumn": "12", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "997": { "file": "electionimpl.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "44", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "71": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1037": { "file": "electionimpl.hny", "line": "24", "column": "18", "endline": "24", "endcolumn": "21", "stmt": [24,9,24,21], "code": "        result = True" },
    "1422": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "22", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1119": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "16", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "361": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "23", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "9": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "34", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "533": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "9", "endline": "60", "endcolumn": "16", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "457": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "21", "endline": "39", "endcolumn": "28", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "1322": { "file": "electiontest.hny", "line": "19", "column": "37", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "400": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "16", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1350": { "file": "electiontest.hny", "line": "24", "column": "23", "endline": "24", "endcolumn": "36", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "937": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "37", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "407": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "19", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "1441": { "file": "electiontest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "15", "stmt": [28,1,28,15], "code": "def end_test():" },
    "1450": { "file": "electiontest.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "25", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "947": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "7", "endcolumn": "18", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "618": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "1250": { "file": "electionimpl.hny", "line": "77", "column": "12", "endline": "77", "endcolumn": "13", "stmt": [77,5,77,13], "code": "    high = -1" },
    "119": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1335": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "1221": { "file": "electionimpl.hny", "line": "70", "column": "5", "endline": "70", "endcolumn": "13", "stmt": [70,5,70,45], "code": "    elections->candidates[candidate_from] = 0" },
    "111": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "3", "stmt": [26,1,26,12], "code": "def list(a):" },
    "1108": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "44", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "1474": { "file": "electiontest.hny", "line": "42", "column": "22", "endline": "42", "endcolumn": "22", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "507": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "24", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1404": { "file": "electiontest.hny", "line": "33", "column": "34", "endline": "33", "endcolumn": "51", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1241": { "file": "electionimpl.hny", "line": "74", "column": "15", "endline": "74", "endcolumn": "33", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1178": { "file": "electionimpl.hny", "line": "62", "column": "15", "endline": "62", "endcolumn": "22", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1413": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1131": { "file": "electionimpl.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "19", "stmt": [47,9,47,19], "code": "        return True" },
    "543": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "1465": { "file": "electiontest.hny", "line": "41", "column": "17", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "759": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "936": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "37", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "593": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "36", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "756": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1451": { "file": "electiontest.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "25", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1312": { "file": "electiontest.hny", "line": "18", "column": "1", "endline": "18", "endcolumn": "3", "stmt": [18,1,18,45], "code": "def test_vote(e, candidate_idx, citizen_idx):" },
    "401": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "990": { "file": "electionimpl.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "11", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "946": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "41": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "5", "endline": "6", "endcolumn": "12", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "706": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "264": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "13", "endline": "45", "endcolumn": "20", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "532": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "60", "column": "20", "endline": "60", "endcolumn": "22", "stmt": [60,9,60,24], "code": "        result = { {:} }" },
    "996": { "file": "electionimpl.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "44", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "369": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "366": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "25", "endline": "13", "endcolumn": "25", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "8": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "34", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "604": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1475": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "542": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "13", "endline": "63", "endcolumn": "14", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "1199": { "file": "electionimpl.hny", "line": "67", "column": "15", "endline": "67", "endcolumn": "22", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "1129": { "file": "electionimpl.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "19", "stmt": [47,9,47,19], "code": "        return True" },
    "654": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "19", "endline": "17", "endcolumn": "19", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "451": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "1412": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "266": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "3", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "592": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "36", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "557": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "1423": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1236": { "file": "electionimpl.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "51", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "61": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "24", "endline": "13", "endcolumn": "24", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "606": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "13": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "558": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "607": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "49", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "656": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "24", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1036": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "47", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "508": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "657": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "24", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1405": { "file": "electiontest.hny", "line": "33", "column": "53", "endline": "33", "endcolumn": "57", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1240": { "file": "electionimpl.hny", "line": "74", "column": "25", "endline": "74", "endcolumn": "33", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "930": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "21", "endline": "81", "endcolumn": "31", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "267": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "14", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "1353": { "file": "electiontest.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "940": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "19", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1392": { "file": "electiontest.hny", "line": "31", "column": "9", "endline": "31", "endcolumn": "35", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1473": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "998": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "15", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "602": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1088": { "file": "electionimpl.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "46", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "402": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "7", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1179": { "file": "electionimpl.hny", "line": "62", "column": "15", "endline": "62", "endcolumn": "22", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1251": { "file": "electionimpl.hny", "line": "77", "column": "12", "endline": "77", "endcolumn": "13", "stmt": [77,5,77,13], "code": "    high = -1" },
    "265": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "13", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "384": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "24", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "229": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "991": { "file": "electionimpl.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "22", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "938": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "163": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1464": { "file": "electiontest.hny", "line": "41", "column": "18", "endline": "41", "endcolumn": "18", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1168": { "file": "electionimpl.hny", "line": "59", "column": "12", "endline": "59", "endcolumn": "20", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "363": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "20", "endline": "13", "endcolumn": "20", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "941": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "41", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "374": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "26", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1132": { "file": "electionimpl.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "19", "stmt": [47,9,47,19], "code": "        return True" },
    "948": { "file": "electionimpl.hny", "line": "7", "column": "21", "endline": "7", "endcolumn": "27", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1352": { "file": "electiontest.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "37", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "1149": { "file": "electionimpl.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "22", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "261": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "54", "endline": "45", "endcolumn": "59", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "959": { "file": "electionimpl.hny", "line": "8", "column": "25", "endline": "8", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "405": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "324": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "112": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "12", "stmt": [26,1,26,12], "code": "def list(a):" },
    "974": { "file": "electionimpl.hny", "line": "11", "column": "54", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "1239": { "file": "electionimpl.hny", "line": "74", "column": "15", "endline": "74", "endcolumn": "22", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "702": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "32", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "601": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "506": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "327": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1443": { "file": "electiontest.hny", "line": "39", "column": "17", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1452": { "file": "electiontest.hny", "line": "40", "column": "7", "endline": "40", "endcolumn": "15", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "909": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "455": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "52": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "11", "column": "9", "endline": "11", "endcolumn": "12", "stmt": [11,1,11,24], "code": "builtin tail \"list$tail\"" },
    "924": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "819": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "19", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "818": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "752": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "19", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "651": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "21", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "63": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "31", "endline": "13", "endcolumn": "31", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "619": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "16", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "360": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "24", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "73": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "14", "endline": "17", "endcolumn": "14", "stmt": [17,5,17,14], "code": "    result = 0" },
    "11": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "34", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1035": { "file": "electionimpl.hny", "line": "23", "column": "49", "endline": "23", "endcolumn": "57", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "556": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "377": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "16", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "40": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "21", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1109": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "42", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "701": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "158": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "53": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "11", "column": "1", "endline": "11", "endcolumn": "24", "stmt": [11,1,11,24], "code": "builtin tail \"list$tail\"" },
    "1403": { "file": "electiontest.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "11", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "387": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "228": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "262": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "48", "endline": "45", "endcolumn": "60", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "10": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "36", "endline": "3", "endcolumn": "36", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "925": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "11", "stmt": [75,1,75,11], "code": "def get(q):" },
    "1463": { "file": "electiontest.hny", "line": "41", "column": "17", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "278": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "16", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "703": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "555": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "110": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "11", "stmt": [22,1,22,11], "code": "def set(a):" },
    "653": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "14", "stmt": [16,5,16,15], "code": "    atomically:" },
    "1291": { "file": "electiontest.hny", "line": "9", "column": "19", "endline": "9", "endcolumn": "22", "stmt": [9,1,9,23], "code": "EXPECTED_VOTES = [3, 0]" },
    "288": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "751": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "19", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "505": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "24", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "70": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "3", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "984": { "file": "electionimpl.hny", "line": "16", "column": "25", "endline": "16", "endcolumn": "33", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "116": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "603": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "318": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1118": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "43", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "375": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "10", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "362": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "18", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "289": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1133": { "file": "electionimpl.hny", "line": "48", "column": "5", "endline": "48", "endcolumn": "10", "stmt": [48,5,48,16], "code": "    return False" },
    "406": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "798": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1393": { "file": "electiontest.hny", "line": "31", "column": "9", "endline": "31", "endcolumn": "35", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "279": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "17", "endline": "53", "endcolumn": "17", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "1414": { "file": "electiontest.hny", "line": "34", "column": "24", "endline": "34", "endcolumn": "37", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "753": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "5", "endline": "47", "endcolumn": "17", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "1439": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "695": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "21", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "1128": { "file": "electionimpl.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "14", "stmt": [47,9,47,19], "code": "        return True" },
    "1089": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "748": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "46", "column": "5", "endline": "46", "endcolumn": "15", "stmt": [46,5,46,15], "code": "    var cnt = 0" },
    "456": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "26", "endline": "39", "endcolumn": "27", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "325": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1442": { "file": "electiontest.hny", "line": "39", "column": "7", "endline": "39", "endcolumn": "15", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1169": { "file": "electionimpl.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "20", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "975": { "file": "electionimpl.hny", "line": "11", "column": "19", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "645": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "10", "endline": "13", "endcolumn": "11", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "1424": { "file": "electiontest.hny", "line": "34", "column": "17", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "750": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "60": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1342": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "385": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "9", "endline": "18", "endcolumn": "16", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "260": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "54", "endline": "45", "endcolumn": "59", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "652": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "14", "stmt": [16,5,16,15], "code": "    atomically:" },
    "108": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "985": { "file": "electionimpl.hny", "line": "16", "column": "15", "endline": "16", "endcolumn": "33", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "635": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "117": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "700": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "21", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "504": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "19", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "961": { "file": "electionimpl.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "27", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "681": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "20", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "343": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "554": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "66", "column": "28", "endline": "66", "endcolumn": "29", "stmt": [66,17,66,31], "code": "                result = { bg }" },
    "711": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "976": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "694": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "1238": { "file": "electionimpl.hny", "line": "74", "column": "15", "endline": "74", "endcolumn": "22", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "777": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "48", "column": "9", "endline": "48", "endcolumn": "19", "stmt": [48,9,48,19], "code": "        atomically:" },
    "762": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "19", "endline": "49", "endcolumn": "43", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "194": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "15", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "67": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "33", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "462": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "41", "column": "1", "endline": "41", "endcolumn": "21", "stmt": [41,1,41,21], "code": "builtin add \"bag$add\"" },
    "20": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "18", "endline": "3", "endcolumn": "18", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1138": { "file": "electionimpl.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "11", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1112": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "26", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "1277": { "file": "electionimpl.hny", "line": "83", "column": "5", "endline": "83", "endcolumn": "10", "stmt": [83,5,83,14], "code": "    return idx" },
    "1025": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "41", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "1346": { "file": "electiontest.hny", "line": "24", "column": "23", "endline": "24", "endcolumn": "36", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "738": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "16", "stmt": [42,1,42,16], "code": "def Condition():" },
    "547": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "17", "endline": "64", "endcolumn": "24", "stmt": [64,17,64,27], "code": "                result = {}" },
    "1379": { "file": "electiontest.hny", "line": "29", "column": "65", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "822": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "14", "endline": "57", "endcolumn": "23", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "814": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "20", "endline": "56", "endcolumn": "20", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "286": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "41", "endline": "54", "endcolumn": "41", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1229": { "file": "electionimpl.hny", "line": "73", "column": "15", "endline": "73", "endcolumn": "22", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "376": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "10", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "634": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "19", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "268": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "18", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1034": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "45", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "511": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "15", "endline": "54", "endcolumn": "17", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "109": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "12", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "227": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "9", "endline": "43", "endcolumn": "19", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "126": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1077": { "file": "electionimpl.hny", "line": "35", "column": "44", "endline": "35", "endcolumn": "53", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "226": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "579": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1429": { "file": "electiontest.hny", "line": "36", "column": "26", "endline": "36", "endcolumn": "44", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "1255": { "file": "electionimpl.hny", "line": "79", "column": "14", "endline": "79", "endcolumn": "23", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "1364": { "file": "electiontest.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "51", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "235": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1309": { "file": "electiontest.hny", "line": "16", "column": "9", "endline": "16", "endcolumn": "27", "stmt": [16,9,16,29], "code": "        threads_executed += 1" },
    "621": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "26", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "287": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "38", "endline": "54", "endcolumn": "41", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "449": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "14", "endline": "36", "endcolumn": "26", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "1438": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "463": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "3", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1416": { "file": "electiontest.hny", "line": "34", "column": "39", "endline": "34", "endcolumn": "39", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1051": { "file": "electionimpl.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "11", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "4": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1007": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "49", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "475": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "16", "endline": "45", "endcolumn": "18", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "295": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "24", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "134": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "14", "stmt": [30,1,30,14], "code": "def values(d):" },
    "447": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "23", "endline": "36", "endcolumn": "24", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "1356": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "19", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "697": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,16,33,6], "code": "    atomically when not !binsema:" },
    "476": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "19", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "292": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "371": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "15", "column": "9", "endline": "15", "endcolumn": "20", "stmt": [15,1,15,39], "code": "builtin multiplicity \"bag$multiplicity\"" },
    "680": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "20", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "30": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "20", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "201": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "43", "endline": "42", "endcolumn": "43", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1207": { "file": "electionimpl.hny", "line": "69", "column": "16", "endline": "69", "endcolumn": "25", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "1015": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "44", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "763": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "13", "endline": "49", "endcolumn": "17", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "1245": { "file": "electionimpl.hny", "line": "74", "column": "5", "endline": "74", "endcolumn": "49", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1194": { "file": "electionimpl.hny", "line": "66", "column": "35", "endline": "66", "endcolumn": "48", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "962": { "file": "electionimpl.hny", "line": "8", "column": "30", "endline": "8", "endcolumn": "30", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "1482": { "file": "electiontest.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "32", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1390": { "file": "electiontest.hny", "line": "31", "column": "34", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1156": { "file": "electionimpl.hny", "line": "32", "column": "1", "endline": "32", "endcolumn": "32", "stmt": [32,1,32,32], "code": "def withdraw(election, citizen):" },
    "1098": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "48", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "186": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "8", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "608": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "49", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "7": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "31", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1100": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "16", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "342": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "5", "endline": "8", "endcolumn": "12", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "620": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "16", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "866": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1160": { "file": "electionimpl.hny", "line": "56", "column": "15", "endline": "56", "endcolumn": "22", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1041": { "file": "electionimpl.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "12", "stmt": [25,5,25,18], "code": "    result = False" },
    "340": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "14", "endline": "8", "endcolumn": "16", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "127": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "27", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1369": { "file": "electiontest.hny", "line": "26", "column": "5", "endline": "26", "endcolumn": "14", "stmt": [26,5,26,14], "code": "    complete()" },
    "881": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "16", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "180": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1433": { "file": "electiontest.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "29", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "1374": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "16", "stmt": [29,16,38,6], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "860": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "22", "endline": "66", "endcolumn": "25", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "609": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1304": { "file": "electiontest.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "15", "stmt": [14,1,14,15], "code": "def complete():" },
    "1067": { "file": "electionimpl.hny", "line": "34", "column": "15", "endline": "34", "endcolumn": "33", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "224": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1146": { "file": "electionimpl.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "44", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "882": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "17", "endline": "70", "endcolumn": "20", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "187": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "8", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "1293": { "file": "electiontest.hny", "line": "10", "column": "10", "endline": "10", "endcolumn": "10", "stmt": [10,1,10,10], "code": "WINNER = 0" },
    "232": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "833": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "14", "endline": "57", "endcolumn": "44", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "195": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "908": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "200": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "38", "endline": "42", "endcolumn": "41", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "113": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "821": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "10", "endline": "57", "endcolumn": "10", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "815": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "19", "endline": "56", "endcolumn": "20", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "1170": { "file": "electionimpl.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "20", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "120": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1267": { "file": "electionimpl.hny", "line": "81", "column": "31", "endline": "81", "endcolumn": "31", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "6": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "31", "endline": "3", "endcolumn": "31", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "233": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1122": { "file": "electionimpl.hny", "line": "46", "column": "28", "endline": "46", "endcolumn": "34", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "893": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "73", "column": "14", "endline": "73", "endcolumn": "15", "stmt": [73,5,73,15], "code": "    result = []" },
    "867": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1219": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "80", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "949": { "file": "electionimpl.hny", "line": "7", "column": "21", "endline": "7", "endcolumn": "24", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "935": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "40", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "775": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "19", "endline": "51", "endcolumn": "23", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "655": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "18", "endline": "17", "endcolumn": "19", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "464": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "17", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1189": { "file": "electionimpl.hny", "line": "64", "column": "1", "endline": "64", "endcolumn": "53", "stmt": [64,1,64,53], "code": "def transfer(election, candidate_from, candidate_to):" },
    "627": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "3", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "865": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "293": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "713": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "370": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "1217": { "file": "electionimpl.hny", "line": "69", "column": "44", "endline": "69", "endcolumn": "80", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "1005": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "40", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "545": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "687": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "22", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "963": { "file": "electionimpl.hny", "line": "8", "column": "20", "endline": "8", "endcolumn": "30", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "368": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "211": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "513": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "23", "endline": "54", "endcolumn": "23", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "1093": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "34", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "446": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "23", "endline": "36", "endcolumn": "24", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "85": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "17", "stmt": [19,9,19,19], "code": "        result += v" },
    "1319": { "file": "electiontest.hny", "line": "19", "column": "22", "endline": "19", "endcolumn": "34", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "135": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1209": { "file": "electionimpl.hny", "line": "69", "column": "27", "endline": "69", "endcolumn": "38", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "1017": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "44", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1243": { "file": "electionimpl.hny", "line": "74", "column": "35", "endline": "74", "endcolumn": "46", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1172": { "file": "electionimpl.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "32", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "1110": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "16", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "823": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1048": { "file": "electionimpl.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "42", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1426": { "file": "electiontest.hny", "line": "36", "column": "26", "endline": "36", "endcolumn": "40", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "1102": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "28", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "779": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "20", "stmt": [52,20,54,6], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1340": { "file": "electiontest.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "478": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "181": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "234": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "883": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "17", "endline": "70", "endcolumn": "20", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1332": { "file": "electiontest.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "3", "stmt": [22,1,22,69], "code": "def test_withdraw(e, first_candidate, second_candidate, citizen_idx):" },
    "995": { "file": "electionimpl.hny", "line": "17", "column": "15", "endline": "17", "endcolumn": "42", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "341": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "8", "column": "14", "endline": "8", "endcolumn": "16", "stmt": [8,5,8,16], "code": "    result = {:}" },
    "47": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1144": { "file": "electionimpl.hny", "line": "51", "column": "15", "endline": "51", "endcolumn": "42", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "548": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "13", "endline": "63", "endcolumn": "21", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "510": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "13", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "269": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "18", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1466": { "file": "electiontest.hny", "line": "41", "column": "21", "endline": "41", "endcolumn": "21", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "710": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "9", "endline": "32", "endcolumn": "18", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "17": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1027": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "43", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "864": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1329": { "file": "electiontest.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "14", "stmt": [20,5,20,14], "code": "    complete()" },
    "624": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "23", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "960": { "file": "electionimpl.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "774": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "686": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "3", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "1227": { "file": "electionimpl.hny", "line": "70", "column": "5", "endline": "70", "endcolumn": "43", "stmt": [70,5,70,45], "code": "    elections->candidates[candidate_from] = 0" },
    "1053": { "file": "electionimpl.hny", "line": "29", "column": "15", "endline": "29", "endcolumn": "22", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "546": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "544": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "64", "column": "26", "endline": "64", "endcolumn": "27", "stmt": [64,17,64,27], "code": "                result = {}" },
    "139": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "77": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "346": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "237": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "51", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "808": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "13", "endline": "53", "endcolumn": "17", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "966": { "file": "electionimpl.hny", "line": "10", "column": "22", "endline": "10", "endcolumn": "23", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "708": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "32", "column": "10", "endline": "32", "endcolumn": "16", "stmt": [32,9,32,23], "code": "        !binsema = True" },
    "626": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "294": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "22", "endline": "54", "endcolumn": "22", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1406": { "file": "electiontest.hny", "line": "33", "column": "54", "endline": "33", "endcolumn": "54", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1396": { "file": "electiontest.hny", "line": "32", "column": "19", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1154": { "file": "electionimpl.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "46", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "479": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "24", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "460": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "16", "stmt": [38,1,38,16], "code": "def bchoose(bg):" },
    "22": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1484": { "file": "electiontest.hny", "line": "44", "column": "7", "endline": "44", "endcolumn": "14", "stmt": [44,1,44,16], "code": "spawn end_test()" },
    "1231": { "file": "electionimpl.hny", "line": "73", "column": "15", "endline": "73", "endcolumn": "33", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "297": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "22", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "296": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "24", "endline": "54", "endcolumn": "24", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "994": { "file": "electionimpl.hny", "line": "17", "column": "35", "endline": "17", "endcolumn": "41", "stmt": [17,5,17,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "776": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "51", "column": "13", "endline": "51", "endcolumn": "17", "stmt": [51,13,51,23], "code": "            !lk = False" },
    "359": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1162": { "file": "electionimpl.hny", "line": "56", "column": "15", "endline": "56", "endcolumn": "33", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1043": { "file": "electionimpl.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "22", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "967": { "file": "electionimpl.hny", "line": "10", "column": "26", "endline": "10", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "445": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "712": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "21", "stmt": [30,1,30,21], "code": "def acquire(binsema):" },
    "236": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "46", "endline": "44", "endcolumn": "46", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "569": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1476": { "file": "electiontest.hny", "line": "42", "column": "25", "endline": "42", "endcolumn": "25", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "934": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "33", "endline": "81", "endcolumn": "34", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "684": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "12", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "461": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "41", "column": "9", "endline": "41", "endcolumn": "11", "stmt": [41,1,41,21], "code": "builtin add \"bag$add\"" },
    "32": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "17", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "1253": { "file": "electionimpl.hny", "line": "78", "column": "11", "endline": "78", "endcolumn": "12", "stmt": [78,5,78,12], "code": "    idx = -1" },
    "809": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "512": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "18", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "199": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "576": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "52", "endline": "69", "endcolumn": "63", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "122": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "904": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "27", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "831": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "29", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1106": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "44", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "1063": { "file": "electionimpl.hny", "line": "32", "column": "1", "endline": "32", "endcolumn": "32", "stmt": [32,1,32,32], "code": "def withdraw(election, citizen):" },
    "1456": { "file": "electiontest.hny", "line": "40", "column": "21", "endline": "40", "endcolumn": "21", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "979": { "file": "electionimpl.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "3", "stmt": [14,1,14,39], "code": "def vote(election, candidate, citizen):" },
    "898": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "75", "column": "1", "endline": "75", "endcolumn": "11", "stmt": [75,1,75,11], "code": "def get(q):" },
    "0": { "file": "electiontest.hny", "line": "1", "column": "1", "endline": "44", "endcolumn": "23", "stmt": [1,1,44,23], "code": "from synch import Lock, acquire, release" },
    "1047": { "file": "electionimpl.hny", "line": "28", "column": "35", "endline": "28", "endcolumn": "41", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "466": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "1196": { "file": "electionimpl.hny", "line": "66", "column": "5", "endline": "66", "endcolumn": "51", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "350": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "12", "endline": "10", "endcolumn": "22", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "15": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "137": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1306": { "file": "electiontest.hny", "line": "16", "column": "9", "endline": "16", "endcolumn": "29", "stmt": [16,9,16,29], "code": "        threads_executed += 1" },
    "1263": { "file": "electionimpl.hny", "line": "80", "column": "28", "endline": "80", "endcolumn": "31", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "699": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "25", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "205": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "9", "endline": "42", "endcolumn": "27", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "838": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "3", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "910": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "28", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "715": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "14", "stmt": [35,5,35,15], "code": "    atomically:" },
    "817": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "34", "endline": "56", "endcolumn": "35", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "471": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "8", "endline": "44", "endcolumn": "20", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "103": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "39": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "20", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "197": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "34", "endline": "42", "endcolumn": "34", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "218": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1091": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "25", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "639": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "14", "stmt": [11,5,11,15], "code": "    atomically:" },
    "1431": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "1011": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "28", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1120": { "file": "electionimpl.hny", "line": "46", "column": "19", "endline": "46", "endcolumn": "26", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "810": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "16", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "805": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "14", "endline": "53", "endcolumn": "15", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "562": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "31", "endline": "68", "endcolumn": "32", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "291": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "29": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "5", "endline": "3", "endcolumn": "12", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1349": { "file": "electiontest.hny", "line": "24", "column": "26", "endline": "24", "endcolumn": "36", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "182": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "12", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1376": { "file": "electiontest.hny", "line": "29", "column": "41", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "82": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "1489": { "file": "electiontest.hny", "line": "1", "column": "1", "endline": "44", "endcolumn": "23", "stmt": [1,1,44,23], "code": "from synch import Lock, acquire, release" },
    "353": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "20", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1295": { "file": "electiontest.hny", "line": "12", "column": "5", "endline": "12", "endcolumn": "21", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "918": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "14", "endline": "78", "endcolumn": "22", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "891": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "3", "stmt": [72,1,72,12], "code": "def Queue():" },
    "1324": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1247": { "file": "electionimpl.hny", "line": "64", "column": "1", "endline": "64", "endcolumn": "53", "stmt": [64,1,64,53], "code": "def transfer(election, candidate_from, candidate_to):" },
    "190": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "6", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "766": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "231": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "35", "endline": "44", "endcolumn": "38", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "458": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "14", "endline": "39", "endcolumn": "29", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "378": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "8", "endline": "17", "endcolumn": "16", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "121": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "92": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "465": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "290": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "20", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "832": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "130": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "2", "column": "1", "endline": "2", "endcolumn": "3", "stmt": [2,1,2,20], "code": "def subseq(s, b, e):" },
    "1085": { "file": "electionimpl.hny", "line": "39", "column": "35", "endline": "39", "endcolumn": "43", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1446": { "file": "electiontest.hny", "line": "39", "column": "21", "endline": "39", "endcolumn": "21", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "804": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1314": { "file": "electiontest.hny", "line": "19", "column": "5", "endline": "19", "endcolumn": "17", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "905": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "21", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "803": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "772": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "18", "endline": "50", "endcolumn": "33", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "770": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "30", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "682": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "22", "endline": "25", "endcolumn": "26", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "230": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "35", "endline": "44", "endcolumn": "38", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "892": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "72", "column": "1", "endline": "72", "endcolumn": "12", "stmt": [72,1,72,12], "code": "def Queue():" },
    "549": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "18", "endline": "65", "endcolumn": "18", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "638": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "12", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "623": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "25", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "196": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "32", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "57": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "14", "endline": "13", "endcolumn": "19", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1359": { "file": "electiontest.hny", "line": "25", "column": "22", "endline": "25", "endcolumn": "37", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "816": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "33", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "622": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "26", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "1057": { "file": "electionimpl.hny", "line": "29", "column": "35", "endline": "29", "endcolumn": "43", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "773": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "13", "endline": "50", "endcolumn": "16", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "698": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "26", "endline": "31", "endcolumn": "32", "stmt": [31,16,31,32], "code": "    atomically when not !binsema:" },
    "1134": { "file": "electionimpl.hny", "line": "48", "column": "12", "endline": "48", "endcolumn": "16", "stmt": [48,5,48,16], "code": "    return False" },
    "219": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "761": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "477": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "683": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "27", "stmt": [25,5,25,27], "code": "    result = BinSema(False)" },
    "136": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1330": { "file": "electiontest.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "14", "stmt": [20,5,20,14], "code": "    complete()" },
    "1289": { "file": "electiontest.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "16", "stmt": [8,1,8,16], "code": "NUM_CITIZENS = 3" },
    "1038": { "file": "electionimpl.hny", "line": "24", "column": "9", "endline": "24", "endcolumn": "16", "stmt": [24,9,24,21], "code": "        result = True" },
    "459": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "12", "stmt": [39,5,39,29], "code": "    result = choose(keys(bg))" },
    "802": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1150": { "file": "electionimpl.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "33", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "352": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "18", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1225": { "file": "electionimpl.hny", "line": "70", "column": "5", "endline": "70", "endcolumn": "41", "stmt": [70,5,70,45], "code": "    elections->candidates[candidate_from] = 0" },
    "912": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "18", "endline": "77", "endcolumn": "26", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "129": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "560": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "24", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "718": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "17", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "688": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "131": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "5", "endline": "27", "endcolumn": "12", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1166": { "file": "electionimpl.hny", "line": "56", "column": "5", "endline": "56", "endcolumn": "46", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "578": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "66", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "574": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "99": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1233": { "file": "electionimpl.hny", "line": "73", "column": "35", "endline": "73", "endcolumn": "48", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "760": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "40", "endline": "49", "endcolumn": "42", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "448": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "36", "column": "18", "endline": "36", "endcolumn": "25", "stmt": [36,5,36,26], "code": "    result = max(keys(bg))" },
    "1182": { "file": "electionimpl.hny", "line": "62", "column": "35", "endline": "62", "endcolumn": "43", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "207": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "769": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "355": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "21", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1257": { "file": "electionimpl.hny", "line": "79", "column": "5", "endline": "79", "endcolumn": "7", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "191": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "19", "stmt": [40,9,40,19], "code": "        result = []" },
    "1366": { "file": "electiontest.hny", "line": "26", "column": "5", "endline": "26", "endcolumn": "12", "stmt": [26,5,26,14], "code": "    complete()" },
    "1126": { "file": "electionimpl.hny", "line": "46", "column": "49", "endline": "46", "endcolumn": "50", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "5": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1190": { "file": "electionimpl.hny", "line": "66", "column": "5", "endline": "66", "endcolumn": "11", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "771": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "26", "endline": "50", "endcolumn": "32", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "202": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "43", "endline": "42", "endcolumn": "43", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "806": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "14", "endline": "53", "endcolumn": "15", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "75": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "1265": { "file": "electionimpl.hny", "line": "80", "column": "9", "endline": "80", "endcolumn": "10", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "1033": { "file": "electionimpl.hny", "line": "23", "column": "36", "endline": "23", "endcolumn": "45", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "917": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "10", "endline": "78", "endcolumn": "10", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "916": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "9", "endline": "77", "endcolumn": "16", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "125": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "27", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "203": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "38", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "467": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "15", "stmt": [43,5,43,15], "code": "    result = bg" },
    "563": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "26", "endline": "68", "endcolumn": "33", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "470": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "15", "endline": "44", "endcolumn": "20", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "1394": { "file": "electiontest.hny", "line": "32", "column": "19", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1486": { "file": "electiontest.hny", "line": "44", "column": "1", "endline": "44", "endcolumn": "16", "stmt": [44,1,44,16], "code": "spawn end_test()" },
    "1354": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "1021": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "26", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "189": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "39", "column": "8", "endline": "39", "endcolumn": "14", "stmt": [39,5,39,15], "code": "    if a == []:" },
    "185": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "13", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "575": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "628": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "23", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "65": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "27", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "206": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1176": { "file": "electionimpl.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "43", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "184": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "38", "column": "1", "endline": "38", "endcolumn": "3", "stmt": [38,1,38,13], "code": "def qsort(a):" },
    "969": { "file": "electionimpl.hny", "line": "10", "column": "21", "endline": "10", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "913": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "77", "column": "29", "endline": "77", "endcolumn": "29", "stmt": [77,9,77,30], "code": "        result = list.head(!q)" },
    "192": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "40", "column": "18", "endline": "40", "endcolumn": "19", "stmt": [40,9,40,19], "code": "        result = []" },
    "1399": { "file": "electiontest.hny", "line": "32", "column": "22", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1344": { "file": "electiontest.hny", "line": "23", "column": "5", "endline": "23", "endcolumn": "50", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "839": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "17", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "1297": { "file": "electiontest.hny", "line": "12", "column": "23", "endline": "12", "endcolumn": "36", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "765": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "18", "endline": "50", "endcolumn": "24", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "577": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "689": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "349": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "17", "endline": "10", "endcolumn": "22", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "561": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "26", "endline": "68", "endcolumn": "29", "stmt": [68,17,68,33], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "132": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "26", "column": "1", "endline": "26", "endcolumn": "12", "stmt": [26,1,26,12], "code": "def list(a):" },
    "55": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "12", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "1061": { "file": "electionimpl.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "39", "stmt": [14,1,14,39], "code": "def vote(election, candidate, citizen):" },
    "899": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "807": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "53", "column": "19", "endline": "53", "endcolumn": "22", "stmt": [53,13,53,22], "code": "            !lk = True" },
    "1140": { "file": "electionimpl.hny", "line": "51", "column": "25", "endline": "51", "endcolumn": "33", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "767": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "27", "endline": "50", "endcolumn": "27", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "1215": { "file": "electionimpl.hny", "line": "69", "column": "44", "endline": "69", "endcolumn": "64", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "474": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "16", "endline": "45", "endcolumn": "18", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "801": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "629": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "16", "endline": "8", "endcolumn": "16", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "356": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "13", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "1316": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1275": { "file": "electionimpl.hny", "line": "79", "column": "23", "endline": "79", "endcolumn": "23", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "472": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "6", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "45": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "351": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "10", "stmt": [10,9,10,23], "code": "        if v in result:" },
    "1071": { "file": "electionimpl.hny", "line": "34", "column": "5", "endline": "34", "endcolumn": "44", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "1326": { "file": "electiontest.hny", "line": "19", "column": "5", "endline": "19", "endcolumn": "48", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1001": { "file": "electionimpl.hny", "line": "20", "column": "27", "endline": "20", "endcolumn": "33", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "204": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "44", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "1116": { "file": "electionimpl.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "41", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "800": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "124": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "968": { "file": "electionimpl.hny", "line": "10", "column": "26", "endline": "10", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "473": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "14", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "133": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "3", "stmt": [30,1,30,14], "code": "def values(d):" },
    "764": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "50", "column": "14", "endline": "50", "endcolumn": "14", "stmt": [50,13,50,33], "code": "            !c = bag.add(!c, ctx)" },
    "89": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "3", "stmt": [22,1,22,11], "code": "def set(a):" },
    "1097": { "file": "electionimpl.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "48", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "1205": { "file": "electionimpl.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "49", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "911": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "150": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "214": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "49", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1044": { "file": "electionimpl.hny", "line": "28", "column": "25", "endline": "28", "endcolumn": "33", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1191": { "file": "electionimpl.hny", "line": "66", "column": "15", "endline": "66", "endcolumn": "22", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "18": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1287": { "file": "electiontest.hny", "line": "7", "column": "18", "endline": "7", "endcolumn": "18", "stmt": [7,1,7,18], "code": "NUM_CANDIDATES = 2" },
    "1087": { "file": "electionimpl.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "46", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "441": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "18", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1395": { "file": "electiontest.hny", "line": "32", "column": "19", "endline": "32", "endcolumn": "19", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "522": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "518": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "20", "endline": "55", "endcolumn": "22", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "100": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "790": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "69": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "12", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "431": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "12", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1096": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "40", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "900": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "740": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "22", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "617": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "stmt": [4,1,4,19], "code": "def atomic_load(p):" },
    "743": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "12", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "96": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1180": { "file": "electionimpl.hny", "line": "62", "column": "25", "endline": "62", "endcolumn": "33", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "950": { "file": "electionimpl.hny", "line": "7", "column": "25", "endline": "7", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1009": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "16", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "733": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "1143": { "file": "electionimpl.hny", "line": "51", "column": "35", "endline": "51", "endcolumn": "41", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1296": { "file": "electiontest.hny", "line": "12", "column": "23", "endline": "12", "endcolumn": "50", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "1248": { "file": "electionimpl.hny", "line": "76", "column": "1", "endline": "76", "endcolumn": "3", "stmt": [76,1,76,21], "code": "def winner(election):" },
    "1079": { "file": "electionimpl.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "53", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "730": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "18", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "1018": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "42", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "416": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "3", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "81": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "79": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "793": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "71", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "616": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "24", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "430": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "14", "endline": "31", "endcolumn": "26", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "217": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "719": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "16", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "25": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1028": { "file": "electionimpl.hny", "line": "23", "column": "9", "endline": "23", "endcolumn": "16", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "957": { "file": "electionimpl.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "27", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "1384": { "file": "electiontest.hny", "line": "31", "column": "9", "endline": "31", "endcolumn": "25", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1458": { "file": "electiontest.hny", "line": "40", "column": "24", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "91": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "583": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "65", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "572": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "44", "endline": "68", "endcolumn": "57", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "1258": { "file": "electionimpl.hny", "line": "79", "column": "5", "endline": "79", "endcolumn": "7", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "614": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "30", "endline": "70", "endcolumn": "53", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "582": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "69", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "169": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "17", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "732": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "907": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "28", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "491": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "49", "column": "1", "endline": "49", "endcolumn": "27", "stmt": [49,1,49,27], "code": "builtin remove \"bag$remove\"" },
    "1192": { "file": "electionimpl.hny", "line": "66", "column": "25", "endline": "66", "endcolumn": "33", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "523": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "3", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "517": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "20", "endline": "55", "endcolumn": "22", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "906": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "28", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "490": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "49", "column": "9", "endline": "49", "endcolumn": "14", "stmt": [49,1,49,27], "code": "builtin remove \"bag$remove\"" },
    "1054": { "file": "electionimpl.hny", "line": "29", "column": "25", "endline": "29", "endcolumn": "33", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "716": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "1284": { "file": "electiontest.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "18", "stmt": [4,1,4,20], "code": "threads_executed = 0" },
    "1080": { "file": "electionimpl.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "15", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "573": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "35", "endline": "68", "endcolumn": "42", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "956": { "file": "electionimpl.hny", "line": "8", "column": "9", "endline": "8", "endcolumn": "18", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "440": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "13", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1448": { "file": "electiontest.hny", "line": "39", "column": "24", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1387": { "file": "electiontest.hny", "line": "31", "column": "27", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "164": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1459": { "file": "electiontest.hny", "line": "40", "column": "17", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "35": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "379": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "6", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "220": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "49": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "17", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1142": { "file": "electionimpl.hny", "line": "51", "column": "35", "endline": "51", "endcolumn": "41", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "248": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "106": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1153": { "file": "electionimpl.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "44", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1095": { "file": "electionimpl.hny", "line": "43", "column": "8", "endline": "43", "endcolumn": "40", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "669": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "1078": { "file": "electionimpl.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "53", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "389": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "298": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "25", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "270": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "20", "endline": "49", "endcolumn": "23", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "216": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1187": { "file": "electionimpl.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "35", "stmt": [54,1,54,35], "code": "def get_votes(election, candidate):" },
    "581": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "73", "endline": "69", "endcolumn": "73", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "611": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "52", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "329": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "20", "endline": "5", "endcolumn": "20", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1069": { "file": "electionimpl.hny", "line": "34", "column": "15", "endline": "34", "endcolumn": "42", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "742": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "24", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "78": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "5", "endline": "18", "endcolumn": "7", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "731": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "15", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "415": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "23", "stmt": [28,1,28,23], "code": "builtin bmin \"bag$bmin\"" },
    "152": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "964": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1299": { "file": "electiontest.hny", "line": "12", "column": "39", "endline": "12", "endcolumn": "50", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "792": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "69", "endline": "52", "endcolumn": "71", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "919": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "25", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "102": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1081": { "file": "electionimpl.hny", "line": "39", "column": "5", "endline": "39", "endcolumn": "11", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "951": { "file": "electionimpl.hny", "line": "7", "column": "21", "endline": "7", "endcolumn": "26", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1338": { "file": "electiontest.hny", "line": "23", "column": "22", "endline": "23", "endcolumn": "36", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "714": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "21", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "643": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "9", "endline": "12", "endcolumn": "16", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "492": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "3", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "717": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "395": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "692": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "12", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "433": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "33", "column": "9", "endline": "33", "endcolumn": "12", "stmt": [33,1,33,23], "code": "builtin bmax \"bag$bmax\"" },
    "901": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "16", "endline": "76", "endcolumn": "16", "stmt": [76,16,79,6], "code": "    atomically when !q != []:" },
    "571": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "51", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "633": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "442": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "12", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "345": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "642": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "18", "endline": "12", "endcolumn": "20", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "443": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "10", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "156": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,13], "code": "def items(d):" },
    "432": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "13", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "316": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "15", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "312": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "14", "endline": "2", "endcolumn": "16", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "68": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "5", "endline": "13", "endcolumn": "12", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "632": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "21", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "493": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "280": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "17", "endline": "53", "endcolumn": "17", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "693": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "27", "column": "1", "endline": "27", "endcolumn": "22", "stmt": [27,1,27,22], "code": "def acquired(binsema):" },
    "238": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "46", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "521": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "50", "column": "1", "endline": "50", "endcolumn": "20", "stmt": [50,1,50,20], "code": "def remove(bg, elt):" },
    "978": { "file": "electionimpl.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def Election(n, m):" },
    "173": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "20", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "107": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1298": { "file": "electiontest.hny", "line": "12", "column": "23", "endline": "12", "endcolumn": "50", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "1008": { "file": "electionimpl.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "6", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "80": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "610": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "52", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "988": { "file": "electionimpl.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "46", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "580": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "69", "endline": "69", "endcolumn": "69", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "157": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def items(d):" },
    "123": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "151": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1259": { "file": "electionimpl.hny", "line": "80", "column": "12", "endline": "80", "endcolumn": "21", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "1068": { "file": "electionimpl.hny", "line": "34", "column": "35", "endline": "34", "endcolumn": "41", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "668": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "902": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "22", "endline": "76", "endcolumn": "22", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "570": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "68", "column": "55", "endline": "68", "endcolumn": "56", "stmt": [68,35,68,57], "code": "                let hd = bmin(bg) let tl = remove(bg, hd):" },
    "335": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "249": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "215": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1449": { "file": "electiontest.hny", "line": "39", "column": "17", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "1193": { "file": "electionimpl.hny", "line": "66", "column": "15", "endline": "66", "endcolumn": "33", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "928": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "16", "endline": "81", "endcolumn": "16", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "183": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def items(d):" },
    "520": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "9", "endline": "55", "endcolumn": "23", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "1055": { "file": "electionimpl.hny", "line": "29", "column": "15", "endline": "29", "endcolumn": "33", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "311": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "14", "endline": "2", "endcolumn": "16", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "239": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "213": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "45", "endline": "43", "endcolumn": "45", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1285": { "file": "electiontest.hny", "line": "5", "column": "29", "endline": "5", "endcolumn": "29", "stmt": [5,1,5,29], "code": "number_of_spawned_threads = 4" },
    "417": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "29", "column": "1", "endline": "29", "endcolumn": "13", "stmt": [29,1,29,13], "code": "def bmin(bg):" },
    "434": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "33", "column": "1", "endline": "33", "endcolumn": "23", "stmt": [33,1,33,23], "code": "builtin bmax \"bag$bmax\"" },
    "281": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "13", "endline": "53", "endcolumn": "18", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "394": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "3", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "347": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "5", "endline": "9", "endcolumn": "7", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "313": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "2", "column": "5", "endline": "2", "endcolumn": "12", "stmt": [2,5,2,16], "code": "    result = {:}" },
    "308": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "16", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "791": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "64", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1386": { "file": "electiontest.hny", "line": "31", "column": "28", "endline": "31", "endcolumn": "28", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "952": { "file": "electionimpl.hny", "line": "7", "column": "21", "endline": "7", "endcolumn": "27", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1029": { "file": "electionimpl.hny", "line": "23", "column": "19", "endline": "23", "endcolumn": "26", "stmt": [23,9,23,57], "code": "        election->citizens[citizen].voted_for = candidate" },
    "444": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "271": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "25", "endline": "49", "endcolumn": "25", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "34": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1249": { "file": "electionimpl.hny", "line": "76", "column": "1", "endline": "76", "endcolumn": "21", "stmt": [76,1,76,21], "code": "def winner(election):" },
    "358": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "11", "column": "26", "endline": "11", "endcolumn": "26", "stmt": [11,13,11,26], "code": "            result[v] += 1" },
    "344": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,14], "code": "    for v in a:" },
    "337": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "15", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "1019": { "file": "electionimpl.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "16", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "741": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "24", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "953": { "file": "electionimpl.hny", "line": "7", "column": "30", "endline": "7", "endcolumn": "30", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "101": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "24": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "37", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1152": { "file": "electionimpl.hny", "line": "52", "column": "35", "endline": "52", "endcolumn": "43", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "1094": { "file": "electionimpl.hny", "line": "43", "column": "35", "endline": "43", "endcolumn": "40", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "19": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "18", "endline": "3", "endcolumn": "18", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "334": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "221": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "90": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "11", "stmt": [22,1,22,11], "code": "def set(a):" },
    "903": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "76", "column": "21", "endline": "76", "endcolumn": "22", "stmt": [76,16,76,28], "code": "    atomically when !q != []:" },
    "1186": { "file": "electionimpl.hny", "line": "62", "column": "5", "endline": "62", "endcolumn": "46", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "165": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "16", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "397": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "14", "endline": "24", "endcolumn": "14", "stmt": [24,5,24,14], "code": "    result = 0" },
    "310": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "12", "stmt": [1,1,1,12], "code": "def empty():" },
    "212": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "48": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "16", "endline": "9", "endcolumn": "16", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1045": { "file": "electionimpl.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "33", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "876": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "16", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "138": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "29", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1437": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "18", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "613": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "35", "endline": "70", "endcolumn": "53", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1269": { "file": "electionimpl.hny", "line": "81", "column": "20", "endline": "81", "endcolumn": "32", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "794": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "35", "endline": "52", "endcolumn": "37", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1282": { "file": "electionimpl.hny", "line": "76", "column": "1", "endline": "76", "endcolumn": "21", "stmt": [76,1,76,21], "code": "def winner(election):" },
    "272": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "25", "endline": "49", "endcolumn": "25", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1082": { "file": "electionimpl.hny", "line": "39", "column": "15", "endline": "39", "endcolumn": "22", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "826": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "43", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1339": { "file": "electiontest.hny", "line": "23", "column": "22", "endline": "23", "endcolumn": "36", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "982": { "file": "electionimpl.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "11", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1408": { "file": "electiontest.hny", "line": "33", "column": "57", "endline": "33", "endcolumn": "57", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "413": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "282": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "53", "column": "5", "endline": "53", "endcolumn": "11", "stmt": [53,5,53,18], "code": "    let n = len(d):" },
    "1058": { "file": "electionimpl.hny", "line": "29", "column": "15", "endline": "29", "endcolumn": "44", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "734": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "14", "endline": "40", "endcolumn": "21", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "322": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "166": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "148": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "27": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "886": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "25", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1278": { "file": "electionimpl.hny", "line": "83", "column": "12", "endline": "83", "endcolumn": "14", "stmt": [83,5,83,14], "code": "    return idx" },
    "1049": { "file": "electionimpl.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "44", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "744": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "16", "stmt": [42,1,42,16], "code": "def Condition():" },
    "690": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "15", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "222": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "198": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "42", "column": "29", "endline": "42", "endcolumn": "35", "stmt": [42,9,42,53], "code": "        let (pivot, rest) = head(a), tail(a)" },
    "965": { "file": "electionimpl.hny", "line": "10", "column": "9", "endline": "10", "endcolumn": "19", "stmt": [5,5,12,5], "code": "        .candidates:[0,]*n, " },
    "1185": { "file": "electionimpl.hny", "line": "62", "column": "5", "endline": "62", "endcolumn": "46", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "728": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "21", "stmt": [34,1,34,21], "code": "def release(binsema):" },
    "685": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "11", "stmt": [24,1,24,11], "code": "def Lock():" },
    "382": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "23", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "84": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "9", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "1004": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "40", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "210": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "23", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "862": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "675": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "514": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "8", "endline": "54", "endcolumn": "23", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "299": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1074": { "file": "electionimpl.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "372": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "39", "stmt": [15,1,15,39], "code": "builtin multiplicity \"bag$multiplicity\"" },
    "515": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "54", "column": "5", "endline": "54", "endcolumn": "6", "stmt": [54,5,54,24], "code": "    if result[elt] <= 0:" },
    "551": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "23", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "95": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1208": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "25", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "788": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "625": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "26", "stmt": [5,16,5,26], "code": "    atomically result = !p" },
    "37": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "19", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1065": { "file": "electionimpl.hny", "line": "34", "column": "15", "endline": "34", "endcolumn": "22", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "778": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "20", "stmt": [52,20,54,6], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "737": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "3", "stmt": [42,1,42,16], "code": "def Condition():" },
    "827": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "29", "endline": "57", "endcolumn": "39", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "26": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "285": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "38", "endline": "54", "endcolumn": "38", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "223": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "49", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "1279": { "file": "electionimpl.hny", "line": "83", "column": "5", "endline": "83", "endcolumn": "14", "stmt": [83,5,83,14], "code": "    return idx" },
    "795": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "747": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "46", "column": "15", "endline": "46", "endcolumn": "15", "stmt": [46,5,46,15], "code": "    var cnt = 0" },
    "323": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1163": { "file": "electionimpl.hny", "line": "56", "column": "35", "endline": "56", "endcolumn": "43", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "877": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "501": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "6", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "414": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "28", "column": "9", "endline": "28", "endcolumn": "12", "stmt": [28,1,28,23], "code": "builtin bmin \"bag$bmin\"" },
    "273": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "20", "endline": "49", "endcolumn": "26", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "797": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "412": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "23", "column": "1", "endline": "23", "endcolumn": "13", "stmt": [23,1,23,13], "code": "def size(bg):" },
    "981": { "file": "electionimpl.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "11", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "373": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "3", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1381": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "105": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "283": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1409": { "file": "electiontest.hny", "line": "33", "column": "53", "endline": "33", "endcolumn": "57", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1075": { "file": "electionimpl.hny", "line": "35", "column": "36", "endline": "35", "endcolumn": "42", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "983": { "file": "electionimpl.hny", "line": "16", "column": "15", "endline": "16", "endcolumn": "22", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "971": { "file": "electionimpl.hny", "line": "11", "column": "9", "endline": "11", "endcolumn": "17", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "383": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "21", "endline": "18", "endcolumn": "23", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "155": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "30", "column": "1", "endline": "30", "endcolumn": "14", "stmt": [30,1,30,14], "code": "def values(d):" },
    "1469": { "file": "electiontest.hny", "line": "41", "column": "17", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1103": { "file": "electionimpl.hny", "line": "44", "column": "30", "endline": "44", "endcolumn": "38", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "973": { "file": "electionimpl.hny", "line": "11", "column": "54", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "921": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "24", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "1283": { "file": "electiontest.hny", "line": "4", "column": "20", "endline": "4", "endcolumn": "20", "stmt": [4,1,4,20], "code": "threads_executed = 0" },
    "869": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "154": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "5", "endline": "31", "endcolumn": "12", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "923": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "9", "endline": "78", "endcolumn": "12", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "640": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "14", "stmt": [11,5,11,15], "code": "    atomically:" },
    "550": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "23", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "516": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "13", "endline": "55", "endcolumn": "18", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "94": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "27", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1436": { "file": "electiontest.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "104": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1064": { "file": "electionimpl.hny", "line": "34", "column": "5", "endline": "34", "endcolumn": "11", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "631": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "17", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "630": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "8", "column": "17", "endline": "8", "endcolumn": "17", "stmt": [8,16,8,21], "code": "    atomically !p = v" },
    "1083": { "file": "electionimpl.hny", "line": "39", "column": "25", "endline": "39", "endcolumn": "33", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "500": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "8", "endline": "52", "endcolumn": "20", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "972": { "file": "electionimpl.hny", "line": "11", "column": "20", "endline": "11", "endcolumn": "51", "stmt": [5,5,12,5], "code": "        .citizens:[{.voted: False, .voted_for: -1},]*m" },
    "380": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "19", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "225": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "43", "column": "23", "endline": "43", "endcolumn": "53", "stmt": [43,9,43,64], "code": "        let lower = [ v for v in rest where v < pivot ]" },
    "735": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "40", "column": "5", "endline": "40", "endcolumn": "12", "stmt": [40,5,40,21], "code": "    result = !binsema" },
    "641": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "12", "column": "19", "endline": "12", "endcolumn": "20", "stmt": [12,9,12,20], "code": "        result = !lk" },
    "59": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "21", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "868": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "29", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "1173": { "file": "electionimpl.hny", "line": "59", "column": "34", "endline": "59", "endcolumn": "42", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "922": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "14", "endline": "78", "endcolumn": "26", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "691": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "28", "column": "14", "endline": "28", "endcolumn": "21", "stmt": [28,5,28,21], "code": "    result = !binsema" },
    "275": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "5", "endline": "49", "endcolumn": "12", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1479": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1268": { "file": "electionimpl.hny", "line": "81", "column": "20", "endline": "81", "endcolumn": "32", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "1059": { "file": "electionimpl.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "46", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "745": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "3", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "1480": { "file": "electiontest.hny", "line": "42", "column": "31", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "502": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "9", "endline": "53", "endcolumn": "14", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "970": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "696": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,16,33,6], "code": "    atomically when not !binsema:" },
    "1218": { "file": "electionimpl.hny", "line": "69", "column": "44", "endline": "69", "endcolumn": "80", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "820": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "56", "column": "16", "endline": "56", "endcolumn": "17", "stmt": [56,16,56,36], "code": "    atomically if !c != bag.empty():" },
    "284": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "1184": { "file": "electionimpl.hny", "line": "62", "column": "15", "endline": "62", "endcolumn": "44", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "980": { "file": "electionimpl.hny", "line": "14", "column": "1", "endline": "14", "endcolumn": "39", "stmt": [14,1,14,39], "code": "def vote(election, candidate, citizen):" },
    "884": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "552": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "18", "endline": "65", "endcolumn": "23", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "97": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "870": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "10", "endline": "67", "endcolumn": "13", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "86": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "1428": { "file": "electiontest.hny", "line": "36", "column": "43", "endline": "36", "endcolumn": "43", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "1014": { "file": "electionimpl.hny", "line": "21", "column": "9", "endline": "21", "endcolumn": "44", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "746": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "45", "column": "1", "endline": "45", "endcolumn": "16", "stmt": [45,1,45,16], "code": "def wait(c, lk):" },
    "636": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "23", "stmt": [7,1,7,23], "code": "def atomic_store(p, v):" },
    "880": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "69", "column": "1", "endline": "69", "endcolumn": "12", "stmt": [69,1,69,12], "code": "def V(sema):" },
    "36": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "20", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "646": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "15", "endline": "13", "endcolumn": "18", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "469": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "8", "endline": "44", "endcolumn": "10", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "736": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "18", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "274": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "49", "column": "14", "endline": "49", "endcolumn": "27", "stmt": [49,5,49,27], "code": "    result = qsort(list(d))" },
    "1419": { "file": "electiontest.hny", "line": "34", "column": "45", "endline": "34", "endcolumn": "58", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "861": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "21", "endline": "66", "endcolumn": "25", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "796": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "20", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "887": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1435": { "file": "electiontest.hny", "line": "37", "column": "34", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "1468": { "file": "electiontest.hny", "line": "41", "column": "24", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "637": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "3", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "411": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "17", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1380": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1113": { "file": "electionimpl.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "34", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "920": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "78", "column": "25", "endline": "78", "endcolumn": "25", "stmt": [78,9,78,26], "code": "        !q = list.tail(!q)" },
    "647": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "9", "endline": "13", "endcolumn": "13", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "519": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "55", "column": "13", "endline": "55", "endcolumn": "23", "stmt": [55,9,55,23], "code": "        del result[elt]" },
    "1228": { "file": "electionimpl.hny", "line": "73", "column": "5", "endline": "73", "endcolumn": "11", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "553": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "65", "column": "13", "endline": "65", "endcolumn": "16", "stmt": [65,13,65,24], "code": "            elif k == n:" },
    "927": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "17", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "885": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,16,70,25], "code": "    atomically !sema += 1" },
    "1280": { "file": "electionimpl.hny", "line": "83", "column": "5", "endline": "83", "endcolumn": "14", "stmt": [83,5,83,14], "code": "    return idx" },
    "87": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1418": { "file": "electiontest.hny", "line": "34", "column": "24", "endline": "34", "endcolumn": "40", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "977": { "file": "electionimpl.hny", "line": "5", "column": "5", "endline": "5", "endcolumn": "12", "stmt": [5,5,12,5], "code": "    result = {" },
    "875": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "863": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "21", "endline": "66", "endcolumn": "29", "stmt": [66,16,66,29], "code": "    atomically when !sema > 0:" },
    "825": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "25", "endline": "57", "endcolumn": "26", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "1478": { "file": "electiontest.hny", "line": "42", "column": "28", "endline": "42", "endcolumn": "28", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "410": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "17", "stmt": [26,9,26,19], "code": "        result += c" },
    "503": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "53", "column": "16", "endline": "53", "endcolumn": "18", "stmt": [53,9,53,24], "code": "        result[elt] -= 1" },
    "1383": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "31": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "3", "stmt": [5,1,5,17], "code": "def append(s, e):" },
    "799": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "72", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1481": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "21": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "19", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1099": { "file": "electionimpl.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "6", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "874": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "18", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "749": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "24", "stmt": [47,5,47,24], "code": "    let (), ctx = save():" },
    "824": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "57", "column": "26", "endline": "57", "endcolumn": "26", "stmt": [57,9,57,44], "code": "        !c = bag.remove(!c, bag.bchoose(!c))" },
    "739": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "43", "column": "14", "endline": "43", "endcolumn": "22", "stmt": [43,5,43,24], "code": "    result = bag.empty()" },
    "1024": { "file": "electionimpl.hny", "line": "22", "column": "36", "endline": "22", "endcolumn": "41", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "468": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "43", "column": "5", "endline": "43", "endcolumn": "12", "stmt": [43,5,43,15], "code": "    result = bg" },
    "1290": { "file": "electiontest.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "14", "stmt": [8,1,8,16], "code": "NUM_CITIZENS = 3" },
    "386": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "17", "stmt": [17,5,17,17], "code": "    if elt in bg:" },
    "926": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "80", "column": "1", "endline": "80", "endcolumn": "3", "stmt": [80,1,80,17], "code": "def put(q, item):" },
    "644": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "13", "column": "10", "endline": "13", "endcolumn": "11", "stmt": [13,9,13,18], "code": "        !lk = True" },
    "485": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "18", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "727": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "15", "stmt": [35,5,35,15], "code": "    atomically:" },
    "1368": { "file": "electiontest.hny", "line": "26", "column": "5", "endline": "26", "endcolumn": "14", "stmt": [26,5,26,14], "code": "    complete()" },
    "393": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "23", "stmt": [22,1,22,23], "code": "builtin size \"bag$size\"" },
    "1425": { "file": "electiontest.hny", "line": "32", "column": "39", "endline": "32", "endcolumn": "39", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1101": { "file": "electionimpl.hny", "line": "44", "column": "19", "endline": "44", "endcolumn": "28", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "1060": { "file": "electionimpl.hny", "line": "29", "column": "5", "endline": "29", "endcolumn": "46", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "597": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "41", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "326": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "662": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "14", "endline": "19", "endcolumn": "14", "stmt": [19,13,19,20], "code": "            !p = new" },
    "159": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "787": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "58", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "250": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "20", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1434": { "file": "electiontest.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "29", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "1357": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "986": { "file": "electionimpl.hny", "line": "16", "column": "35", "endline": "16", "endcolumn": "43", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "16": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1305": { "file": "electiontest.hny", "line": "15", "column": "5", "endline": "15", "endcolumn": "14", "stmt": [15,5,15,15], "code": "    atomically:" },
    "1264": { "file": "electionimpl.hny", "line": "80", "column": "12", "endline": "80", "endcolumn": "31", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "537": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "17", "endline": "62", "endcolumn": "24", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "1477": { "file": "electiontest.hny", "line": "42", "column": "21", "endline": "42", "endcolumn": "31", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "276": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "48", "column": "1", "endline": "48", "endcolumn": "14", "stmt": [48,1,48,14], "code": "def sorted(d):" },
    "529": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "6", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "499": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "20", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "1123": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "35", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "1016": { "file": "electionimpl.hny", "line": "21", "column": "44", "endline": "21", "endcolumn": "44", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1407": { "file": "electiontest.hny", "line": "33", "column": "53", "endline": "33", "endcolumn": "57", "stmt": [33,13,33,58], "code": "            let received_votes = election.get_votes(?e, i):" },
    "1242": { "file": "electionimpl.hny", "line": "74", "column": "35", "endline": "74", "endcolumn": "46", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "176": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "658": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "18", "endline": "17", "endcolumn": "26", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "1281": { "file": "electionimpl.hny", "line": "83", "column": "5", "endline": "83", "endcolumn": "14", "stmt": [83,5,83,14], "code": "    return idx" },
    "784": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "40", "endline": "52", "endcolumn": "55", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "589": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "319": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "663": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "14", "endline": "19", "endcolumn": "14", "stmt": [19,13,19,20], "code": "            !p = new" },
    "425": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "245": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1042": { "file": "electionimpl.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "11", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "987": { "file": "electionimpl.hny", "line": "16", "column": "15", "endline": "16", "endcolumn": "44", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "144": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "671": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "3", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "497": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "12", "stmt": [51,5,51,15], "code": "    result = bg" },
    "277": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "52", "column": "1", "endline": "52", "endcolumn": "3", "stmt": [52,1,52,16], "code": "def reversed(d):" },
    "1375": { "file": "electiontest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "36", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "365": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "21", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "439": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1378": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1415": { "file": "electiontest.hny", "line": "34", "column": "39", "endline": "34", "endcolumn": "39", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "251": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "26", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "390": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "9", "endline": "20", "endcolumn": "16", "stmt": [20,9,20,18], "code": "        result = 0" },
    "437": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1382": { "file": "electiontest.hny", "line": "29", "column": "65", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "1070": { "file": "electionimpl.hny", "line": "34", "column": "5", "endline": "34", "endcolumn": "44", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "486": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "19", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "381": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "18", "column": "18", "endline": "18", "endcolumn": "19", "stmt": [18,9,18,24], "code": "        result = bg[elt]" },
    "670": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "15", "column": "1", "endline": "15", "endcolumn": "21", "stmt": [15,1,15,21], "code": "def cas(p, old, new):" },
    "242": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "958": { "file": "electionimpl.hny", "line": "8", "column": "21", "endline": "8", "endcolumn": "24", "stmt": [5,5,12,5], "code": "        .locks_cit:[Lock(),]*m," },
    "364": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "20", "endline": "13", "endcolumn": "20", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "330": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "64": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "31", "endline": "13", "endcolumn": "31", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "426": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "332": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "44": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "8", "column": "1", "endline": "8", "endcolumn": "12", "stmt": [8,1,8,12], "code": "def head(s):" },
    "872": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "1052": { "file": "electionimpl.hny", "line": "29", "column": "15", "endline": "29", "endcolumn": "22", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "145": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "939": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "21", "endline": "81", "endcolumn": "41", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "843": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "21", "endline": "60", "endcolumn": "29", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "177": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1467": { "file": "electiontest.hny", "line": "41", "column": "17", "endline": "41", "endcolumn": "24", "stmt": [41,1,41,25], "code": "spawn test_vote(?e, 1, 1)" },
    "161": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "659": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "17", "column": "9", "endline": "17", "endcolumn": "16", "stmt": [17,9,17,26], "code": "        result = !p == old" },
    "498": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "52", "column": "8", "endline": "52", "endcolumn": "10", "stmt": [52,5,52,21], "code": "    if elt in result:" },
    "392": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "22", "column": "9", "endline": "22", "endcolumn": "12", "stmt": [22,1,22,23], "code": "builtin size \"bag$size\"" },
    "999": { "file": "electionimpl.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "25", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "162": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "34", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "871": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "10", "endline": "67", "endcolumn": "13", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "170": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "17", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1139": { "file": "electionimpl.hny", "line": "51", "column": "15", "endline": "51", "endcolumn": "22", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "333": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "74": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "17", "column": "5", "endline": "17", "endcolumn": "12", "stmt": [17,5,17,14], "code": "    result = 0" },
    "321": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "243": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "24", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "496": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "859": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "16", "stmt": [66,16,68,6], "code": "    atomically when !sema > 0:" },
    "320": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "33", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "391": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "26", "stmt": [16,1,16,26], "code": "def multiplicity(bg, elt):" },
    "1365": { "file": "electiontest.hny", "line": "25", "column": "5", "endline": "25", "endcolumn": "51", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "595": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "39", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "785": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "57", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "677": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "22", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "605": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "35", "endline": "70", "endcolumn": "46", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "945": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "367": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "13", "column": "13", "endline": "13", "endcolumn": "23", "stmt": [13,13,13,25], "code": "            result[v] = 1" },
    "436": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "13", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "33": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "14", "endline": "6", "endcolumn": "14", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "1417": { "file": "electiontest.hny", "line": "34", "column": "24", "endline": "34", "endcolumn": "40", "stmt": [34,17,34,58], "code": "                assert EXPECTED_VOTES[i] == received_votes" },
    "1252": { "file": "electionimpl.hny", "line": "77", "column": "5", "endline": "77", "endcolumn": "10", "stmt": [77,5,77,13], "code": "    high = -1" },
    "1121": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "26", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "535": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "17", "endline": "62", "endcolumn": "20", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "488": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "21", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "538": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "9", "endline": "62", "endcolumn": "15", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "244": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "66": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "1195": { "file": "electionimpl.hny", "line": "66", "column": "15", "endline": "66", "endcolumn": "49", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "1351": { "file": "electiontest.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "37", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "331": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "167": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "76": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "18", "column": "14", "endline": "18", "endcolumn": "14", "stmt": [18,5,18,14], "code": "    for v in a:" },
    "14": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "16", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1266": { "file": "electionimpl.hny", "line": "81", "column": "20", "endline": "81", "endcolumn": "29", "stmt": [81,13,81,32], "code": "            high = candidates[i]" },
    "1026": { "file": "electionimpl.hny", "line": "22", "column": "45", "endline": "22", "endcolumn": "48", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "729": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "39", "column": "1", "endline": "39", "endcolumn": "3", "stmt": [39,1,39,18], "code": "def held(binsema):" },
    "160": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1226": { "file": "electionimpl.hny", "line": "70", "column": "45", "endline": "70", "endcolumn": "45", "stmt": [70,5,70,45], "code": "    elections->candidates[candidate_from] = 0" },
    "598": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1161": { "file": "electionimpl.hny", "line": "56", "column": "25", "endline": "56", "endcolumn": "33", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "118": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "27", "column": "16", "endline": "27", "endcolumn": "16", "stmt": [27,5,27,29], "code": "    result = [ v for v in a ]" },
    "1483": { "file": "electiontest.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "32", "stmt": [42,1,42,32], "code": "spawn test_withdraw(?e, 0, 1, 2)" },
    "1391": { "file": "electiontest.hny", "line": "31", "column": "27", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1155": { "file": "electionimpl.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "46", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "873": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "67", "column": "9", "endline": "67", "endcolumn": "18", "stmt": [67,9,67,18], "code": "        !sema -= 1" },
    "23": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1440": { "file": "electiontest.hny", "line": "29", "column": "16", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "725": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "20", "endline": "37", "endcolumn": "24", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "1145": { "file": "electionimpl.hny", "line": "51", "column": "5", "endline": "51", "endcolumn": "44", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "1092": { "file": "electionimpl.hny", "line": "43", "column": "27", "endline": "43", "endcolumn": "33", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "676": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "5", "endline": "22", "endcolumn": "12", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "724": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "10", "endline": "37", "endcolumn": "16", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "596": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "149": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1432": { "file": "electiontest.hny", "line": "37", "column": "13", "endline": "37", "endcolumn": "39", "stmt": [37,13,37,39], "code": "            assert winner_idx == WINNER" },
    "534": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "14", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "612": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "70", "column": "48", "endline": "70", "endcolumn": "52", "stmt": [69,21,70,53], "code": "                                | combinations(tl, k)" },
    "1171": { "file": "electionimpl.hny", "line": "59", "column": "23", "endline": "59", "endcolumn": "32", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "1111": { "file": "electionimpl.hny", "line": "45", "column": "19", "endline": "45", "endcolumn": "26", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "1488": { "file": "electiontest.hny", "line": "1", "column": "1", "endline": "44", "endcolumn": "23", "stmt": [1,1,44,23], "code": "from synch import Lock, acquire, release" },
    "674": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "758": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "49", "column": "36", "endline": "49", "endcolumn": "37", "stmt": [49,13,49,43], "code": "            cnt = bag.multiplicity(!c, ctx)" },
    "428": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "23", "endline": "31", "endcolumn": "24", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1292": { "file": "electiontest.hny", "line": "9", "column": "1", "endline": "9", "endcolumn": "16", "stmt": [9,1,9,23], "code": "EXPECTED_VOTES = [3, 0]" },
    "726": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "9", "endline": "37", "endcolumn": "18", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "594": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "36", "endline": "69", "endcolumn": "40", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1216": { "file": "electionimpl.hny", "line": "69", "column": "66", "endline": "69", "endcolumn": "79", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "1006": { "file": "electionimpl.hny", "line": "20", "column": "45", "endline": "20", "endcolumn": "49", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "858": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "66", "column": "16", "endline": "66", "endcolumn": "16", "stmt": [66,16,68,6], "code": "    atomically when !sema > 0:" },
    "489": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "42", "column": "1", "endline": "42", "endcolumn": "17", "stmt": [42,1,42,17], "code": "def add(bg, elt):" },
    "1066": { "file": "electionimpl.hny", "line": "34", "column": "25", "endline": "34", "endcolumn": "33", "stmt": [34,5,34,44], "code": "    acquire(?(election->locks_cit[citizen]))" },
    "396": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "24", "column": "14", "endline": "24", "endcolumn": "14", "stmt": [24,5,24,14], "code": "    result = 0" },
    "58": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "13", "column": "21", "endline": "13", "endcolumn": "32", "stmt": [13,5,13,33], "code": "    result = subseq(s, 1, len(s))" },
    "789": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "61", "endline": "52", "endcolumn": "63", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "786": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "58", "endline": "52", "endcolumn": "58", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "1325": { "file": "electiontest.hny", "line": "19", "column": "5", "endline": "19", "endcolumn": "48", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1206": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "13", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "309": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "3", "stmt": [1,1,1,12], "code": "def empty():" },
    "1084": { "file": "electionimpl.hny", "line": "39", "column": "15", "endline": "39", "endcolumn": "33", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "435": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "34", "column": "1", "endline": "34", "endcolumn": "3", "stmt": [34,1,34,13], "code": "def bmax(bg):" },
    "429": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "18", "endline": "31", "endcolumn": "25", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "1188": { "file": "electionimpl.hny", "line": "64", "column": "1", "endline": "64", "endcolumn": "3", "stmt": [64,1,64,53], "code": "def transfer(election, candidate_from, candidate_to):" },
    "1276": { "file": "electionimpl.hny", "line": "83", "column": "5", "endline": "83", "endcolumn": "10", "stmt": [83,5,83,14], "code": "    return idx" },
    "247": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "246": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "51", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "46": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "9", "column": "14", "endline": "9", "endcolumn": "14", "stmt": [9,5,9,17], "code": "    result = s[0]" },
    "1341": { "file": "electiontest.hny", "line": "23", "column": "39", "endline": "23", "endcolumn": "49", "stmt": [23,5,23,50], "code": "    election.vote(e, first_candidate, citizen_idx)" },
    "944": { "file": "electionimpl.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "19", "stmt": [4,1,4,19], "code": "def Election(n, m):" },
    "536": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "62", "column": "22", "endline": "62", "endcolumn": "23", "stmt": [62,9,62,24], "code": "        let n = size(bg):" },
    "1315": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1076": { "file": "electionimpl.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "43", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "1427": { "file": "electiontest.hny", "line": "36", "column": "26", "endline": "36", "endcolumn": "40", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "495": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "989": { "file": "electionimpl.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "46", "stmt": [16,5,16,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "1056": { "file": "electionimpl.hny", "line": "29", "column": "35", "endline": "29", "endcolumn": "43", "stmt": [29,5,29,46], "code": "    release(?(election->locks_can[candidate]))" },
    "848": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "59", "column": "1", "endline": "59", "endcolumn": "17", "stmt": [59,1,59,17], "code": "def notifyAll(c):" },
    "314": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "1", "column": "1", "endline": "1", "endcolumn": "12", "stmt": [1,1,1,12], "code": "def empty():" },
    "409": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "9", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "1447": { "file": "electiontest.hny", "line": "39", "column": "17", "endline": "39", "endcolumn": "24", "stmt": [39,1,39,25], "code": "spawn test_vote(?e, 0, 0)" },
    "783": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "25", "endline": "52", "endcolumn": "72", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "526": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "8", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "666": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "13", "endline": "19", "endcolumn": "16", "stmt": [19,13,19,20], "code": "            !p = new" },
    "1317": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1272": { "file": "electionimpl.hny", "line": "82", "column": "19", "endline": "82", "endcolumn": "19", "stmt": [82,13,82,19], "code": "            idx = i" },
    "841": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "17", "endline": "60", "endcolumn": "17", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "649": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "12", "stmt": [10,1,10,12], "code": "def tas(lk):" },
    "1072": { "file": "electionimpl.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "24", "stmt": [35,5,35,53], "code": "    candidate = election->citizens[citizen].voted_for" },
    "494": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "51", "column": "14", "endline": "51", "endcolumn": "15", "stmt": [51,5,51,15], "code": "    result = bg" },
    "1288": { "file": "electiontest.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,18], "code": "NUM_CANDIDATES = 2" },
    "1039": { "file": "electionimpl.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "18", "stmt": [25,5,25,18], "code": "    result = False" },
    "1333": { "file": "electiontest.hny", "line": "22", "column": "1", "endline": "22", "endcolumn": "69", "stmt": [22,1,22,69], "code": "def test_withdraw(e, first_candidate, second_candidate, citizen_idx):" },
    "1117": { "file": "electionimpl.hny", "line": "45", "column": "45", "endline": "45", "endcolumn": "49", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "1020": { "file": "electionimpl.hny", "line": "22", "column": "19", "endline": "22", "endcolumn": "26", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "147": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1328": { "file": "electiontest.hny", "line": "20", "column": "13", "endline": "20", "endcolumn": "14", "stmt": [20,5,20,14], "code": "    complete()" },
    "586": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1361": { "file": "electiontest.hny", "line": "25", "column": "40", "endline": "25", "endcolumn": "50", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "855": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "19", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "300": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "336": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "5", "endline": "5", "endcolumn": "12", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "303": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "93": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "27", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "1183": { "file": "electionimpl.hny", "line": "62", "column": "35", "endline": "62", "endcolumn": "43", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "929": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "81", "column": "17", "endline": "81", "endcolumn": "17", "stmt": [81,16,81,41], "code": "    atomically !q = list.append(!q, item)" },
    "1256": { "file": "electionimpl.hny", "line": "79", "column": "5", "endline": "79", "endcolumn": "7", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "1002": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "34", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "140": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "241": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "172": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "20", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "954": { "file": "electionimpl.hny", "line": "7", "column": "20", "endline": "7", "endcolumn": "30", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "481": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "22", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "153": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "29", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "782": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "26", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "525": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "8", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "240": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "44", "column": "24", "endline": "44", "endcolumn": "55", "stmt": [44,9,44,57], "code": "        let higher = [ v for v in rest where v >= pivot ]:" },
    "1246": { "file": "electionimpl.hny", "line": "74", "column": "5", "endline": "74", "endcolumn": "49", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1202": { "file": "electionimpl.hny", "line": "67", "column": "35", "endline": "67", "endcolumn": "46", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "317": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "33", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "1127": { "file": "electionimpl.hny", "line": "46", "column": "9", "endline": "46", "endcolumn": "47", "stmt": [46,9,46,50], "code": "        election->citizens[citizen].voted_for = -1" },
    "1397": { "file": "electiontest.hny", "line": "32", "column": "22", "endline": "32", "endcolumn": "35", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1485": { "file": "electiontest.hny", "line": "44", "column": "15", "endline": "44", "endcolumn": "16", "stmt": [44,1,44,16], "code": "spawn end_test()" },
    "1355": { "file": "electiontest.hny", "line": "25", "column": "19", "endline": "25", "endcolumn": "19", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "408": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "26", "column": "19", "endline": "26", "endcolumn": "19", "stmt": [26,9,26,19], "code": "        result += c" },
    "1262": { "file": "electionimpl.hny", "line": "80", "column": "12", "endline": "80", "endcolumn": "24", "stmt": [80,9,80,32], "code": "        if candidates[i] > high:" },
    "1230": { "file": "electionimpl.hny", "line": "73", "column": "25", "endline": "73", "endcolumn": "33", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "388": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "20", "column": "18", "endline": "20", "endcolumn": "18", "stmt": [20,9,20,18], "code": "        result = 0" },
    "315": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "4", "column": "1", "endline": "4", "endcolumn": "3", "stmt": [4,1,4,15], "code": "def fromSet(s):" },
    "1165": { "file": "electionimpl.hny", "line": "56", "column": "5", "endline": "56", "endcolumn": "46", "stmt": [56,5,56,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "853": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "780": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "31", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "722": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "171": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1327": { "file": "electiontest.hny", "line": "20", "column": "5", "endline": "20", "endcolumn": "12", "stmt": [20,5,20,14], "code": "    complete()" },
    "842": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "60", "column": "17", "endline": "60", "endcolumn": "17", "stmt": [60,16,60,31], "code": "    atomically !c = bag.empty()" },
    "615": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "21", "endline": "69", "endcolumn": "28", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1046": { "file": "electionimpl.hny", "line": "28", "column": "35", "endline": "28", "endcolumn": "41", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "539": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "63", "column": "16", "endline": "63", "endcolumn": "16", "stmt": [63,13,63,21], "code": "            if k > n:" },
    "28": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "3", "column": "16", "endline": "3", "endcolumn": "37", "stmt": [3,5,3,39], "code": "    result = [ s[x] for x in {b..e-1} ]" },
    "1371": { "file": "electiontest.hny", "line": "28", "column": "1", "endline": "28", "endcolumn": "3", "stmt": [28,1,28,15], "code": "def end_test():" },
    "1151": { "file": "electionimpl.hny", "line": "52", "column": "15", "endline": "52", "endcolumn": "33", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "955": { "file": "electionimpl.hny", "line": "7", "column": "9", "endline": "11", "endcolumn": "54", "stmt": [5,5,12,5], "code": "        .locks_can:[Lock(),]*n," },
    "1141": { "file": "electionimpl.hny", "line": "51", "column": "15", "endline": "51", "endcolumn": "33", "stmt": [51,5,51,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "720": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "14", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "672": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "21", "column": "1", "endline": "21", "endcolumn": "22", "stmt": [21,1,21,22], "code": "def BinSema(acquired):" },
    "168": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1294": { "file": "electiontest.hny", "line": "10", "column": "1", "endline": "10", "endcolumn": "8", "stmt": [10,1,10,10], "code": "WINNER = 0" },
    "1214": { "file": "electionimpl.hny", "line": "69", "column": "55", "endline": "69", "endcolumn": "64", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "854": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "5", "endline": "63", "endcolumn": "12", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "599": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1175": { "file": "electionimpl.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "43", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "83": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "19", "stmt": [19,9,19,19], "code": "        result += v" },
    "1224": { "file": "electionimpl.hny", "line": "70", "column": "27", "endline": "70", "endcolumn": "40", "stmt": [70,5,70,45], "code": "    elections->candidates[candidate_from] = 0" },
    "487": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "23", "endline": "47", "endcolumn": "23", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "1345": { "file": "electiontest.hny", "line": "24", "column": "5", "endline": "24", "endcolumn": "21", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "1105": { "file": "electionimpl.hny", "line": "44", "column": "9", "endline": "44", "endcolumn": "44", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "1457": { "file": "electiontest.hny", "line": "40", "column": "17", "endline": "40", "endcolumn": "24", "stmt": [40,1,40,25], "code": "spawn test_vote(?e, 1, 1)" },
    "1318": { "file": "electiontest.hny", "line": "19", "column": "19", "endline": "19", "endcolumn": "47", "stmt": [19,5,19,48], "code": "    election.vote(e, candidate_idx, citizen_idx)" },
    "1430": { "file": "electiontest.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "24", "stmt": [36,9,36,44], "code": "        let winner_idx = election.winner(?e):" },
    "1010": { "file": "electionimpl.hny", "line": "21", "column": "19", "endline": "21", "endcolumn": "28", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1197": { "file": "electionimpl.hny", "line": "66", "column": "5", "endline": "66", "endcolumn": "51", "stmt": [66,5,66,51], "code": "    acquire(?(election->locks_can[candidate_from]))" },
    "723": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "37", "column": "10", "endline": "37", "endcolumn": "16", "stmt": [37,9,37,24], "code": "        !binsema = False" },
    "673": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "22", "column": "14", "endline": "22", "endcolumn": "21", "stmt": [22,5,22,21], "code": "    result = acquired" },
    "648": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "11", "column": "5", "endline": "11", "endcolumn": "15", "stmt": [11,5,11,15], "code": "    atomically:" },
    "146": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1301": { "file": "electiontest.hny", "line": "12", "column": "5", "endline": "12", "endcolumn": "51", "stmt": [12,1,12,51], "code": "e = election.Election(NUM_CANDIDATES, NUM_CITIZENS)" },
    "1062": { "file": "electionimpl.hny", "line": "32", "column": "1", "endline": "32", "endcolumn": "3", "stmt": [32,1,32,32], "code": "def withdraw(election, citizen):" },
    "427": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "31", "column": "23", "endline": "31", "endcolumn": "24", "stmt": [31,5,31,26], "code": "    result = min(keys(bg))" },
    "328": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "5", "column": "16", "endline": "5", "endcolumn": "18", "stmt": [5,5,5,35], "code": "    result = { elt:1 for elt in s }" },
    "305": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "88": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "16", "column": "1", "endline": "16", "endcolumn": "11", "stmt": [16,1,16,11], "code": "def sum(a):" },
    "1012": { "file": "electionimpl.hny", "line": "21", "column": "30", "endline": "21", "endcolumn": "38", "stmt": [21,9,21,44], "code": "        election->candidates[candidate] += 1" },
    "1000": { "file": "electionimpl.hny", "line": "20", "column": "8", "endline": "20", "endcolumn": "25", "stmt": [20,5,20,50], "code": "    if election->citizens[citizen].voted == False:" },
    "141": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "588": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "524": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "58", "column": "1", "endline": "58", "endcolumn": "24", "stmt": [58,1,58,24], "code": "def combinations(bg, k):" },
    "1377": { "file": "electiontest.hny", "line": "29", "column": "21", "endline": "29", "endcolumn": "65", "stmt": [29,16,29,65], "code": "    atomically when threads_executed == number_of_spawned_threads:" },
    "852": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "302": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "38": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "6", "column": "19", "endline": "6", "endcolumn": "19", "stmt": [6,5,6,21], "code": "    result = s + [e,]" },
    "660": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "18", "column": "12", "endline": "18", "endcolumn": "17", "stmt": [18,9,18,18], "code": "        if result:" },
    "257": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "42", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1090": { "file": "electionimpl.hny", "line": "43", "column": "18", "endline": "43", "endcolumn": "25", "stmt": [43,5,43,49], "code": "    if election->citizens[citizen].voted == True:" },
    "1204": { "file": "electionimpl.hny", "line": "67", "column": "5", "endline": "67", "endcolumn": "49", "stmt": [67,5,67,49], "code": "    acquire(?(election->locks_can[candidate_to]))" },
    "1244": { "file": "electionimpl.hny", "line": "74", "column": "15", "endline": "74", "endcolumn": "47", "stmt": [74,5,74,49], "code": "    release(?(election->locks_can[candidate_to]))" },
    "1308": { "file": "electiontest.hny", "line": "16", "column": "9", "endline": "16", "endcolumn": "29", "stmt": [16,9,16,29], "code": "        threads_executed += 1" },
    "584": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "52", "endline": "69", "endcolumn": "74", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1177": { "file": "electionimpl.hny", "line": "62", "column": "5", "endline": "62", "endcolumn": "11", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "438": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "35", "column": "5", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,20], "code": "    assert bg != {:}" },
    "1398": { "file": "electiontest.hny", "line": "32", "column": "38", "endline": "32", "endcolumn": "38", "stmt": [32,9,32,39], "code": "        for i in {0, NUM_CANDIDATES -1}:" },
    "1286": { "file": "electiontest.hny", "line": "5", "column": "1", "endline": "5", "endcolumn": "27", "stmt": [5,1,5,29], "code": "number_of_spawned_threads = 4" },
    "480": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "45", "column": "9", "endline": "45", "endcolumn": "24", "stmt": [45,9,45,24], "code": "        result[elt] += 1" },
    "721": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "36", "column": "9", "endline": "36", "endcolumn": "23", "stmt": [36,9,36,23], "code": "        assert !binsema" },
    "339": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "7", "column": "1", "endline": "7", "endcolumn": "16", "stmt": [7,1,7,16], "code": "def fromList(a):" },
    "252": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "32", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1115": { "file": "electionimpl.hny", "line": "45", "column": "36", "endline": "45", "endcolumn": "41", "stmt": [45,9,45,49], "code": "        election->citizens[citizen].voted = False" },
    "175": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1147": { "file": "electionimpl.hny", "line": "52", "column": "5", "endline": "52", "endcolumn": "11", "stmt": [52,5,52,46], "code": "    release(?(election->locks_can[candidate]))" },
    "585": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "253": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "28", "endline": "45", "endcolumn": "32", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1212": { "file": "electionimpl.hny", "line": "69", "column": "5", "endline": "69", "endcolumn": "80", "stmt": [69,5,69,80], "code": "    elections->candidates[candidate_to] += elections->candidates[candidate_from]" },
    "678": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "3", "stmt": [24,1,24,11], "code": "def Lock():" },
    "1086": { "file": "electionimpl.hny", "line": "39", "column": "15", "endline": "39", "endcolumn": "44", "stmt": [39,5,39,46], "code": "    acquire(?(election->locks_can[candidate]))" },
    "420": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "856": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "3", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "781": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "52", "column": "30", "endline": "52", "endcolumn": "32", "stmt": [52,20,52,72], "code": "        atomically when (not !lk) and (bag.multiplicity(!c, ctx) <= cnt):" },
    "664": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "19", "column": "18", "endline": "19", "endcolumn": "20", "stmt": [19,13,19,20], "code": "            !p = new" },
    "256": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "42", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1274": { "file": "electionimpl.hny", "line": "79", "column": "23", "endline": "79", "endcolumn": "23", "stmt": [79,5,79,23], "code": "    for i in candidates:" },
    "179": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "16", "endline": "35", "endcolumn": "34", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "54": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "12", "column": "1", "endline": "12", "endcolumn": "3", "stmt": [12,1,12,12], "code": "def tail(s):" },
    "1347": { "file": "electiontest.hny", "line": "24", "column": "23", "endline": "24", "endcolumn": "23", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "1107": { "file": "electionimpl.hny", "line": "44", "column": "44", "endline": "44", "endcolumn": "44", "stmt": [44,9,44,44], "code": "        election->candidates[candidate] -= 1" },
    "1181": { "file": "electionimpl.hny", "line": "62", "column": "15", "endline": "62", "endcolumn": "33", "stmt": [62,5,62,46], "code": "    release(?(election->locks_can[candidate]))" },
    "587": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "69", "column": "32", "endline": "69", "endcolumn": "34", "stmt": [69,21,70,53], "code": "                    result = { add(x, hd) for x in combinations(tl, k - 1) }" },
    "1331": { "file": "electiontest.hny", "line": "18", "column": "1", "endline": "18", "endcolumn": "45", "stmt": [18,1,18,45], "code": "def test_vote(e, candidate_idx, citizen_idx):" },
    "1254": { "file": "electionimpl.hny", "line": "78", "column": "5", "endline": "78", "endcolumn": "9", "stmt": [78,5,78,12], "code": "    idx = -1" },
    "484": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "16", "endline": "47", "endcolumn": "18", "stmt": [47,9,47,23], "code": "        result[elt] = 1" },
    "851": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "63", "column": "14", "endline": "63", "endcolumn": "16", "stmt": [63,5,63,16], "code": "    result = cnt" },
    "679": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "24", "column": "1", "endline": "24", "endcolumn": "11", "stmt": [24,1,24,11], "code": "def Lock():" },
    "98": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "23", "column": "16", "endline": "23", "endcolumn": "16", "stmt": [23,5,23,29], "code": "    result = { v for v in a }" },
    "174": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "35", "column": "17", "endline": "35", "endcolumn": "20", "stmt": [35,5,35,36], "code": "    result = [ (k, v) for k:v in d ]" },
    "1022": { "file": "electionimpl.hny", "line": "22", "column": "28", "endline": "22", "endcolumn": "34", "stmt": [22,9,22,48], "code": "        election->citizens[citizen].voted = True" },
    "661": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "18", "column": "9", "endline": "18", "endcolumn": "10", "stmt": [18,9,18,18], "code": "        if result:" },
    "142": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "31", "column": "16", "endline": "31", "endcolumn": "16", "stmt": [31,5,31,31], "code": "    result = [ v for _:v in d ]" },
    "1307": { "file": "electiontest.hny", "line": "16", "column": "29", "endline": "16", "endcolumn": "29", "stmt": [16,9,16,29], "code": "        threads_executed += 1" },
    "849": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "3", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "1358": { "file": "electiontest.hny", "line": "25", "column": "22", "endline": "25", "endcolumn": "37", "stmt": [25,5,25,51], "code": "    election.vote(e, second_candidate, citizen_idx)" },
    "527": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "13", "endline": "59", "endcolumn": "13", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "1050": { "file": "electionimpl.hny", "line": "28", "column": "5", "endline": "28", "endcolumn": "44", "stmt": [28,5,28,44], "code": "    release(?(election->locks_cit[citizen]))" },
    "424": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "5", "endline": "30", "endcolumn": "10", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "421": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "12", "endline": "30", "endcolumn": "13", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "667": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "16", "column": "5", "endline": "16", "endcolumn": "15", "stmt": [16,5,16,15], "code": "    atomically:" },
    "399": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "25", "column": "16", "endline": "25", "endcolumn": "17", "stmt": [25,5,25,17], "code": "    for _:c in bg:" },
    "1135": { "file": "electionimpl.hny", "line": "48", "column": "5", "endline": "48", "endcolumn": "16", "stmt": [48,5,48,16], "code": "    return False" },
    "1222": { "file": "electionimpl.hny", "line": "70", "column": "16", "endline": "70", "endcolumn": "25", "stmt": [70,5,70,45], "code": "    elections->candidates[candidate_from] = 0" },
    "857": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "65", "column": "1", "endline": "65", "endcolumn": "12", "stmt": [65,1,65,12], "code": "def P(sema):" },
    "482": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "44", "column": "5", "endline": "44", "endcolumn": "21", "stmt": [44,5,44,21], "code": "    if elt in result:" },
    "301": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "43", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "255": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "38", "endline": "45", "endcolumn": "43", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "1167": { "file": "electionimpl.hny", "line": "59", "column": "5", "endline": "59", "endcolumn": "10", "stmt": [59,5,59,43], "code": "    return elections->candidates[candidate]" },
    "1040": { "file": "electionimpl.hny", "line": "25", "column": "14", "endline": "25", "endcolumn": "18", "stmt": [25,5,25,18], "code": "    result = False" },
    "1348": { "file": "electiontest.hny", "line": "24", "column": "23", "endline": "24", "endcolumn": "36", "stmt": [24,5,24,37], "code": "    election.withdraw(e, citizen_idx)" },
    "1157": { "file": "electionimpl.hny", "line": "54", "column": "1", "endline": "54", "endcolumn": "3", "stmt": [54,1,54,35], "code": "def get_votes(election, candidate):" },
    "254": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "45", "column": "22", "endline": "45", "endcolumn": "33", "stmt": [45,13,45,60], "code": "            result = qsort(lower) + [pivot,] + qsort(higher)" },
    "423": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "12", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "422": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "30", "column": "18", "endline": "30", "endcolumn": "20", "stmt": [30,5,30,20], "code": "    assert bg != {:}" },
    "1385": { "file": "electiontest.hny", "line": "31", "column": "27", "endline": "31", "endcolumn": "34", "stmt": [31,9,31,35], "code": "        election.transfer(?e, 1, 0)" },
    "1367": { "file": "electiontest.hny", "line": "26", "column": "13", "endline": "26", "endcolumn": "14", "stmt": [26,5,26,14], "code": "    complete()" },
    "528": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "59", "column": "8", "endline": "59", "endcolumn": "13", "stmt": [59,5,59,14], "code": "    if k == 0:" },
    "306": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/list.hny", "line": "54", "column": "20", "endline": "54", "endcolumn": "43", "stmt": [54,9,54,45], "code": "        result = [ d[n-i] for i in { 1..n } ]" },
    "850": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/synch.hny", "line": "62", "column": "1", "endline": "62", "endcolumn": "19", "stmt": [62,1,62,19], "code": "def Semaphore(cnt):" },
    "1232": { "file": "electionimpl.hny", "line": "73", "column": "35", "endline": "73", "endcolumn": "48", "stmt": [73,5,73,51], "code": "    release(?(election->locks_can[candidate_from]))" },
    "483": { "file": "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/harmony_model_checker/modules/bag.hny", "line": "47", "column": "9", "endline": "47", "endcolumn": "14", "stmt": [47,9,47,23], "code": "        result[elt] = 1" }
  }
}
